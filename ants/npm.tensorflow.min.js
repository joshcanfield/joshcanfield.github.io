/*! For license information please see npm.tensorflow.min.js.LICENSE.txt */
(self.webpackChunkgenetic_ants=self.webpackChunkgenetic_ants||[]).push([[177],{765:(t,e,n)=>{"use strict";n.r(e),n.d(e,{Abs:()=>Ut,Acos:()=>Gt,Acosh:()=>Ht,AdadeltaOptimizer:()=>bo,AdagradOptimizer:()=>wo,AdamOptimizer:()=>No,AdamaxOptimizer:()=>$o,Add:()=>jt,AddN:()=>qt,All:()=>Kt,Any:()=>Xt,ArgMax:()=>Yt,ArgMin:()=>Jt,Asin:()=>Zt,Asinh:()=>Qt,Atan:()=>te,Atan2:()=>ne,Atanh:()=>ee,AvgPool:()=>se,AvgPool3D:()=>ae,AvgPool3DBackprop:()=>ie,AvgPoolBackprop:()=>re,BatchMatMul:()=>oe,BatchToSpaceND:()=>le,BroadcastTo:()=>ue,Callback:()=>sk,CallbackList:()=>Yg,Cast:()=>ce,Ceil:()=>he,ClipByValue:()=>pe,Complex:()=>de,Concat:()=>fe,Conv2D:()=>me,Conv2DBackpropFilter:()=>ge,Conv2DBackpropInput:()=>ye,Conv3D:()=>be,Conv3DBackpropFilterV2:()=>xe,Conv3DBackpropInputV2:()=>we,Cos:()=>ve,Cosh:()=>ke,CropAndResize:()=>Ie,Cumsum:()=>Ne,CustomCallback:()=>Qg,DataStorage:()=>U,DepthToSpace:()=>Ce,DepthwiseConv2dNative:()=>Se,DepthwiseConv2dNativeBackpropFilter:()=>Te,DepthwiseConv2dNativeBackpropInput:()=>Ee,Diag:()=>$e,Dilation2D:()=>Ae,Dilation2DBackpropFilter:()=>De,Dilation2DBackpropInput:()=>Re,Div:()=>Fe,ENV:()=>Pt,EarlyStopping:()=>ik,Elu:()=>_e,EluGrad:()=>Oe,Environment:()=>Lt,Equal:()=>Le,Erf:()=>Me,Exp:()=>ze,Expm1:()=>Be,FFT:()=>Pe,Fill:()=>We,FlipLeftRight:()=>Ve,Floor:()=>Ue,FloorDiv:()=>Ge,FromPixels:()=>Ts,FusedBatchNorm:()=>He,FusedConv2D:()=>As,FusedDepthwiseConv2D:()=>Rs,GatherNd:()=>qe,GatherV2:()=>je,GraphModel:()=>bN,Greater:()=>Ke,GreaterEqual:()=>Xe,History:()=>Zg,IFFT:()=>Je,Identity:()=>Ye,Imag:()=>Ze,InputSpec:()=>zg,IsFinite:()=>Qe,IsInf:()=>tn,IsNan:()=>en,KernelBackend:()=>G,LRN:()=>pn,LRNBackprop:()=>dn,LayerVariable:()=>Og,LayersModel:()=>ub,Less:()=>nn,LessEqual:()=>sn,LinSpace:()=>rn,Log:()=>an,Log1p:()=>on,LogSoftmax:()=>hn,LogicalAnd:()=>ln,LogicalNot:()=>un,LogicalOr:()=>cn,Max:()=>fn,MaxPool:()=>gn,MaxPool3D:()=>bn,MaxPool3DBackprop:()=>xn,MaxPoolBackprop:()=>yn,MaxPoolWithArgmax:()=>wn,Maximum:()=>mn,Mean:()=>vn,Min:()=>kn,Minimum:()=>Nn,MirrorPad:()=>In,Mod:()=>Cn,MomentumOptimizer:()=>Ro,Multiply:()=>Sn,Negate:()=>Tn,NonMaxSuppressionV3:()=>$n,NonMaxSuppressionV4:()=>An,NonMaxSuppressionV5:()=>Rn,NotEqual:()=>En,OP_SCOPE_SUFFIX:()=>Dr,OneHot:()=>Fn,OnesLike:()=>Dn,Optimizer:()=>yo,PadV2:()=>_n,Pool:()=>On,Pow:()=>Mn,Prelu:()=>Ln,Prod:()=>zn,RMSPropOptimizer:()=>Do,RNN:()=>gx,Range:()=>Bn,Rank:()=>lr,Real:()=>Pn,Reciprocal:()=>Wn,Reduction:()=>xp,Relu:()=>Vn,Relu6:()=>Kn,Reshape:()=>Un,ResizeBilinear:()=>jn,ResizeBilinearGrad:()=>qn,ResizeNearestNeighbor:()=>Gn,ResizeNearestNeighborGrad:()=>Hn,Reverse:()=>Xn,RotateWithOffset:()=>Es,Round:()=>Yn,Rsqrt:()=>Jn,SGDOptimizer:()=>Ao,ScatterNd:()=>Zn,SelectV2:()=>Qn,Selu:()=>ts,Sequential:()=>db,Sigmoid:()=>as,Sign:()=>rs,Sin:()=>ns,Sinh:()=>ss,Slice:()=>es,Softmax:()=>hs,Softplus:()=>is,SpaceToBatchND:()=>us,SparseToDense:()=>ms,SplitV:()=>cs,Sqrt:()=>os,Square:()=>ds,SquaredDifference:()=>ps,Step:()=>Ss,StridedSlice:()=>gs,Sub:()=>fs,Sum:()=>ls,SymbolicTensor:()=>Bg,Tan:()=>ys,Tanh:()=>bs,Tensor:()=>ir,TensorBuffer:()=>nr,Tile:()=>xs,TopK:()=>ws,Transpose:()=>vs,Unique:()=>ks,Unpack:()=>Ns,UnsortedSegmentSum:()=>Is,Variable:()=>or,ZerosLike:()=>Cs,_FusedMatMul:()=>$s,abs:()=>Io,acos:()=>Fo,acosh:()=>_o,add:()=>eo,addN:()=>Oo,addStrict:()=>gh,all:()=>Go,any:()=>Ho,argMax:()=>jo,argMin:()=>qo,asin:()=>Ko,asinh:()=>Xo,atan:()=>Yo,atan2:()=>Jo,atanh:()=>Zo,avgPool:()=>pl,avgPool3d:()=>dl,backend:()=>Qi,backend_util:()=>g,basicLSTMCell:()=>wl,batchNorm:()=>Nl,batchNorm2d:()=>Il,batchNorm3d:()=>Cl,batchNorm4d:()=>Sl,batchToSpaceND:()=>vl,booleanMaskAsync:()=>uh,broadcastTo:()=>Tl,browser:()=>l,buffer:()=>Ca,callbacks:()=>ok,cast:()=>Sa,ceil:()=>El,clipByValue:()=>$l,clone:()=>Ta,complex:()=>_r,concat:()=>gl,concat1d:()=>Al,concat2d:()=>Rl,concat3d:()=>Dl,concat4d:()=>Fl,constraints:()=>b,conv1d:()=>Ol,conv2d:()=>_l,conv2dTranspose:()=>Ll,conv3d:()=>zl,conv3dTranspose:()=>Pl,copyRegisteredKernels:()=>Ws,cos:()=>Wl,cosh:()=>Vl,cosineWindow:()=>Dh,cumsum:()=>Ul,customGrad:()=>fo,data:()=>W,deprecationWarn:()=>Li,depthToSpace:()=>Gl,depthwiseConv2d:()=>Hl,deregisterOp:()=>dk,device_util:()=>a,diag:()=>jl,dilation2d:()=>ql,disableDeprecationWarnings:()=>Mi,dispose:()=>Ui,disposeVariables:()=>zi,div:()=>so,divNoNan:()=>Yl,divStrict:()=>yh,dot:()=>Jl,dropout:()=>Ah,elu:()=>Zl,enableDebugMode:()=>Oi,enableProdMode:()=>_i,enclosingPowerOfTwo:()=>Rh,engine:()=>Bi,env:()=>zt,equal:()=>Kl,equalStrict:()=>ch,erf:()=>Ql,exp:()=>tu,expandDims:()=>eu,expm1:()=>nu,eye:()=>ru,fft:()=>Bc,fill:()=>xo,findBackend:()=>Yi,findBackendFactory:()=>Ji,floor:()=>au,floorDiv:()=>no,fused:()=>m,gather:()=>hu,gatherND:()=>$h,gather_util:()=>u,getBackend:()=>Ki,getGradient:()=>Os,getKernel:()=>_s,getKernelsForBackend:()=>Ms,grad:()=>lo,grads:()=>uo,greater:()=>pu,greaterEqual:()=>du,greaterEqualStrict:()=>hh,greaterStrict:()=>ph,ifft:()=>Pc,imag:()=>fu,image:()=>Rp,inTopKAsync:()=>Fh,initializers:()=>x,input:()=>yb,io:()=>i,irfft:()=>Wc,isFinite:()=>mu,isInf:()=>gu,isNaN:()=>yu,keep:()=>Gi,kernel_impls:()=>y,layers:()=>w,leakyRelu:()=>bu,less:()=>xu,lessEqual:()=>wu,lessEqualStrict:()=>dh,lessStrict:()=>fh,linalg:()=>Dp,linspace:()=>vu,loadGraphModel:()=>xN,loadLayersModel:()=>gb,localResponseNormalization:()=>ku,log:()=>Nu,log1p:()=>Iu,logSigmoid:()=>Tu,logSoftmax:()=>Au,logSumExp:()=>Ru,logicalAnd:()=>Du,logicalNot:()=>Fu,logicalOr:()=>_u,logicalXor:()=>Ou,losses:()=>Fp,matMul:()=>qa,math:()=>o,max:()=>Eu,maxPool:()=>Mu,maxPool3d:()=>Lu,maxPoolWithArgmax:()=>zu,maximum:()=>Eo,maximumStrict:()=>bh,mean:()=>Wu,memory:()=>Pi,metrics:()=>v,min:()=>Vu,minimum:()=>Uu,minimumStrict:()=>xh,mirrorPad:()=>Gu,mod:()=>Hu,modStrict:()=>wh,model:()=>fb,models:()=>k,moments:()=>ju,movingAverage:()=>Sh,mul:()=>ro,mulStrict:()=>vh,multiRNNCell:()=>qu,multinomial:()=>Ku,neg:()=>Cu,nextFrame:()=>Lp,norm:()=>Ch,notEqual:()=>Xu,notEqualStrict:()=>mh,oneHot:()=>Ka,ones:()=>Pu,onesLike:()=>Ju,op:()=>Fr,outerProduct:()=>Zu,pad:()=>Qu,pad1d:()=>tc,pad2d:()=>ec,pad3d:()=>nc,pad4d:()=>sc,pool:()=>ac,pow:()=>vo,powStrict:()=>kh,prelu:()=>ic,print:()=>Ea,prod:()=>oc,profile:()=>Wi,rand:()=>lc,randomGamma:()=>dc,randomNormal:()=>fc,randomUniform:()=>mc,range:()=>yc,ready:()=>qi,real:()=>Yu,reciprocal:()=>bc,registerBackend:()=>Zi,registerCallbackConstructor:()=>bb,registerGradient:()=>zs,registerKernel:()=>Ls,registerOp:()=>hk,regularizers:()=>N,relu:()=>xc,relu6:()=>wc,removeBackend:()=>Xi,reshape:()=>ja,reverse:()=>vc,reverse1d:()=>kc,reverse2d:()=>Nc,reverse3d:()=>Ic,reverse4d:()=>Cc,rfft:()=>Gc,round:()=>Sc,rsqrt:()=>Tc,scalar:()=>go,scatterND:()=>Th,scatter_util:()=>c,selu:()=>Ec,separableConv2d:()=>$c,sequential:()=>mb,serialization:()=>p,setBackend:()=>ji,setPlatform:()=>to,setdiff1dAsync:()=>Ac,sigmoid:()=>yl,sign:()=>Rc,signal:()=>Ap,sin:()=>Dc,sinh:()=>Fc,slice:()=>bl,slice1d:()=>_c,slice2d:()=>Oc,slice3d:()=>Mc,slice4d:()=>Lc,slice_util:()=>h,softmax:()=>zc,softplus:()=>Su,spaceToBatchND:()=>rc,sparseToDense:()=>Eh,spectral:()=>$p,split:()=>Uc,sqrt:()=>ao,square:()=>io,squaredDifference:()=>Hc,squaredDifferenceStrict:()=>Nh,squeeze:()=>jc,stack:()=>qc,step:()=>Kc,stridedSlice:()=>Xc,sub:()=>ko,subStrict:()=>Ih,sum:()=>$u,sumOutType:()=>mr,tan:()=>Yc,tanh:()=>xl,tensor:()=>Mr,tensor1d:()=>gc,tensor2d:()=>Jc,tensor3d:()=>Ja,tensor4d:()=>Zc,tensor5d:()=>Qc,tensor6d:()=>th,tensor_util:()=>r,test_util:()=>d,tidy:()=>Vi,tile:()=>su,time:()=>Hi,topk:()=>eh,train:()=>Op,transpose:()=>Xa,truncatedNormal:()=>nh,unique:()=>sh,unregisterGradient:()=>Ps,unregisterKernel:()=>Bs,unsortedSegmentSum:()=>rh,unstack:()=>ah,upcastType:()=>fr,util:()=>s,valueAndGrad:()=>co,valueAndGrads:()=>ho,variable:()=>ih,variableGrads:()=>po,version:()=>KD,version_converter:()=>wN,version_core:()=>Fi,version_layers:()=>Oy,where:()=>Xl,whereAsync:()=>lh,zeros:()=>Bu,zerosLike:()=>oo});var s={};n.r(s),n.d(s,{arraysEqual:()=>rt,assert:()=>Z,assertNonNegativeIntegerDimensions:()=>Ft,assertNonNull:()=>tt,assertShapesMatch:()=>Q,bytesFromStringArray:()=>vt,bytesPerElement:()=>wt,checkConversionForErrors:()=>gt,clamp:()=>q,computeStrides:()=>Et,createScalarValue:()=>Ys,createShuffledIndices:()=>lt,decodeString:()=>er,distSquared:()=>J,encodeString:()=>tr,fetch:()=>Qs,flatten:()=>et,getArrayFromDType:()=>mt,getTypedArrayFromDType:()=>ft,hasEncodingLoss:()=>bt,indexToLoc:()=>Ot,inferDtype:()=>Ct,inferFromImplicitShape:()=>ht,isBoolean:()=>Nt,isFunction:()=>St,isInt:()=>at,isNumber:()=>It,isPromise:()=>Mt,isScalarShape:()=>st,isString:()=>kt,isTypedArray:()=>xt,isValidDtype:()=>yt,locToIndex:()=>_t,makeOnesTypedArray:()=>At,makeZerosNestedTypedArray:()=>Dt,makeZerosTypedArray:()=>Rt,nearestDivisor:()=>Tt,nearestLargerEven:()=>K,now:()=>Zs,parseAxisParam:()=>pt,randUniform:()=>Y,repeatedTry:()=>ct,rightPad:()=>ut,shuffle:()=>j,sizeFromShape:()=>nt,sizeToSquarishShape:()=>ot,squeezeShape:()=>dt,sum:()=>X,tanh:()=>it,toNestedArray:()=>$t,toTypedArray:()=>Js});var r={};n.r(r),n.d(r,{assertTypesMatch:()=>yr,getTensorsInContainer:()=>xr,isTensorInList:()=>br,makeTypesMatch:()=>gr});var a={};n.r(a),n.d(a,{isBrowser:()=>Sr,isMobile:()=>Cr});var i={};n.r(i),n.d(i,{browserFiles:()=>Da,browserHTTPRequest:()=>Wa,concatenateArrayBuffers:()=>Ur,copyModel:()=>xa,decodeWeights:()=>Br,encodeWeights:()=>zr,fromMemory:()=>Ga,getLoadHandlers:()=>Jr,getModelArtifactsInfoForJSON:()=>Hr,getSaveHandlers:()=>Yr,http:()=>Pa,isHTTPScheme:()=>za,listModels:()=>ya,loadWeights:()=>Oa,moveModel:()=>wa,registerLoadRouter:()=>Xr,registerSaveRouter:()=>Kr,removeModel:()=>ba,weightsLoaderFactory:()=>Ma,withSaveHandler:()=>Ha});var o={};n.r(o),n.d(o,{confusionMatrix:()=>Ya});var l={};n.r(l),n.d(l,{fromPixels:()=>ti,toPixels:()=>Qa});var u={};n.r(u),n.d(u,{prepareAndValidate:()=>ei});var c={};n.r(c),n.d(c,{calculateShapes:()=>ri,validateInput:()=>si,validateUpdateShape:()=>ni});var h={};n.r(h),n.d(h,{assertParamsValid:()=>ai,computeFlatOffset:()=>bi,computeOutShape:()=>oi,getNormalizedAxes:()=>hi,isSliceContinous:()=>yi,maskToAxes:()=>ii,parseSliceParams:()=>xi,startForAxis:()=>mi,startIndicesWithElidedDims:()=>pi,stopForAxis:()=>gi,stopIndicesWithElidedDims:()=>di,stridesForAxis:()=>fi,stridesWithElidedDims:()=>li});var p={};n.r(p),n.d(p,{Serializable:()=>wi,SerializationMap:()=>vi,registerClass:()=>ki});var d={};n.r(d),n.d(d,{TEST_EPSILON_FLOAT16:()=>Ni,expectArrayBuffersEqual:()=>Di,expectArraysClose:()=>Ii,expectArraysEqual:()=>Ei,expectNumbersClose:()=>$i,expectPromiseToFail:()=>Ti,expectValuesInRange:()=>Ri,testEpsilon:()=>Ci});var f={};n.r(f),n.d(f,{collectGatherOpShapeInfo:()=>cu,computeOutShape:()=>uu,segOpComputeOptimalWindowSize:()=>lu});var m={};n.r(m),n.d(m,{conv2d:()=>Bh,depthwiseConv2d:()=>Vh,matMul:()=>Uh});var g={};n.r(g),n.d(g,{ERF_A1:()=>qp,ERF_A2:()=>Kp,ERF_A3:()=>Xp,ERF_A4:()=>Yp,ERF_A5:()=>Jp,ERF_P:()=>jp,PARALLELIZE_THRESHOLD:()=>iu,SELU_SCALE:()=>Hp,SELU_SCALEALPHA:()=>Gp,applyActivation:()=>Lh,assertAndGetBroadcastShape:()=>To,assertAxesAreInnerMostDims:()=>Po,assertParamsConsistent:()=>fl,assignToTypedArray:()=>ad,axesAreInnerMostDims:()=>Mo,calculateShapes:()=>ri,castTensor:()=>ld,combineLocations:()=>Lo,complexWithEvenIndex:()=>nd,complexWithOddIndex:()=>sd,computeConv2DInfo:()=>nl,computeConv3DInfo:()=>sl,computeDefaultPad:()=>rl,computeDilation2DInfo:()=>Qo,computeOptimalWindowSize:()=>ou,computeOutAndReduceShapes:()=>zo,computeOutShape:()=>ml,computePool2DInfo:()=>tl,computePool3DInfo:()=>el,convertConv2DDataFormat:()=>hl,eitherStridesOrDilationsAreOne:()=>cl,expandShapeToKeepDim:()=>Bo,exponent:()=>od,exponents:()=>id,getAxesPermutation:()=>Wo,getBroadcastDims:()=>Co,getComplexWithIndex:()=>rd,getFusedBiasGradient:()=>Mh,getFusedDyActivation:()=>Oh,getImageCenter:()=>zp,getInnerMostAxes:()=>Uo,getPermuted:()=>Pp,getReductionAxes:()=>So,getReshaped:()=>Bp,getReshapedPermuted:()=>Wp,getSliceBeginCoords:()=>Vp,getSliceSize:()=>Up,getUndoAxesPermutation:()=>Vo,linspaceImpl:()=>cd,log:()=>Qp,mergeRealAndImagArrays:()=>td,prepareAndValidate:()=>ei,prepareSplitSize:()=>Vc,reshapeTensor:()=>ud,segment_util:()=>f,shouldFuse:()=>zh,slice_util:()=>h,splitRealAndImagArrays:()=>ed,tupleValuesAreOne:()=>ul,upcastType:()=>fr,validateInput:()=>si,validateUpdateShape:()=>ni,warn:()=>Zp});var y={};n.r(y),n.d(y,{nonMaxSuppressionV3Impl:()=>ep,nonMaxSuppressionV4Impl:()=>np,nonMaxSuppressionV5Impl:()=>sp,split:()=>hd,tile:()=>pd,topkImpl:()=>dd,whereImpl:()=>oh});var b={};n.r(b),n.d(b,{maxNorm:()=>rm,minMaxNorm:()=>om,nonNeg:()=>im,unitNorm:()=>am});var x={};n.r(x),n.d(x,{constant:()=>dg,glorotNormal:()=>wg,glorotUniform:()=>xg,heNormal:()=>vg,heUniform:()=>kg,identity:()=>yg,leCunNormal:()=>Ng,leCunUniform:()=>Ig,ones:()=>pg,orthogonal:()=>Cg,randomNormal:()=>mg,randomUniform:()=>fg,truncatedNormal:()=>gg,varianceScaling:()=>bg,zeros:()=>hg});var w={};n.r(w),n.d(w,{Layer:()=>Ug,RNN:()=>gx,RNNCell:()=>yx,activation:()=>zw,add:()=>qw,alphaDropout:()=>Lv,average:()=>Kw,averagePooling1d:()=>sv,averagePooling2d:()=>iv,averagePooling3d:()=>uv,avgPool1d:()=>rv,avgPool2d:()=>ov,avgPool3d:()=>cv,avgPooling1d:()=>av,avgPooling2d:()=>lv,avgPooling3d:()=>hv,batchNormalization:()=>tv,bidirectional:()=>$v,concatenate:()=>Xw,conv1d:()=>Aw,conv2d:()=>Rw,conv2dTranspose:()=>Dw,conv3d:()=>Fw,convLstm2d:()=>Cv,convLstm2dCell:()=>Sv,cropping2D:()=>Ow,dense:()=>Bw,depthwiseConv2d:()=>Lw,dot:()=>Qw,dropout:()=>Pw,elu:()=>Iw,embedding:()=>jw,flatten:()=>Vw,gaussianDropout:()=>Mv,gaussianNoise:()=>Ov,globalAveragePooling1d:()=>pv,globalAveragePooling2d:()=>dv,globalMaxPool1d:()=>Rv,globalMaxPool2d:()=>Dv,globalMaxPooling1d:()=>fv,globalMaxPooling2d:()=>mv,gru:()=>xv,gruCell:()=>wv,input:()=>yb,inputLayer:()=>Nw,layerNormalization:()=>ev,leakyReLU:()=>Sw,lstm:()=>vv,lstmCell:()=>kv,masking:()=>zv,maxPool1d:()=>Fv,maxPool2d:()=>_v,maxPooling1d:()=>gv,maxPooling2d:()=>yv,maxPooling3d:()=>bv,maximum:()=>Yw,minimum:()=>Jw,multiply:()=>Zw,permute:()=>Hw,prelu:()=>Tw,reLU:()=>Cw,repeatVector:()=>Uw,reshape:()=>Gw,rnn:()=>Tv,separableConv2d:()=>_w,simpleRNN:()=>Nv,simpleRNNCell:()=>Iv,softmax:()=>Ew,spatialDropout1d:()=>Ww,stackedRNNCells:()=>Ev,thresholdedReLU:()=>$w,timeDistributed:()=>Av,upSampling2d:()=>Mw,zeroPadding2d:()=>nv});var v={};n.r(v),n.d(v,{MAPE:()=>Xv,MSE:()=>Zv,binaryAccuracy:()=>Bv,binaryCrossentropy:()=>Pv,categoricalAccuracy:()=>Vv,categoricalCrossentropy:()=>Uv,cosineProximity:()=>jv,mape:()=>Yv,meanAbsoluteError:()=>qv,meanAbsolutePercentageError:()=>Kv,meanSquaredError:()=>Jv,mse:()=>Qv,precision:()=>Gv,recall:()=>Hv,sparseCategoricalAccuracy:()=>Wv});var k={};n.r(k),n.d(k,{modelFromJSON:()=>hb});var N={};n.r(N),n.d(N,{l1:()=>ek,l1l2:()=>tk,l2:()=>nk});var I={};n.r(I),n.d(I,{json:()=>vk});var C={};n.r(C),n.d(C,{json:()=>kk});var S={};n.r(S),n.d(S,{json:()=>Nk});var T={};n.r(T),n.d(T,{json:()=>Ik});var E={};n.r(E),n.d(E,{json:()=>Ck});var $={};n.r($),n.d($,{json:()=>Sk});var A={};n.r(A),n.d(A,{json:()=>Tk});var R={};n.r(R),n.d(R,{json:()=>Ek});var D={};n.r(D),n.d(D,{json:()=>$k});var F={};n.r(F),n.d(F,{json:()=>Ak});var _={};n.r(_),n.d(_,{json:()=>Rk});var O={};n.r(O),n.d(O,{json:()=>Dk});var M={};n.r(M),n.d(M,{json:()=>Fk});var L={};n.r(L),n.d(L,{json:()=>_k});var z={};n.r(z),n.d(z,{json:()=>Ok});var B={};n.r(B),n.d(B,{json:()=>Mk});var P={};n.r(P),n.d(P,{json:()=>Lk});var W={};n.r(W),n.d(W,{CSVDataset:()=>lI,Dataset:()=>JN,FileDataSource:()=>vI,TextLineDataset:()=>nI,URLDataSource:()=>kI,array:()=>QN,csv:()=>NI,func:()=>II,generator:()=>CI,microphone:()=>TI,version_data:()=>EI,webcam:()=>SI,zip:()=>tI});var V={};n.r(V),n.d(V,{addImpl:()=>aC,ceilImpl:()=>_C,expImpl:()=>bS,expm1Impl:()=>vS,floorImpl:()=>PS,logImpl:()=>ZS,maxImpl:()=>aT,multiplyImpl:()=>IS,notEqualImpl:()=>gT,rsqrtImpl:()=>CT,simpleAbsImpl:()=>fC,sliceImpl:()=>ES,squaredDifferenceImpl:()=>XT,subImpl:()=>RS,transposeImpl:()=>iT,uniqueImpl:()=>sE});class U{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class G{time(t){return H("time")}read(t){return H("read")}readSync(t){return H("readSync")}numDataIds(){return H("numDataIds")}disposeData(t){return H("disposeData")}write(t,e,n){return H("write")}move(t,e,n,s){return H("move")}memory(){return H("memory")}floatPrecision(){return H("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(t,e,n,s){return H("batchMatMul")}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:s,bias:r,activation:a,preluActivationWeights:i}){return H("fusedBatchMatMul")}slice(t,e,n){return H("slice")}stridedSlice(t,e,n,s){return H("stridedSlice")}unstack(t,e){return H("unstack")}reverse(t,e){return H("reverse")}concat(t,e){return H("concat")}neg(t){return H("neg")}add(t,e){return H("add")}addN(t){return H("addN")}subtract(t,e){return H("subtract")}multiply(t,e){return H("multiply")}realDivide(t,e){return H("realDivide")}floorDiv(t,e){return H("floorDiv")}sum(t,e){return H("sum")}prod(t,e){return H("prod")}unsortedSegmentSum(t,e,n){return H("unsortedSegmentSum")}argMin(t,e){return H("argMin")}argMax(t,e){return H("argMax")}equal(t,e){return H("equal")}notEqual(t,e){return H("notEqual")}less(t,e){return H("less")}lessEqual(t,e){return H("lessEqual")}greater(t,e){return H("greater")}greaterEqual(t,e){return H("greaterEqual")}logicalNot(t){return H("logicalNot")}logicalAnd(t,e){return H("logicalAnd")}logicalOr(t,e){return H("logicalOr")}where(t){return H("where")}select(t,e,n){return H("select")}topk(t,e,n){return H("topk")}min(t,e){return H("min")}minimum(t,e){return H("minimum")}mod(t,e){return H("mod")}max(t,e){return H("max")}maximum(t,e){return H("maximum")}all(t,e){return H("all")}any(t,e){return H("any")}squaredDifference(t,e){return H("squaredDifference")}ceil(t){return H("ceil")}floor(t){return H("floor")}round(t){return H("round")}sign(t){return H("sign")}isNaN(t){return H("isNaN")}isInf(t){return H("isInf")}isFinite(t){return H("isFinite")}pow(t,e){return H("pow")}exp(t){return H("exp")}expm1(t){return H("expm1")}softmax(t,e){return H("softmax")}log(t){return H("log")}log1p(t){return H("log1p")}sqrt(t){return H("sqrt")}rsqrt(t){return H("rsqrt")}square(t){return H("square")}reciprocal(t){return H("reciprocal")}relu(t){return H("relu")}relu6(t){return H("relu6")}prelu(t,e){return H("prelu")}elu(t){return H("elu")}eluDer(t,e){return H("eluDer")}selu(t){return H("selu")}int(t){return H("int")}clip(t,e,n){return H("clip")}abs(t){return H("abs")}complexAbs(t){return H("complexAbs")}sigmoid(t){return H("sigmoid")}softplus(t){return H("softplus")}sin(t){return H("sin")}cos(t){return H("cos")}tan(t){return H("tan")}asin(t){return H("asin")}acos(t){return H("acos")}atan(t){return H("atan")}atan2(t,e){return H("atan2")}sinh(t){return H("sinh")}cosh(t){return H("cosh")}tanh(t){return H("tanh")}asinh(t){return H("asinh")}acosh(t){return H("acosh")}atanh(t){return H("atanh")}erf(t){return H("erf")}step(t,e){return H("step")}fusedConv2d({input:t,filter:e,convInfo:n,bias:s,activation:r,preluActivationWeights:a}){return H("fusedConv2d")}conv2d(t,e,n){return H("conv2d")}conv2dDerInput(t,e,n){return H("conv2dDerInput")}conv2dDerFilter(t,e,n){return H("conv2dDerFilter")}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:s,activation:r,preluActivationWeights:a}){return H("fusedDepthwiseConv2D")}depthwiseConv2D(t,e,n){return H("depthwiseConv2D")}depthwiseConv2DDerInput(t,e,n){return H("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(t,e,n){return H("depthwiseConv2DDerFilter")}conv3d(t,e,n){return H("conv3d")}conv3dDerInput(t,e,n){return H("conv3dDerInput")}conv3dDerFilter(t,e,n){return H("conv3dDerFilter")}maxPool(t,e){return H("maxPool")}maxPoolBackprop(t,e,n,s){return H("maxPoolBackprop")}avgPool(t,e){return H("avgPool")}avgPoolBackprop(t,e,n){return H("avgPoolBackprop")}avgPool3d(t,e){return H("avgPool3d")}avgPool3dBackprop(t,e,n){return H("avgPool3dBackprop")}maxPool3d(t,e){return H("maxPool3d")}maxPool3dBackprop(t,e,n,s){return H("maxPool3dBackprop")}reshape(t,e){return H("reshape")}cast(t,e){return H("cast")}tile(t,e){return H("tile")}pad(t,e,n){return H("pad")}transpose(t,e){return H("transpose")}gather(t,e,n){return H("gather")}gatherND(t,e){return H("gatherND")}scatterND(t,e,n){return H("scatterND")}batchToSpaceND(t,e,n){return H("batchToSpaceND")}spaceToBatchND(t,e,n){return H("spaceToBatchND")}resizeBilinear(t,e,n,s){return H("resizeBilinear")}resizeBilinearBackprop(t,e,n){return H("resizeBilinearBackprop")}resizeNearestNeighbor(t,e,n,s){return H("resizeNearestNeighbor")}resizeNearestNeighborBackprop(t,e,n){return H("resizeNearestNeighborBackprop")}batchNorm(t,e,n,s,r,a){return H("batchNorm")}localResponseNormalization4D(t,e,n,s,r){return H("localResponseNormalization4D")}LRNGrad(t,e,n,s,r,a,i){return H("LRNGrad")}multinomial(t,e,n,s){return H("multinomial")}oneHot(t,e,n,s){return H("oneHot")}cumsum(t,e,n,s){return H("cumsum")}nonMaxSuppression(t,e,n,s,r){return H("nonMaxSuppression")}fft(t){return H("fft")}ifft(t){return H("ifft")}complex(t,e){return H("complex")}real(t){return H("real")}imag(t){return H("imag")}cropAndResize(t,e,n,s,r,a){return H("cropAndResize")}depthToSpace(t,e,n){return H("depthToSpace")}split(t,e,n){return H("split")}sparseToDense(t,e,n,s){return H("sparseToDense")}diag(t){return H("diag")}fill(t,e,n){return H("fill")}onesLike(t){return H("onesLike")}zerosLike(t){return H("zerosLike")}linspace(t,e,n){return H("linspace")}dispose(){return H("dispose")}}function H(t){throw new Error(`'${t}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function j(t){let e=t.length,n=0,s=0;for(;e>0;)s=Math.random()*e|0,e--,n=t[e],t[e]=t[s],t[s]=n}function q(t,e,n){return Math.max(t,Math.min(e,n))}function K(t){return t%2==0?t:t+1}function X(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];return e}function Y(t,e){const n=Math.random();return e*n+(1-n)*t}function J(t,e){let n=0;for(let s=0;s<t.length;s++){const r=Number(t[s])-Number(e[s]);n+=r*r}return n}function Z(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function Q(t,e,n=""){Z(rt(t,e),()=>n+` Shapes ${t} and ${e} must match`)}function tt(t){Z(null!=t,()=>"The input to the tensor constructor must be a non-null value.")}function et(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||xt(t)&&!n)for(let s=0;s<t.length;++s)et(t[s],e,n);else e.push(t);return e}function nt(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function st(t){return 0===t.length}function rt(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function at(t){return t%1==0}function it(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;{const e=Math.exp(2*t);return(e-1)/(e+1)}}function ot(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function lt(t){const e=new Uint32Array(t);for(let n=0;n<t;++n)e[n]=n;return j(e),e}function ut(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function ct(t,e=(t=>0),n){return new Promise((s,r)=>{let a=0;const i=()=>{if(t())return void s();a++;const o=e(a);null!=n&&a>=n?r():setTimeout(i,o)};i()})}function ht(t,e){let n=1,s=-1;for(let e=0;e<t.length;++e)if(t[e]>=0)n*=t[e];else if(-1===t[e]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${e}`);s=e}else if(t[e]<0)throw Error(`Shapes can not be < 0. Found ${t[e]} at dim ${e}`);if(-1===s){if(e>0&&e!==n)throw Error(`Size(${e}) must match the product of shape ${t}`);return t}if(0===n)throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);if(e%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);const r=t.slice();return r[s]=e/n,r}function pt(t,e){const n=e.length;return Z((t=null==t?e.map((t,e)=>e):[].concat(t)).every(t=>t>=-n&&t<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+t),Z(t.every(t=>at(t)),()=>"All values in axis param must be integers but got axis "+t),t.map(t=>t<0?n+t:t)}function dt(t,e){const n=[],s=[],r=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||r?null:pt(e,t).sort();let i=0;for(let e=0;e<t.length;++e){if(null!=a){if(a[i]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==a[i]||a[i]>e)&&1===t[e]&&(n.push(t[e]),s.push(e)),a[i]<=e&&i++}1!==t[e]&&(n.push(t[e]),s.push(e))}return{newShape:n,keptDims:s}}function ft(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function mt(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function gt(t,e){for(let n=0;n<t.length;n++){const s=t[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${e} being uploaded contains ${s}.`)}}function yt(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function bt(t,e){return"complex64"!==e&&(("float32"!==e||"complex64"===t)&&(("int32"!==e||"float32"===t||"complex64"===t)&&("bool"!==e||"bool"!==t)))}function xt(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function wt(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function vt(t){if(null==t)return 0;let e=0;return t.forEach(t=>e+=t.length),e}function kt(t){return"string"==typeof t||t instanceof String}function Nt(t){return"boolean"==typeof t}function It(t){return"number"==typeof t}function Ct(t){return Array.isArray(t)?Ct(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":It(t)?"float32":kt(t)?"string":Nt(t)?"bool":"float32"}function St(t){return!!(t&&t.constructor&&t.call&&t.apply)}function Tt(t,e){for(let n=e;n<t;++n)if(t%n==0)return n;return t}function Et(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let s=e-3;s>=0;--s)n[s]=n[s+1]*t[s+1];return n}function $t(t,e){if(0===t.length)return e[0];const n=t.reduce((t,e)=>t*e);if(0===n)return[];if(n!==e.length)throw new Error(`[${t}] does not match the input size ${e.length}.`);return function t(e,n,s){const r=new Array;if(1===n.length){const t=n[0];for(let n=0;n<t;n++)r[n]=s[e+n]}else{const a=n[0],i=n.slice(1),o=i.reduce((t,e)=>t*e);for(let n=0;n<a;n++)r[n]=t(e+n*o,i,s)}return r}(0,t,e)}function At(t,e){const n=Rt(t,e);for(let t=0;t<n.length;t++)n[t]=1;return n}function Rt(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function Dt(t,e){const n=t.reduce((t,e)=>t*e,1);if(null==e||"float32"===e)return $t(t,new Float32Array(n));if("int32"===e)return $t(t,new Int32Array(n));if("bool"===e)return $t(t,new Uint8Array(n));throw new Error("Unknown data type "+e)}function Ft(t){t.forEach(e=>{Z(Number.isInteger(e)&&e>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`)})}function _t(t,e,n){if(0===e)return 0;if(1===e)return t[0];let s=t[t.length-1];for(let e=0;e<t.length-1;++e)s+=n[e]*t[e];return s}function Ot(t,e,n){if(0===e)return[];if(1===e)return[t];const s=new Array(e);for(let e=0;e<s.length-1;++e)s[e]=Math.floor(t/n[e]),t-=s[e]*n[e];return s[s.length-1]=t,s}function Mt(t){return t&&t.then&&"function"==typeof t.then}class Lt{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(Mt(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=function(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(t,...n)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("="))),e}(this.global.location.search);if("tfjsflags"in t){t.tfjsflags.split(",").forEach(t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)})}}}function zt(){return Pt}let Bt,Pt=null;function Wt(){if(null==Bt){let t;if("undefined"!=typeof window)t=window;else if(void 0!==n.g)t=n.g;else if("undefined"!=typeof process)t=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}Bt=t}return Bt}function Vt(t,e){const n=function(){const t=Wt();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const s=e();return n.set(t,s),n.get(t)}}const Ut="Abs",Gt="Acos",Ht="Acosh",jt="Add",qt="AddN",Kt="All",Xt="Any",Yt="ArgMax",Jt="ArgMin",Zt="Asin",Qt="Asinh",te="Atan",ee="Atanh",ne="Atan2",se="AvgPool",re="AvgPoolBackprop",ae="AvgPool3D",ie="AvgPool3DBackprop",oe="BatchMatMul",le="BatchToSpaceND",ue="BroadcastTo",ce="Cast",he="Ceil",pe="ClipByValue",de="Complex",fe="Concat",me="Conv2D",ge="Conv2DBackpropFilter",ye="Conv2DBackpropInput",be="Conv3D",xe="Conv3DBackpropFilterV2",we="Conv3DBackpropInputV2",ve="Cos",ke="Cosh",Ne="Cumsum",Ie="CropAndResize",Ce="DepthToSpace",Se="DepthwiseConv2dNative",Te="DepthwiseConv2dNativeBackpropFilter",Ee="DepthwiseConv2dNativeBackpropInput",$e="Diag",Ae="Dilation2D",Re="Dilation2DBackpropInput",De="Dilation2DBackpropFilter",Fe="Div",_e="Elu",Oe="EluGrad",Me="Erf",Le="Equal",ze="Exp",Be="Expm1",Pe="FFT",We="Fill",Ve="FlipLeftRight",Ue="Floor",Ge="FloorDiv",He="FusedBatchNorm",je="GatherV2",qe="GatherNd",Ke="Greater",Xe="GreaterEqual",Ye="Identity",Je="IFFT",Ze="Imag",Qe="IsFinite",tn="IsInf",en="IsNan",nn="Less",sn="LessEqual",rn="LinSpace",an="Log",on="Log1p",ln="LogicalAnd",un="LogicalNot",cn="LogicalOr",hn="LogSoftmax",pn="LRN",dn="LRNBackprop",fn="Max",mn="Maximum",gn="MaxPool",yn="MaxPoolBackprop",bn="MaxPool3D",xn="MaxPool3DBackprop",wn="MaxPoolWithArgmax",vn="Mean",kn="Min",Nn="Minimum",In="MirrorPad",Cn="Mod",Sn="Multiply",Tn="Negate",En="NotEqual",$n="NonMaxSuppressionV3",An="NonMaxSuppressionV4",Rn="NonMaxSuppressionV5",Dn="OnesLike",Fn="OneHot",_n="PadV2",On="Pool",Mn="Pow",Ln="Prelu",zn="Prod",Bn="Range",Pn="Real",Wn="Reciprocal",Vn="Relu",Un="Reshape",Gn="ResizeNearestNeighbor",Hn="ResizeNearestNeighborGrad",jn="ResizeBilinear",qn="ResizeBilinearGrad",Kn="Relu6",Xn="Reverse",Yn="Round",Jn="Rsqrt",Zn="ScatterNd",Qn="SelectV2",ts="Selu",es="Slice",ns="Sin",ss="Sinh",rs="Sign",as="Sigmoid",is="Softplus",os="Sqrt",ls="Sum",us="SpaceToBatchND",cs="SplitV",hs="Softmax",ps="SquaredDifference",ds="Square",fs="Sub",ms="SparseToDense",gs="StridedSlice",ys="Tan",bs="Tanh",xs="Tile",ws="TopK",vs="Transpose",ks="Unique",Ns="Unpack",Is="UnsortedSegmentSum",Cs="ZerosLike",Ss="Step",Ts="FromPixels",Es="RotateWithOffset",$s="_FusedMatMul",As="FusedConv2D",Rs="FusedDepthwiseConv2D",Ds=Vt("kernelRegistry",()=>new Map),Fs=Vt("gradRegistry",()=>new Map);function _s(t,e){const n=Vs(t,e);return Ds.get(n)}function Os(t){return Fs.get(t)}function Ms(t){const e=Ds.entries(),n=[];for(;;){const{done:s,value:r}=e.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===t&&n.push(i)}return n}function Ls(t){const{kernelName:e,backendName:n}=t,s=Vs(e,n);Ds.has(s)&&console.warn(`The kernel '${e}' for backend '${n}' is already registered`),Ds.set(s,t)}function zs(t){const{kernelName:e}=t;Fs.has(e)&&zt().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${e}'`),Fs.set(e,t)}function Bs(t,e){const n=Vs(t,e);if(!Ds.has(n))throw new Error(`The kernel '${t}' for backend '${e}' is not registered`);Ds.delete(n)}function Ps(t){if(!Fs.has(t))throw new Error(`The gradient '${t}' for backend is not registered`);Fs.delete(t)}function Ws(t,e){Ms(t).forEach(t=>{Ls(Object.assign({},t,{backendName:e}))})}function Vs(t,e){return`${e}_${t}`}class Us{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new Hs)}profileKernel(t,e,n){let s;const r=this.backendTimer.time(()=>{s=n()});for(let e=0;e<s.length;e++){const n=s[e];n.data().then(e=>{Gs(e,n.dtype,t)})}return{kernelName:t,outputs:s,inputs:e,timeMs:r.then(t=>t.kernelMs),extraInfo:r.then(t=>null!=t.getExtraProfileInfo?t.getExtraProfileInfo():"")}}logKernelProfile(t){const{kernelName:e,outputs:n,timeMs:s,inputs:r,extraInfo:a}=t;n.forEach(t=>{Promise.all([t.data(),s,a]).then(n=>{this.logger.logKernelProfile(e,t,n[0],n[1],r,n[2])})})}}function Gs(t,e,n){if("float32"!==e)return!1;for(let e=0;e<t.length;e++){const s=t[e];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class Hs{logKernelProfile(t,e,n,s,r,a){const i="number"==typeof s?ut(s+"ms",9):s.error,o=ut(t,25),l=e.rank,u=e.size,c=ut(e.shape.toString(),14);let h="";for(const t in r){const n=r[t];if(null!=n){const s=n.shape||e.shape,r=s.length;h+=`${t}: ${r}D ${r>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function js(t,e,n,s){const r=Et(e),a=function(t,e,n,s){const r=nt(e),a=s[s.length-1],i=new Array(a).fill(0),o=e.length,l="complex64"===n?Xs(t):t;if(o>1)for(let t=0;t<r/a;t++){const e=t*a;for(let t=0;t<a;t++)i[t]=Math.max(i[t],qs(l[e+t],0,n).length)}return i}(t,e,n,r),i=e.length,o=function t(e,n,s,r,a,i=!0){const o="complex64"===s?2:1,l=n[0],u=n.length;if(0===u){if("complex64"===s){return[qs(Xs(e)[0],0,s)]}return"bool"===s?[Ks(e[0])]:[e[0].toString()]}if(1===u){if(l>20){const t=3*o;let n=Array.from(e.slice(0,t)),r=Array.from(e.slice((l-3)*o,l*o));return"complex64"===s&&(n=Xs(n),r=Xs(r)),["["+n.map((t,e)=>qs(t,a[e],s)).join(", ")+", ..., "+r.map((t,e)=>qs(t,a[l-3+e],s)).join(", ")+"]"]}return["["+("complex64"===s?Xs(e):Array.from(e)).map((t,e)=>qs(t,a[e],s)).join(", ")+"]"]}const c=n.slice(1),h=r.slice(1),p=r[0]*o,d=[];if(l>20){for(let n=0;n<3;n++){const r=n*p,i=r+p;d.push(...t(e.slice(r,i),c,s,h,a,!1))}d.push("...");for(let n=l-3;n<l;n++){const r=n*p,i=r+p;d.push(...t(e.slice(r,i),c,s,h,a,n===l-1))}}else for(let n=0;n<l;n++){const r=n*p,i=r+p;d.push(...t(e.slice(r,i),c,s,h,a,n===l-1))}const f=2===u?",":"";d[0]="["+d[0]+f;for(let t=1;t<d.length-1;t++)d[t]=" "+d[t]+f;let m=",\n";for(let t=2;t<u;t++)m+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(i?"":m),d}(t,e,n,r,a),l=["Tensor"];return s&&(l.push("  dtype: "+n),l.push("  rank: "+i),l.push(`  shape: [${e}]`),l.push("  values:")),l.push(o.map(t=>"    "+t).join("\n")),l.join("\n")}function qs(t,e,n){let s;return s=Array.isArray(t)?parseFloat(t[0].toFixed(7))+" + "+parseFloat(t[1].toFixed(7))+"j":kt(t)?`'${t}'`:"bool"===n?Ks(t):parseFloat(t.toFixed(7)).toString(),ut(s,e)}function Ks(t){return 0===t?"false":"true"}function Xs(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}function Ys(t,e){return"string"===e?tr(t):Js([t],e)}function Js(t,e){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=et(t)),zt().getBool("DEBUG")&&gt(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error("Unknown data type "+e)}function Zs(){return zt().platform.now()}function Qs(t,e){return zt().platform.fetch(t,e)}function tr(t,e="utf-8"){return e=e||"utf-8",zt().platform.encode(t,e)}function er(t,e="utf-8"){return e=e||"utf-8",zt().platform.decode(t,e)}class nr{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=nt(t),null!=n){const t=n.length;Z(t===this.size,()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||mt(e,this.size),this.strides=Et(t)}set(t,...e){0===e.length&&(e=[0]),Z(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const n of t){if(n<0||n>=this.shape[e]){const e=`Requested out of range element at ${t}.   Buffer shape=`+this.shape;throw new Error(e)}e++}let n=t[t.length-1];for(let e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return this.values[n]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return sr().makeTensor(this.values,this.shape,this.dtype)}}let sr=null,rr=null,ar=null;class ir{constructor(t,e,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=nt(t),this.strides=Et(t),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const t=await this.data();return rr.buffer(this.shape,this.dtype,t)}bufferSync(){return rr.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return $t(this.shape,t)}arraySync(){return $t(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const t=sr().read(this.dataId);if("string"===this.dtype){const e=await t;try{return e.map(t=>er(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataSync(){this.throwIfDisposed();const t=sr().readSync(this.dataId);if("string"===this.dtype)try{return t.map(t=>er(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();const t=await sr().read(this.dataId);return"string"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(sr().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return rr.print(this,t)}clone(){return this.throwIfDisposed(),rr.clone(this)}toString(t=!1){return js(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),rr.cast(this,t)}variable(t=!0,e,n){return this.throwIfDisposed(),sr().makeVariable(this,t,e,n)}}Object.defineProperty(ir,Symbol.hasInstance,{value:t=>!!t&&null!=t.data&&null!=t.dataSync&&null!=t.throwIfDisposed});class or extends ir{constructor(t,e,n,s){super(t.shape,t.dtype,t.dataId,s),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!rt(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);sr().disposeTensor(this),this.dataId=t.dataId,sr().incRef(this,null)}dispose(){sr().disposeVariable(this),this.isDisposedInternal=!0}}var lr,ur,cr,hr,pr;Object.defineProperty(or,Symbol.hasInstance,{value:t=>t instanceof ir&&null!=t.assign&&t.assign instanceof Function}),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(lr||(lr={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(ur||(ur={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(cr||(cr={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(hr||(hr={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(pr||(pr={}));const dr={float32:hr,int32:ur,bool:cr,complex64:pr};function fr(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return dr[t][e]}function mr(t){return fr(t,"int32")}function gr(t,e){if(t.dtype===e.dtype)return[t,e];const n=fr(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function yr(t,e){Z(t.dtype===e.dtype,()=>`The dtypes of the first(${t.dtype}) and second(${e.dtype}) input must match`)}function br(t,e){return e.some(e=>e.id===t.id)}function xr(t){const e=[];return function t(e,n,s){if(null==e)return;if(e instanceof ir)return void n.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const a=e;for(const e in a){const r=a[e];s.has(r)||(s.add(r),t(r,n,s))}}(t,e,new Set),e}class wr{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class vr{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new wr}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new Us(this.backendInstance),!0}setupRegisteredKernels(){Ms(this.backendName).forEach(t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)})}disposeRegisteredKernels(t){Ms(t).forEach(e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])})}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(!n||n instanceof G||"function"!=typeof n.then)return this.registry[t]=n,{success:!0,asyncInit:!1};{const e=++this.pendingBackendInitId,s=n.then(n=>!(e<this.pendingBackendInitId)&&(this.registry[t]=n,this.pendingBackendInit=null,!0)).catch(n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${t} failed`),console.warn(n.stack||n.message)),!1));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(e){return console.warn(`Initialization of backend ${t} failed`),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority)}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),s=n.backend,r=this.readSync(e);s.disposeData(e),n.backend=t,t.move(e,r,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,s=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=t}return this.scopedRun(()=>this.startScope(s),()=>this.endScope(n),()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return vr.nextTensorId++}nextVariableId(){return vr.nextVariableId++}clone(t){const e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],t=>({x:()=>{const e={x:t},n={dtype:"float32"};return Nr.runKernelFunc(e=>e.cast(t,"float32"),e,null,ce,n)}}),[],{}),e}runKernel(t,e,n,s,r){return this.runKernelFunc(null,e,null,t,n,s,r)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const s=this.backend.numDataIds();let r=0;n.forEach(t=>{r+="complex64"===t.dtype?3:1});const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-e-r-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${t}'`)}runKernelFunc(t,e,n,s,r,a,i){let o,l=[];const u=this.isTapeOn();null==s&&(s=null!=this.state.activeScope?this.state.activeScope.name:"");const c=this.state.numBytes,h=this.state.numTensors;let p;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const d=_s(s,this.backendName);let f,m;if(null!=d)p=()=>{const t=this.backend.numDataIds();f=d.kernelFunc({inputs:e,attrs:r,backend:this.backend});const n=Array.isArray(f)?f:[f];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(s,t,n);const o=n.map(({dataId:t,shape:e,dtype:n})=>this.makeTensorFromDataId(t,e,n));if(u){let t=this.getTensorsForGradient(s,e,o);if(null==t){null==i&&(i=[]);const e=o.filter((t,e)=>i[e]);t=(a||[]).slice().concat(e)}l=this.saveTensorsForBackwardMode(t)}return o};else{const e=t=>{u&&(l=t.map(t=>this.keep(this.clone(t))))};p=()=>{const n=this.backend.numDataIds();f=this.tidy(()=>t(this.backend,e));const r=Array.isArray(f)?f:[f];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(s,n,r),r}}return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(m=this.profiler.profileKernel(s,e,()=>p()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(m),o=m.outputs):o=p()}),u&&this.addTapeNode(s,e,o,n,l,r),this.state.profiling&&this.state.activeProfile.kernels.push({name:s,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-h,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map(t=>null!=e[t]?e[t].shape:null),outputShapes:o.map(t=>t.shape),kernelTimeMs:m.timeMs,extraInfo:m.extraInfo}),Array.isArray(f)?o:o[0]}saveTensorsForBackwardMode(t){return t.map(t=>this.keep(this.clone(t)))}getTensorsForGradient(t,e,n){const s=Os(t);if(null!=s){const t=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(Z(Array.isArray(e),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(e).map(t=>e[t])):a=t.map(t=>e[t]);const i=n.filter((t,e)=>r[e]);return a.concat(i)}return null}makeTensor(t,e,n,s){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=t;"string"===n&&kt(t[0])&&(r=t.map(t=>tr(t)));const a=s.write(r,e,n),i=new ir(e,n,a,this.nextTensorId());if(this.incRef(i,s),"string"===n){const t=this.state.tensorInfo.get(a),e=vt(r);this.state.numBytes+=e-t.bytes,t.bytes=e}return i}makeTensorFromDataId(t,e,n,s){const r=new ir(e,n=n||"float32",t,this.nextTensorId());return this.incRef(r,s),r}makeVariable(t,e=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==t.dtype&&(t=t.cast(s));const r=new or(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}incRef(t,e){const n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=t.size*wt(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof or||this.track(t)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;const e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(t=>t.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const t of this.state.activeProfile.kernels)t.kernelTimeMs=await t.kernelTimeMs,t.extraInfo=await t.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:r},o=Os(t);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=t=>(t=t.map((t,e)=>{if(null==t){const t=n[e],s=Rt(t.size,t.dtype);return this.makeTensor(s,t.shape,t.dtype)}return t}),s(t.length>1?t:t[0],r,a))),this.state.activeTape.push(i)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=xr(t),n=new Set(e.map(t=>t.id));for(let t=0;t<this.state.activeScope.track.length;t++){const e=this.state.activeScope.track[t];e.kept||n.has(e.id)||e.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach(t=>{t.kept||t.scopeId!==s.id||this.track(t)})}gradients(t,e,n,s=!1){if(Z(e.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",t));Z(r instanceof ir,()=>"The result y returned by f() must be a tensor.");const a=function(t,e,n){const s={},r={};for(let t=0;t<e.length;t++)s[e[t].id]=!0;for(let n=0;n<t.length;n++){const a=t[n],i=a.inputs;for(const t in i){const n=i[t];let o=!1;for(let t=0;t<e.length;t++)if(s[n.id]){a.outputs.forEach(t=>s[t.id]=!0),o=!0,r[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let e=t.length-1;e>=0;e--){const n=t[e],s=n.inputs;for(let t=0;t<n.outputs.length;t++)if(a[n.outputs[t].id]){for(const t in s)a[s[t].id]=!0,i[n.id]=!0;break}}const o=[];for(let e=0;e<t.length;e++){const n=t[e];if(r[n.id]&&i[n.id]){const t={};for(const e in n.inputs){const r=n.inputs[e];s[r.id]&&(t[e]=r)}const e=Object.assign({},n);e.inputs=t,e.outputs=n.outputs,o.push(e)}}return o}(this.state.activeTape,e,r);if(!s&&0===a.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const t={};t[r.id]=null==n?function(t){const e=At(nt(t),"float32");return Nr.makeTensor(e,t,"float32")}(r.shape):n,function(t,e,n,s){for(let r=e.length-1;r>=0;r--){const a=e[r],i=[];if(a.outputs.forEach(e=>{const n=t[e.id];null!=n?i.push(n):i.push(null)}),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const e in a.inputs){if(!(e in o))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(o)}.`);const r=n(()=>o[e]());if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[e];if(!rt(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${e}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==t[i.id])t[i.id]=r;else{const e=t[i.id];t[i.id]=s(e,r),e.dispose()}}}}(t,a,t=>this.tidy(t),Ir);const s=e.map(e=>t[e.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(t=>{for(const e of t.saved)e.dispose()}),this.state.activeTape=null),{value:r,grads:s}})}customGrad(t){return Z(St(t),()=>"The f passed in customGrad(f) must be a function."),(...e)=>{let n;Z(e.every(t=>t instanceof ir),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const s={};return e.forEach((t,e)=>{s[e]=t}),this.runKernelFunc((s,r)=>(n=t(...e,r),Z(n.value instanceof ir,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),Z(St(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),s,(t,s)=>{const r=n.gradFunc(t,s),a=Array.isArray(r)?r:[r];Z(a.length===e.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),Z(a.every(t=>t instanceof ir),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const i={};return a.forEach((t,e)=>{i[e]=()=>t}),i})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}async time(t){const e=Zs(),n=await this.backend.time(t);return n.wallMs=Zs()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new wr;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function kr(){const t=Wt();if(null==t._tfengine){const e=new Lt(t);t._tfengine=new vr(e)}var e;return e=t._tfengine.ENV,Pt=e,sr=()=>t._tfengine,t._tfengine}vr.nextTensorId=0,vr.nextVariableId=0;const Nr=kr();function Ir(t,e){const n={a:t,b:e};return Nr.runKernelFunc((n,s)=>{const r=n.add(t,e);return s([t,e]),r},n,null,jt)}function Cr(){if("undefined"!=typeof navigator&&null!=navigator){const t=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Sr(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Tr=zt();function Er(t,e){let n=t;if(xt(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];const s=[];for(;Array.isArray(n)||xt(n)&&"string"!==e;)s.push(n.length),n=n[0];return Array.isArray(t)&&zt().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(e,n,s){if(s=s||[],!Array.isArray(e)&&!xt(e))return void Z(0===n.length,()=>`Element arr[${s.join("][")}] is a primitive, but should be an array/TypedArray of ${n[0]} elements`);Z(n.length>0,()=>`Element arr[${s.join("][")}] should be a primitive, but is an array of ${e.length} elements`),Z(e.length===n[0],()=>`Element arr[${s.join("][")}] should have ${n[0]} elements, but has ${e.length} elements`);const r=n.slice(1);for(let n=0;n<e.length;++n)t(e[n],r,s.concat(n))}(t,s,[]),s}function $r(t,e,n,s){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error(`Argument '${n}' passed to '${s}' must be ${t} tensor, but got ${e} tensor`)}function Ar(t,e,n,s="numeric"){if(t instanceof ir)return $r(s,t.dtype,e,n),t;let r=Ct(t);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),$r(s,r,e,n),null==t||!xt(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){const s=null==t?"null":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const a=Er(t,r);xt(t)||Array.isArray(t)||(t=[t]);const i="string"!==r?Js(t,r):et(t,[],!0);return Nr.makeTensor(i,a,r)}function Rr(t,e,n,s="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map((t,s)=>Ar(t,`${e}[${s}]`,n),s)}Tr.registerFlag("DEBUG",()=>!1,t=>{t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Tr.registerFlag("IS_BROWSER",()=>Sr()),Tr.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),Tr.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Tr.registerFlag("PROD",()=>!1),Tr.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Tr.getBool("DEBUG")),Tr.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Tr.registerFlag("IS_TEST",()=>!1);const Dr="__op";function Fr(t){const e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");let n=e[0];const s=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=Dr;const r=(...t)=>{Nr.startScope(n);try{const e=s(...t);return Mt(e)&&console.error("Cannot return a Promise inside of tidy."),Nr.endScope(e),e}catch(t){throw Nr.endScope(null),t}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}const _r=Fr({complex_:function(t,e){const n=Ar(t,"real","complex"),s=Ar(e,"imag","complex");Q(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const r={real:n,imag:s};return Nr.runKernelFunc(t=>t.complex(n,s),r,null,de)}});function Or(t,e,n,s){if(null==s&&(s=Ct(t)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!xt(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){Ft(e);const t=nt(e),s=nt(n);Z(t===s,()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${s}`);for(let t=0;t<n.length;++t){const s=n[t],r=t!==n.length-1||s!==nt(e.slice(t));Z(n[t]===e[t]||!r,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `)}}return xt(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==s?Js(t,s):et(t,[],!0),Nr.makeTensor(t,e,s)}function Mr(t,e,n){return Or(t,e,Er(t,n),n)}const Lr={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function zr(t,e){const n=[],s=[],r=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);for(let a=0;a<r.length;++a){const i=r[a],o=Array.isArray(t)?t[a].tensor:t[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const t=new Promise(async t=>{const e=await o.bytes(),n=e.reduce((t,e)=>t+e.length,0)+4*e.length,s=new Uint8Array(n);let r=0;for(let t=0;t<e.length;t++){const n=e[t],a=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(a,r),r+=4,s.set(n,r),r+=n.length}t(s)});s.push(t)}else s.push(o.data());null!=e&&(l.group=e),n.push(l)}return{data:Pr(await Promise.all(s)),specs:n}}function Br(t,e){const n={};let s,r=0;for(const a of e){const e=a.name,i=a.dtype,o=a.shape,l=nt(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=Lr[n.dtype],c=t.slice(r,r+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];u[t]=e*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=jr()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${e}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];u[t]=Math.round(e*n.scale+n.min)}}r+=l*o}else if("string"===i){const e=nt(a.shape);u=[];for(let n=0;n<e;n++){const e=new Uint32Array(t.slice(r,r+4))[0];r+=4;const n=new Uint8Array(t.slice(r,r+e));u.push(n),r+=e}}else{const s=Lr[i],a=t.slice(r,r+l*s);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${e}': ${i}`);{u=new Float32Array(a);const t=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let e=0;e<t.length;e++)t[e]=u[2*e],s[e]=u[2*e+1];const r=Mr(t,o,"float32"),i=Mr(s,o,"float32");n[e]=_r(r,i),r.dispose(),i.dispose()}}r+=l*s}"complex64"!==i&&(n[e]=Mr(u,o,i))}return n}function Pr(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));let e=0;const n=[];t.forEach(t=>{if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)});const s=new Uint8Array(e);let r=0;return n.forEach(t=>{s.set(new Uint8Array(t.buffer),r),r+=t.byteLength}),s.buffer}const Wr="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Vr(t){return Wr?Buffer.byteLength(t):new Blob([t]).size}function Ur(t){if(1===t.length)return t[0];let e=0;t.forEach(t=>{e+=t.byteLength});const n=new Uint8Array(e);let s=0;return t.forEach(t=>{n.set(new Uint8Array(t),s),s+=t.byteLength}),n.buffer}function Gr(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);const e=t.split("/");return e[e.length-1]}function Hr(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:Vr(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:Vr(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}function jr(){const t=function(){const t=t=>{let e=t<<13,n=0;for(;0==(8388608&e);)n-=8388608,e<<=1;return e&=-8388609,n+=947912704,e|n},e=new Uint32Array(2048);e[0]=0;for(let n=1;n<1024;n++)e[n]=t(n);for(let t=1024;t<2048;t++)e[t]=939524096+(t-1024<<13);return e}(),e=function(){const t=new Uint32Array(64);t[0]=0,t[31]=1199570944,t[32]=2147483648,t[63]=3347054592;for(let e=1;e<31;e++)t[e]=e<<23;for(let e=33;e<63;e++)t[e]=2147483648+(e-32<<23);return t}(),n=function(){const t=new Uint32Array(64);for(let e=0;e<64;e++)t[e]=1024;return t[0]=t[32]=0,t}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let r=0;r<s.length;r++){const i=s[r],o=t[n[i>>10]+(1023&i)]+e[i>>10];a[r]=o}return new Float32Array(r)}}class qr{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==qr.instance&&(qr.instance=new qr),qr.instance}static registerSaveRouter(t){qr.getInstance().saveRouters.push(t)}static registerLoadRouter(t){qr.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return qr.getHandlers(t,"save")}static getLoadHandlers(t,e){return qr.getHandlers(t,"load",e)}static getHandlers(t,e,n){const s=[];return("load"===e?qr.getInstance().loadRouters:qr.getInstance().saveRouters).forEach(e=>{const r=e(t,n);null!==r&&s.push(r)}),s}}const Kr=t=>qr.registerSaveRouter(t),Xr=t=>qr.registerLoadRouter(t),Yr=t=>qr.getSaveHandlers(t),Jr=(t,e)=>qr.getLoadHandlers(t,e);function Zr(){if(!zt().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const t="undefined"==typeof window?self:window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function Qr(t){const e=t.result;e.createObjectStore("models_store",{keyPath:"modelPath"}),e.createObjectStore("model_info_store",{keyPath:"modelPath"})}class ta{constructor(t){if(this.indexedDB=Zr(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise((t,n)=>{const s=this.indexedDB.open("tensorflowjs",1);s.onupgradeneeded=()=>Qr(s),s.onsuccess=()=>{const r=s.result;if(null==e){const e=r.transaction("models_store","readonly"),s=e.objectStore("models_store").get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));t(s.result.modelArtifacts)},s.onerror=t=>(r.close(),n(s.error)),e.oncomplete=()=>r.close()}else{const s=Hr(e),a=r.transaction("model_info_store","readwrite");let i=a.objectStore("model_info_store");const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;o.onsuccess=()=>{l=r.transaction("models_store","readwrite");const o=l.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:s});o.onsuccess=()=>t({modelArtifactsInfo:s}),o.onerror=t=>{i=a.objectStore("model_info_store");const e=i.delete(this.modelPath);e.onsuccess=()=>(r.close(),n(o.error)),e.onerror=t=>(r.close(),n(o.error))}},o.onerror=t=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}}},s.onerror=t=>n(s.error)})}}ta.URL_SCHEME="indexeddb://";const ea=t=>{return zt().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(ta.URL_SCHEME)?(e=t.slice(ta.URL_SCHEME.length),new ta(e)):null;var e};qr.registerSaveRouter(ea),qr.registerLoadRouter(ea);class na{constructor(){this.indexedDB=Zr()}async listModels(){return new Promise((t,e)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>Qr(n),n.onsuccess=()=>{const s=n.result,r=s.transaction("model_info_store","readonly"),a=r.objectStore("model_info_store").getAll();a.onsuccess=()=>{const e={};for(const t of a.result)e[t.modelPath]=t.modelArtifactsInfo;t(e)},a.onerror=t=>(s.close(),e(a.error)),r.oncomplete=()=>s.close()},n.onerror=t=>e(n.error)})}async removeModel(t){var e;return t=(e=t).startsWith(ta.URL_SCHEME)?e.slice(ta.URL_SCHEME.length):e,new Promise((e,n)=>{const s=this.indexedDB.open("tensorflowjs",1);s.onupgradeneeded=()=>Qr(s),s.onsuccess=()=>{const r=s.result,a=r.transaction("model_info_store","readwrite"),i=a.objectStore("model_info_store"),o=i.get(t);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const s=i.delete(t),a=()=>{l=r.transaction("models_store","readwrite");const s=l.objectStore("models_store").delete(t);s.onsuccess=()=>e(o.result.modelArtifactsInfo),s.onerror=t=>n(o.error)};s.onsuccess=a,s.onerror=t=>(a(),r.close(),n(o.error))}},o.onerror=t=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=t=>n(s.error)})}}const sa="tensorflowjs_models",ra="info",aa="model_topology",ia="weight_specs",oa="weight_data",la="model_metadata";function ua(t){return{info:[sa,t,ra].join("/"),topology:[sa,t,aa].join("/"),weightSpecs:[sa,t,ia].join("/"),weightData:[sa,t,oa].join("/"),modelMetadata:[sa,t,la].join("/")}}function ca(t){const e=t.split("/");if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join("/")}class ha{constructor(t){if(!zt().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=ua(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),s=Hr(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){if(Wr)return Buffer.from(t).toString("base64");const e=new Uint8Array(t);let n="";for(let t=0,s=e.length;t<s;t++)n+=String.fromCharCode(e[t]);return btoa(n)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),{modelArtifactsInfo:s}}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const t=JSON.parse(this.LS.getItem(this.keys.info));if(null==t)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const e={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const t=JSON.parse(r);e.format=t.format,e.generatedBy=t.generatedBy,e.convertedBy=t.convertedBy,e.userDefinedMetadata=t.userDefinedMetadata}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=function(t){if(Wr){const e=Buffer.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}const e=atob(t),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n.set([e.charCodeAt(t)],t);return n.buffer}(a),e}}ha.URL_SCHEME="localstorage://";const pa=t=>{return zt().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(ha.URL_SCHEME)?(e=t.slice(ha.URL_SCHEME.length),new ha(e)):null;var e};qr.registerSaveRouter(pa),qr.registerLoadRouter(pa);class da{constructor(){Z(zt().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),Z("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const t={},e=sa+"/",n="/"+ra;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);if(r.startsWith(e)&&r.endsWith(n)){t[ca(r)]=JSON.parse(this.LS.getItem(r))}}return t}async removeModel(t){var e;const n=ua(t=(e=t).startsWith(ha.URL_SCHEME)?e.slice(ha.URL_SCHEME.length):e);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${t}'`);const s=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),s}}class fa{constructor(){this.managers={}}static getInstance(){return null==fa.instance&&(fa.instance=new fa),fa.instance}static registerManager(t,e){Z(null!=t,()=>"scheme must not be undefined or null."),t.endsWith("://")&&(t=t.slice(0,t.indexOf("://"))),Z(t.length>0,()=>"scheme must not be an empty string.");const n=fa.getInstance();Z(null==n.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),n.managers[t]=e}static getManager(t){const e=this.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(this.getInstance().managers)}}function ma(t){if(-1===t.indexOf("://"))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+fa.getSchemes().join(","));return{scheme:t.split("://")[0],path:t.split("://")[1]}}async function ga(t,e,n=!1){Z(t!==e,()=>`Old path and new path are the same: '${t}'`);const s=qr.getLoadHandlers(t);Z(s.length>0,()=>`Copying failed because no load handler is found for source URL ${t}.`),Z(s.length<2,()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${t}.`);const r=s[0],a=qr.getSaveHandlers(e);Z(a.length>0,()=>`Copying failed because no save handler is found for destination URL ${e}.`),Z(a.length<2,()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${e}.`);const i=a[0],o=ma(t).scheme,l=ma(t).path,u=o===ma(t).scheme,c=await r.load();n&&u&&await fa.getManager(o).removeModel(l);const h=await i.save(c);return n&&!u&&await fa.getManager(o).removeModel(l),h.modelArtifactsInfo}async function ya(){const t=fa.getSchemes(),e={};for(const n of t){const t=await fa.getManager(n).listModels();for(const s in t){e[n+"://"+s]=t[s]}}return e}async function ba(t){const e=ma(t);return fa.getManager(e.scheme).removeModel(e.path)}async function xa(t,e){return ga(t,e,!1)}async function wa(t,e){return ga(t,e,!0)}class va{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got "+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}}if(zt().get("IS_BROWSER")){zt().setPlatform("browser",new va);try{fa.registerManager(ha.URL_SCHEME,new da)}catch(t){}try{fa.registerManager(ta.URL_SCHEME,new na)}catch(t){}}const ka=()=>n(352);let Na;class Ia{constructor(){this.util=n(758),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=zt().global.fetch?zt().global.fetch(t,e):(null==Na&&(Na=ka()),Na(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}}function Ca(t,e="float32",n){return e=e||"float32",Ft(t),new nr(t,e,n)}zt().get("IS_NODE")&&zt().setPlatform("node",new Ia);const Sa=Fr({cast_:function(t,e){const n=Ar(t,"x","cast");if(!yt(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},r={dtype:e};return Nr.runKernelFunc(t=>t.cast(n,e),s,null,ce,r)}});const Ta=Fr({clone_:function(t){const e=Ar(t,"x","clone",null),n={x:e};return Nr.runKernelFunc(()=>Nr.makeTensorFromDataId(e.dataId,e.shape,e.dtype),n,null,Ye)}});function Ea(t,e=!1){console.log(t.toString(e))}kr();rr={buffer:Ca,cast:Sa,clone:Ta,print:Ea};function $a(t){return new Promise(t=>setTimeout(t)).then(t)}class Aa{constructor(t){if(!zt().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(Aa.URL_SCHEME)&&(t=t.slice(Aa.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelTopologyFileName=t+".json",this.weightDataFileName=t+".weights.bin"}async save(t){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],s={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},r=window.URL.createObjectURL(new Blob([JSON.stringify(s)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=r,await $a(()=>a.dispatchEvent(new MouseEvent("click"))),null!=t.weightData){const t=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;t.download=this.weightDataFileName,t.href=e,await $a(()=>t.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Hr(t)}}}}Aa.URL_SCHEME="downloads://";class Ra{constructor(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}async load(){const t=this.files[0],e=this.files.slice(1);return new Promise((n,s)=>{const r=new FileReader;r.onload=r=>{const a=JSON.parse(r.target.result),i=a.modelTopology;if(null==i)return void s(new Error("modelTopology field is missing from file "+t.name));0===e.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void s(new Error("weightManifest field is missing from file "+t.name));let l;try{l=this.checkManifestAndWeightFiles(o,e)}catch(t){return void s(t)}const u=[],c=[],h=[];o.forEach(t=>{t.paths.forEach(t=>{c.push(t),h.push(null)}),u.push(...t.weights)}),o.forEach(t=>{t.paths.forEach(t=>{const e=new FileReader;e.onload=e=>{const s=e.target.result,r=c.indexOf(t);h[r]=s,-1===h.indexOf(null)&&n({modelTopology:i,weightSpecs:u,weightData:Ur(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy,userDefinedMetadata:a.userDefinedMetadata})},e.onerror=e=>s(`Failed to weights data from file of path '${t}'.`),e.readAsArrayBuffer(l[t])})})},r.onerror=e=>s(`Failed to read model topology and weights manifest JSON from file '${t.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),r.readAsText(t)})}checkManifestAndWeightFiles(t,e){const n=[],s=e.map(t=>Gr(t.name)),r={};for(const a of t)a.paths.forEach(t=>{const a=Gr(t);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===s.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);r[t]=e[s.indexOf(a)]});if(n.length!==e.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${e.length}).`);return r}}function Da(t){return new Ra(t)}function Fa(t,e,n,s){!function(t){Z(null!=t&&Array.isArray(t)&&t.length>0,()=>"promises must be a none empty array")}(t),function(t,e){Z(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but got startFraction "+t),Z(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but got endFraction "+e),Z(e>=t,()=>`startFraction must be no more than endFraction, but got startFraction ${t} and endFraction `+e)}(n=null==n?0:n,s=null==s?1:s);let r=0;return Promise.all(t.map(a=>(a.then(a=>{const i=n+ ++r/t.length*(s-n);return e(i),a}),a)))}async function _a(t,e){null==e&&(e={});const n=null==e.fetchFunc?zt().platform.fetch:e.fetchFunc,s=t.map(t=>n(t,e.requestInit,{isBinary:!0})),r=(null==e.onProgress?await Promise.all(s):await Fa(s,e.onProgress,0,.5)).map(t=>t.arrayBuffer());return null==e.onProgress?await Promise.all(r):await Fa(r,e.onProgress,.5,1)}async function Oa(t,e="",n,s){return Ma(t=>_a(t,{requestInit:s}))(t,e,n)}function Ma(t){return async(e,n="",s)=>{const r=e.map(()=>!1),a={},i=null!=s?s.map(()=>!1):[],o=[];if(e.forEach((t,e)=>{let n=0;t.weights.forEach(t=>{const l="quantization"in t?t.quantization.dtype:t.dtype,u=Lr[l]*nt(t.shape),c=()=>{r[e]=!0,null==a[e]&&(a[e]=[]),a[e].push({manifestEntry:t,groupOffset:n,sizeBytes:u})};null!=s?s.forEach((e,n)=>{e===t.name&&(c(),i[n]=!0)}):c(),o.push(t.name),n+=u})}),!i.every(t=>t)){const t=s.filter((t,e)=>!i[e]);throw new Error("Could not find weights in manifest with names: "+t.join(", ")+". \nManifest JSON has weights with names: "+o.join(", ")+".")}const l=r.reduce((t,e,n)=>(e&&t.push(n),t),[]),u=[];l.forEach(t=>{e[t].paths.forEach(t=>{const e=n+(n.endsWith("/")?"":"/")+t;u.push(e)})});const c=await t(u),h={};let p=0;return l.forEach(t=>{const n=e[t].paths.length;let s=0;for(let t=0;t<n;t++)s+=c[p+t].byteLength;const r=new ArrayBuffer(s),i=new Uint8Array(r);let o=0;for(let t=0;t<n;t++){const e=new Uint8Array(c[p+t]);i.set(e,o),o+=e.byteLength}a[t].forEach(t=>{const e=Br(r.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(const t in e)h[t]=e[t]}),p+=n}),h}}qr.registerSaveRouter(t=>zt().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Aa.URL_SCHEME)?function(t="model"){return new Aa(t)}(t.slice(Aa.URL_SCHEME.length)):null);class La{constructor(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,this.weightUrlConverter=e.weightUrlConverter,null!=e.fetchFunc?(Z("function"==typeof e.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=e.fetchFunc):this.fetch=zt().platform.fetch,Z(null!=t&&t.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(t)&&Z(2===t.length,()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],s={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n};e.body.append("model.json",new Blob([JSON.stringify(s)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,e);if(r.ok)return{modelArtifactsInfo:Hr(t),responses:[r]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+r.status+".")}async load(){const t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code `+t.status+". Please verify this URL points to the model JSON of the model to load.");let e;try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=e.modelTopology,s=e.weightsManifest,r=e.generatedBy,a=e.convertedBy,i=e.format,o=e.userDefinedMetadata;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let l,u;if(null!=s){const t=await this.loadWeights(s);[l,u]=t}const c={modelTopology:n,weightSpecs:l,weightData:u,userDefinedMetadata:o,generatedBy:r,convertedBy:a,format:i},h=e.modelInitializer;return h&&(c.modelInitializer=h),c}async loadWeights(t){const e=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(t){const e=t.lastIndexOf("/"),n=t.lastIndexOf("?"),s=t.substring(0,e),r=n>e?t.substring(n):"";return[s+"/",r]}(e),r=this.weightPathPrefix||n,a=[];for(const e of t)a.push(...e.weights);const i=[],o=[];for(const e of t)for(const t of e.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(t)):i.push(r+t+s);this.weightUrlConverter&&i.push(...await Promise.all(o));return[a,Ur(await _a(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function za(t){return null!=t.match(La.URL_SCHEME_REGEX)}La.URL_SCHEME_REGEX=/^https?:\/\//;const Ba=(t,e)=>{if("undefined"==typeof fetch&&(null==e||null==e.fetchFunc))return null;{let n=!0;if(n=Array.isArray(t)?t.every(t=>za(t)):za(t),n)return Pa(t,e)}return null};function Pa(t,e){return new La(t,e)}function Wa(t,e){return Pa(t,e)}qr.registerSaveRouter(Ba),qr.registerLoadRouter(Ba);class Va{constructor(t){this.modelArtifacts=t}async load(){return this.modelArtifacts}}class Ua{constructor(t){this.saveHandler=t}async save(t){return this.saveHandler(t)}}function Ga(t,e,n,s){if(1===arguments.length){return null!=t.modelTopology||null!=t.weightSpecs?new Va(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Va({modelTopology:t}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Va({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:s})}function Ha(t){return new Ua(t)}const ja=Fr({reshape_:function(t,e){const n=Ar(t,"x","reshape",null),s={x:n},r={shape:e};return Nr.runKernelFunc((t,s)=>(e=ht(e,n.size),Z(n.size===nt(e),()=>"new shape and old shape must have the same number of elements."),s([n]),t.reshape(n,e)),s,null,Un,r)}});const qa=Fr({matMul_:function(t,e,n=!1,s=!1){let r=Ar(t,"a","matMul"),a=Ar(e,"b","matMul");[r,a]=gr(r,a);const i={a:r,b:a},o={transposeA:n,transposeB:s};return Nr.runKernelFunc((t,e)=>{e([r,a]);const i=n?r.shape[r.rank-2]:r.shape[r.rank-1],o=s?a.shape[a.rank-1]:a.shape[a.rank-2],l=n?r.shape[r.rank-1]:r.shape[r.rank-2],u=s?a.shape[a.rank-2]:a.shape[a.rank-1],c=r.shape.slice(0,-2),h=a.shape.slice(0,-2),p=nt(c),d=nt(h),f=p===d||1===p||1===d;Z(r.rank>=2&&a.rank>=2&&f,()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${c}) and (${h}).`),Z(i===o,()=>`Error in matMul: inner shapes (${i}) and (${o}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${n} and transposeB=${s} must match.`);const m=(p>d?c:h).concat([l,u]),g=ja(r,n?[p,i,l]:[p,l,i]),y=ja(a,s?[d,u,o]:[d,o,u]),b=t.batchMatMul(g,y,n,s);return ja(b,m)},i,null,oe,o)}});const Ka=Fr({oneHot_:function(t,e,n=1,s=0){if(e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);const r=Ar(t,"indices","oneHot","int32"),a=[...r.shape,e],i={indices:r},o={depth:e,onValue:n,offValue:s};return Nr.runKernelFunc((t,i)=>(i([r]),ja(t.oneHot(ja(r,[r.size]),e,n,s),a)),i,null,Fn,o)}});const Xa=Fr({transpose_:function(t,e){const n=Ar(t,"x","transpose");if(null==e&&(e=n.shape.map((t,e)=>e).reverse()),Z(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`),e.forEach(t=>{Z(t>=0&&t<n.rank,()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e)}),n.rank<=1)return n.clone();const s={x:n},r={perm:e};return Nr.runKernelFunc(t=>t.transpose(n,e),s,null,vs,r)}});const Ya=Fr({confusionMatrix_:function(t,e,n){const s=Ar(t,"labels","confusionMatrix"),r=Ar(e,"predictions","confusionMatrix");Z(null==n||n>0&&Number.isInteger(n),()=>"If provided, numClasses must be a positive integer, but got "+n),Z(1===s.rank,()=>"Expected the rank of labels to be 1, but got "+s.rank),Z(1===r.rank,()=>"Expected the rank of predictions to be 1, but got "+r.rank),Z(s.shape[0]===r.shape[0],()=>`Mismatch in the number of examples: ${s.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`),Z(n>0&&Number.isInteger(n),()=>"numClasses is required to be a positive integer, but got "+n);const a=Ka(Sa(s,"int32"),n),i=Ka(Sa(r,"int32"),n),o=Xa(a),l=qa(o,i);return Sa(l,"int32")}});function Ja(t,e,n){if(tt(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");const s=Er(t,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Or(t,e,s,n)}let Za;async function Qa(t,e){let n=Ar(t,"img","toPixels");if(!(t instanceof ir)){const t=n;n=Sa(t,"int32"),t.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[s,r]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(r*s*4);for(let t=0;t<s*r;++t){const e=[0,0,0,255];for(let s=0;s<a;s++){const r=i[t*a+s];if("float32"===n.dtype){if(r<0||r>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${r}.`)}else if("int32"===n.dtype&&(r<0||r>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${r}.`);1===a?(e[0]=r*o,e[1]=r*o,e[2]=r*o):e[s]=r*o}const s=4*t;l[s+0]=Math.round(e[0]),l[s+1]=Math.round(e[1]),l[s+2]=Math.round(e[2]),l[s+3]=Math.round(e[3])}if(null!=e){e.width=r,e.height=s;const t=e.getContext("2d"),n=new ImageData(l,r,s);t.putImageData(n,0,0)}return n!==t&&n.dispose(),l}const ti=Fr({fromPixels_:function(t,e=3){if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,r=!1,a=!1,i=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)a=!0;else{if(null==t.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);i=!0}if(r){const e=2;if(r&&t.readyState<e)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=_s(Ts,Nr.backendName)){const n={pixels:t},s={numChannels:e};return Nr.runKernel(Ts,n,s)}const[o,l]=r?[t.videoWidth,t.videoHeight]:[t.width,t.height];let u,c;if(i?u=t.getContext("2d").getImageData(0,0,o,l).data:s||n?u=t.data:(a||r)&&(null==Za&&(Za=document.createElement("canvas").getContext("2d")),Za.canvas.width=o,Za.canvas.height=l,Za.drawImage(t,0,0,o,l),u=Za.getImageData(0,0,o,l).data),4===e)c=new Int32Array(u);else{const t=o*l;c=new Int32Array(t*e);for(let n=0;n<t;n++)for(let t=0;t<e;++t)c[n*e+t]=u[4*n+t]}return Ja(c,[l,o,e],"int32")}});function ei(t,e){if(t.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==e.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[e.rank-1]>t.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[e.rank-1]} vs. ${t.rank}`);if(0===t.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);const n=e.shape,s=n[n.length-1];let r=1;for(let t=0;t<n.length-1;++t)r*=n[t];const a=t.shape,i=n.slice();i.pop();let o=1;for(let e=s;e<t.rank;++e)o*=a[e],i.push(a[e]);const l=[...Et(t.shape).map(t=>t/o),1].slice(0,s);return[i,r,o,l]}function ni(t,e,n){const s=e.rank>1?e.shape[e.rank-1]:1,r=e.rank>1?e.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${e.shape}, shape: ${t}`+`, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(t.length<s+(n.rank-r))throw new Error(a+" Output shape length < "+(s+(n.rank-r)));if(n.rank!==r+t.length-s)throw new Error(a+" update.rank != "+(r+t.length-s));for(let t=0;t<r;++t)if(n.shape[t]!==e.shape[t])throw new Error(a+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-r;++e)if(n.shape[e+r]!==t[e+s])throw new Error(a+` updates.shape[${e+r}] (${n.shape[e+r]}) != shape[${e+r}] (${t[e+r]})`)}function si(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}ni(n,e,t)}function ri(t,e,n){const s=e.shape.length,r=s>1?e.shape[s-1]:1,a=n.length;let i=1;for(let t=r;t<a;++t)i*=n[t];const o=r<1?1:r;return{sliceRank:r,numUpdates:nt(e.shape)/o,sliceSize:i,strides:[...Et(n.slice(0,r)),1],outputSize:nt(n)}}function ai(t,e,n){const s=t.shape.length;Z(s===e.length,()=>`Error in slice${s}D: Length of begin ${e} must match the rank of the array (${s}).`),Z(s===n.length,()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`);for(let r=0;r<s;++r)Z(e[r]+n[r]<=t.shape[r],()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${e[r]+n[r]}) would overflow input.shape[${r}] (${t.shape[r]})`)}function ii(t){const e=[];let n=0;for(;t>0;)1&t&&e.push(n),t/=2,n++;return e}function oi(t,e,n){const s=[];for(let r=0;r<t.length;r++)s[r]=Math.ceil((e[r]-t[r])/n[r]);return s}function li(t,e,n,s){const r=[...t];for(let t=r.length;t<s.length;t++)r.push(1);for(let t=0;t<n;t++)0===t?r[e]=1:(r.splice(e,0,1),r.pop());return r}function ui(t,e,n){return n<=t?n:n-(e-1)}function ci(t,e){const n=[];for(let s=0;s<t;s++)n.push(e+s);return n}function hi(t,e,n,s,r,a,i,o,l){const u=t.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(e.length&&n>0){const l=e[0],u=n+1;c=pi(i,l,u,s,t),h=di(o,l,u,r,t),p=li(a,l,u,t)}else for(let e=0;e<u;e++)c[e]=mi(i,s,a,t,e,l),h[e]=gi(o,r,a,t,e,l),p[e]=fi(a,e,l);return{begin:c,end:h,strides:p}}function pi(t,e,n,s,r){const a=[...r],i=ci(n,e);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=0;else{const i=ui(e,n,r);let o=s[i];t&1<<i&&(o=0),a[r]=o}return a}function di(t,e,n,s,r){const a=[...r],i=ci(n,e);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=Number.MAX_SAFE_INTEGER;else{const i=ui(e,n,r);let o=s[i];t&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[r]=o}for(let t=0;t<a.length;t++){const e=r[t];a[t]<0&&(a[t]+=e),a[t]=q(0,a[t],r[t])}return a}function fi(t,e,n){let s=t[e];return(n&1<<e||null==s)&&(s=1),s}function mi(t,e,n,s,r,a){let i=e[r];const o=n[r]||1;(t&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=q(0,i,l-1),i}function gi(t,e,n,s,r,a){let i=e[r];const o=n[r]||1;(t&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=o>0?q(0,i,l):q(-1,i,l-1),i}function yi(t,e,n){let s=n.length;for(let t=0;t<n.length;t++)if(n[t]>1){s=t;break}for(let r=s+1;r<n.length;r++)if(e[r]>0||n[r]!==t[r])return!1;return!0}function bi(t,e){let n=t.length>0?t[t.length-1]:1;for(let s=0;s<t.length-1;s++)n+=t[s]*e[s];return n}function xi(t,e,n){let s;const r=t.shape.length;let a;return s="number"==typeof e?[e,...new Array(r-1).fill(0)]:e.length<r?e.concat(new Array(r-e.length).fill(0)):e.slice(),s.forEach(t=>{Z(-1!==t,()=>"slice() does not support negative begin indexing.")}),a=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map((e,n)=>e>=0?e:(Z(-1===e,()=>`Negative size values should be exactly -1 but got ${e} for the slice() size at index ${n}.`),t.shape[n]-s[n])),[s,a]}class wi{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class vi{constructor(){this.classNameMap={}}static getMap(){return null==vi.instance&&(vi.instance=new vi),vi.instance}static register(t){vi.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function ki(t){Z(null!=t.className,()=>"Class being registered does not have the static className property defined."),Z("string"==typeof t.className,()=>"className is required to be a string, but got type "+typeof t.className),Z(t.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),vi.register(t)}const Ni=.1;function Ii(t,e,n){return null==n&&(n=Ci()),Si(t,e,(t,e)=>Ai(t,e,n))}function Ci(){return 32===Nr.backend.floatPrecision()?.001:Ni}function Si(t,e,n){let s=!0;if((xt(t)||xt(e))&&(s=!1),xt(t)&&xt(e)&&(s=!0),s){const n=t.constructor.name,s=e.constructor.name;if(n!==s)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: `+s)}if(Array.isArray(t)&&Array.isArray(e)){const n=Er(t),s=Er(e);if(!rt(n,s))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${s}]`)}const r=xt(t)?t:et(t),a=xt(e)?e:et(e);if(r.length!==a.length)throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${a.length}.\nActual:   ${r}.\nExpected: ${a}.`);for(let t=0;t<a.length;++t){const e=r[t],s=a[t];if(!n(e,s))throw new Error(`Arrays differ: actual[${t}] = ${e}, expected[${t}] = ${s}.\nActual:   ${r}.\nExpected: ${a}.`)}}function Ti(t,e){t().then(()=>e.fail(),()=>e())}function Ei(t,e){const n="string"==typeof e||"number"==typeof e||"boolean"==typeof e?[e]:e;return kt(t)||kt(t[0])||kt(e)||kt(e[0])?Si(t,n,(t,e)=>t==e):Si(t,e,(t,e)=>Ai(t,e,0))}function $i(t,e,n){if(null==n&&(n=Ci()),!Ai(t,e,n))throw new Error(`Numbers differ: actual === ${t}, expected === ${e}`)}function Ai(t,e,n){return!isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}function Ri(t,e,n){for(let s=0;s<t.length;s++)if(t[s]<e||t[s]>n)throw new Error(`Value out of range:${t[s]} low: ${e}, high: ${n}`)}function Di(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e))}const Fi="2.7.0";function _i(){zt().set("PROD",!0)}function Oi(){zt().set("DEBUG",!0)}function Mi(){zt().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function Li(t){zt().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function zi(){Nr.disposeVariables()}function Bi(){return Nr}function Pi(){return Nr.memory()}function Wi(t){return Nr.profile(t)}function Vi(t,e){return Nr.tidy(t,e)}function Ui(t){xr(t).forEach(t=>t.dispose())}function Gi(t){return Nr.keep(t)}function Hi(t){return Nr.time(t)}function ji(t){return Nr.setBackend(t)}function qi(){return Nr.ready()}function Ki(){return Nr.backendName}function Xi(t){Nr.removeBackend(t)}function Yi(t){return Nr.findBackend(t)}function Ji(t){return Nr.findBackendFactory(t)}function Zi(t,e,n=1){return Nr.registerBackend(t,e,n)}function Qi(){return Nr.backend}function to(t,e){zt().setPlatform(t,e)}ar=Li;const eo=Fr({add_:function(t,e){let n=Ar(t,"a","add"),s=Ar(e,"b","add");[n,s]=gr(n,s);const r={a:n,b:s};return Nr.runKernelFunc((t,e)=>{const r=t.add(n,s);return e([n,s]),r},r,null,jt)}});const no=Fr({floorDiv_:function(t,e){let n=Ar(t,"a","floorDiv"),s=Ar(e,"b","floorDiv");[n,s]=gr(n,s);const r={a:n,b:s};return Nr.runKernelFunc((t,e)=>{const r=t.floorDiv(n,s);return e([n,s]),r},r,null,Ge)}});const so=Fr({div_:function(t,e){let n=Ar(t,"a","div"),s=Ar(e,"b","div");if([n,s]=gr(n,s),"int32"===n.dtype&&"int32"===s.dtype)return no(n,s);const r={a:n,b:s};return Nr.runKernelFunc((t,e)=>{const r=t.realDivide(n,s);return e([n,s]),r},r,null,Fe,{})}});const ro=Fr({mul_:function(t,e){let n=Ar(t,"a","mul"),s=Ar(e,"b","mul");[n,s]=gr(n,s);const r={a:n,b:s};return Nr.runKernelFunc((t,e)=>{const r=t.multiply(n,s);return e([n,s]),r},r,null,Sn)}});const ao=Fr({sqrt_:function(t){const e=Ar(t,"x","sqrt"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.sqrt(e);return n([e]),s},n,null,os)}});const io=Fr({square_:function(t){const e=Ar(t,"x","square"),n=[e];return Nr.runKernelFunc((t,n)=>(n([e]),t.square(e)),{x:e},null,"Square",{},n,[])}});const oo=Fr({zerosLike_:function(t){const e=Ar(t,"x","zerosLike"),n={x:e};return Nr.runKernelFunc(t=>t.zerosLike(e),n,null,Cs)}});function lo(t){return Z(St(t),()=>"The f passed in grad(f) must be a function"),(e,n)=>{const s=Ar(e,"x","tf.grad",null),r=null!=n?Ar(n,"dy","tf.grad"):null;return Nr.tidy(()=>{const{value:e,grads:n}=Nr.gradients(()=>t(s),[s],r);return null!=r&&Q(e.shape,r.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),mo(n),n[0]})}}function uo(t){return Z(St(t),()=>"The f passed in grads(f) must be a function"),(e,n)=>{Z(Array.isArray(e),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");const s=Rr(e,"args","tf.grads",null),r=null!=n?Ar(n,"dy","tf.grads"):null;return Nr.tidy(()=>{const{value:e,grads:n}=Nr.gradients(()=>t(...s),s,r);return null!=r&&Q(e.shape,r.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),mo(n),n})}}function co(t){return Z(St(t),()=>"The f passed in valueAndGrad(f) must be a function"),(e,n)=>{Z(e instanceof ir,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),Z(null==n||n instanceof ir,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");const{grads:s,value:r}=Nr.gradients(()=>t(e),[e],n);return mo(s),{grad:s[0],value:r}}}function ho(t){return Z(St(t),()=>"The f passed in valueAndGrads(f) must be a function"),(e,n)=>{Z(Array.isArray(e)&&e.every(t=>t instanceof ir),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),Z(null==n||n instanceof ir,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");const s=Nr.gradients(()=>t(...e),e,n);return null!=n&&Q(s.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),mo(s.grads),s}}function po(t,e){Z(St(t),()=>"The f passed in variableGrads(f) must be a function"),Z(null==e||Array.isArray(e)&&e.every(t=>t instanceof or),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=e;if(!n){e=[];for(const t in Nr.registeredVariables)e.push(Nr.registeredVariables[t])}const s=n?e.filter(t=>!t.trainable):null,r=e.length;Z((e=e.filter(t=>t.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);const{value:a,grads:i}=Nr.gradients(t,e,null,!0);Z(i.some(t=>null!=t),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),Z(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const o={};return e.forEach((t,e)=>{null!=i[e]&&(o[t.name]=i[e])}),null!=s&&s.forEach(t=>o[t.name]=null),{value:a,grads:o}}function fo(t){return Nr.customGrad(t)}function mo(t){if(t.filter(t=>null==t).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}function go(t,e){if((xt(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&xt(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Or(t,[],[],e)}class yo extends wi{minimize(t,e=!1,n){const{value:s,grads:r}=this.computeGradients(t,n);if(null!=n){const t=n.map(t=>({name:t.name,tensor:r[t.name]}));this.applyGradients(t)}else this.applyGradients(r);return Ui(r),e?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return po(t,e)}dispose(){null!=this.iterations_&&Ui(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:go(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}}Object.defineProperty(yo,Symbol.hasInstance,{value:t=>null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients});class bo extends yo{constructor(t,e,n=null){super(),this.learningRate=t,this.rho=e,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Nr.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const s=Nr.registeredVariables[e];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:e+"/accum_grad",variable:Vi(()=>oo(s).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:e+"/accum_var",variable:Vi(()=>oo(s).variable(!1))});const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;Vi(()=>{const t=eo(ro(a,this.rho),ro(io(r),1-this.rho)),e=ro(so(ao(eo(i,this.epsilon)),ao(eo(a,this.epsilon))),r),n=eo(ro(i,this.rho),ro(io(e),1-this.rho));a.assign(t),i.assign(n);const o=eo(ro(e,-this.learningRate),s);s.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Ui(this.accumulatedGrads.map(t=>t.variable)),Ui(this.accumulatedUpdates.map(t=>t.variable)))}async getWeights(){const t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){const e=(t=await this.extractIterations(t)).length/2;this.accumulatedGrads=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedUpdates=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}function xo(t,e,n){const s={shape:t,value:e,dtype:n};return Nr.runKernelFunc(s=>s.fill(t,e,n),{},null,We,s)}bo.className="Adadelta",ki(bo);class wo extends yo{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const s=Nr.registeredVariables[e];if(null==this.accumulatedGrads[n]){const t=!1;this.accumulatedGrads[n]={originalName:e+"/accumulator",variable:Vi(()=>xo(s.shape,this.initialAccumulatorValue).variable(t))}}const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const a=this.accumulatedGrads[n].variable;Vi(()=>{const t=eo(a,io(r));a.assign(t);const e=eo(ro(so(r,ao(eo(t,Nr.backend.epsilon()))),-this.learningRate),s);s.assign(e)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Ui(this.accumulatedGrads.map(t=>t.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);this.accumulatedGrads=t.map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}wo.className="Adagrad",ki(wo);const vo=Fr({pow_:function(t,e){let n=Ar(t,"base","pow"),s=Ar(e,"exp","pow");[n,s]=gr(n,s);const r={a:n,b:s};return Nr.runKernelFunc((t,e)=>{const r=t.pow(n,s);return e([n,s,r]),r},r,null,Mn)}});const ko=Fr({sub_:function(t,e){let n=Ar(t,"a","sub"),s=Ar(e,"b","sub");[n,s]=gr(n,s);const r={a:n,b:s};return Nr.runKernelFunc((t,e)=>{const r=t.subtract(n,s);return e([n,s]),r},r,null,fs)}});class No extends yo{constructor(t,e,n,s=null){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Vi(()=>{this.accBeta1=go(e).variable(),this.accBeta2=go(n).variable()}),null==s&&(this.epsilon=Nr.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);Vi(()=>{const n=ko(1,this.accBeta1),s=ko(1,this.accBeta2);e.forEach((e,r)=>{const a=Nr.registeredVariables[e];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:e+"/m",variable:Vi(()=>oo(a).variable(!1))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:e+"/v",variable:Vi(()=>oo(a).variable(!1))});const i=Array.isArray(t)?t[r].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=eo(ro(o,this.beta1),ro(i,1-this.beta1)),c=eo(ro(l,this.beta2),ro(io(i),1-this.beta2)),h=so(u,n),p=so(c,s);o.assign(u),l.assign(c);const d=eo(ro(so(h,eo(ao(p),this.epsilon)),-this.learningRate),a);a.assign(d)}),this.accBeta1.assign(ro(this.accBeta1,this.beta1)),this.accBeta2.assign(ro(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Ui(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedSecondMoment&&Ui(this.accumulatedSecondMoment.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t),Vi(()=>{this.accBeta1.assign(vo(this.beta1,this.iterations_+1)),this.accBeta2.assign(vo(this.beta2,this.iterations_+1))});const e=t.length/2;this.accumulatedFirstMoment=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedSecondMoment=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}No.className="Adam",ki(No);const Io=Fr({abs_:function(t){const e=Ar(t,"x","abs"),n={x:e};return Nr.runKernelFunc((t,n)=>(n([e]),"complex64"===e.dtype?t.complexAbs(e):t.abs(e)),n,null,Ut)}});function Co(t,e){const n=t.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=t[a]||1;(e[e.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function So(t,e){const n=[];for(let s=0;s<e.length;s++){const r=t[t.length-s-1],a=e.length-s-1,i=e[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function To(t,e){const n=[],s=Math.max(t.length,e.length);for(let r=0;r<s;r++){let s=t[t.length-r-1];null==s&&(s=1);let a=e[e.length-r-1];if(null==a&&(a=1),1===s)n.unshift(a);else if(1===a)n.unshift(s);else{if(s!==a){throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`)}n.unshift(s)}}return n}const Eo=Fr({maximum_:function(t,e){let n=Ar(t,"a","maximum"),s=Ar(e,"b","maximum");[n,s]=gr(n,s),"bool"===n.dtype&&(n=Sa(n,"int32"),s=Sa(s,"int32")),To(n.shape,s.shape);const r={a:n,b:s};return Nr.runKernelFunc((t,e)=>{const r=t.maximum(n,s);return e([n,s]),r},r,null,mn)}});class $o extends yo{constructor(t,e,n,s=null,r=0){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Vi(()=>{this.iteration=go(0).variable(),this.accBeta1=go(e).variable()}),null==s&&(this.epsilon=Nr.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);Vi(()=>{const n=ko(1,this.accBeta1),s=so(-this.learningRate,eo(ro(this.iteration,this.decay),1));e.forEach((e,r)=>{const a=Nr.registeredVariables[e];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:e+"/m",variable:oo(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:e+"/v",variable:oo(a).variable(!1)});const i=Array.isArray(t)?t[r].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=eo(ro(o,this.beta1),ro(i,1-this.beta1)),c=ro(l,this.beta2),h=Io(i),p=Eo(c,h);o.assign(u),l.assign(p);const d=eo(ro(so(s,n),so(u,eo(p,this.epsilon))),a);a.assign(d)}),this.iteration.assign(eo(this.iteration,1)),this.accBeta1.assign(ro(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Ui(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedWeightedInfNorm&&Ui(this.accumulatedWeightedInfNorm.map(t=>t.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}$o.className="Adamax",ki($o);class Ao extends yo{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const r=Nr.registeredVariables[e];Vi(()=>{const t=eo(ro(this.c,s),r);r.assign(t)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=Gi(go(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(0!==(t=await this.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}Ao.className="SGD",ki(Ao);class Ro extends Ao{constructor(t,e,n=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=n,this.accumulations=[],this.m=go(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const s=Nr.registeredVariables[e];if(null==this.accumulations[n]){const t=!1;this.accumulations[n]={originalName:e+"/momentum",variable:Vi(()=>oo(s).variable(t))}}const r=this.accumulations[n].variable,a=Array.isArray(t)?t[n].tensor:t[e];null!=a&&Vi(()=>{let t;const e=eo(ro(this.m,r),a);t=this.useNesterov?eo(ro(this.c,eo(a,ro(e,this.m))),s):eo(ro(this.c,e),s),r.assign(e),s.assign(t)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Ui(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);this.accumulations=t.map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}Ro.className="Momentum",ki(Ro);class Do extends yo{constructor(t,e=.9,n=0,s=null,r=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=Nr.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const s=Nr.registeredVariables[e];null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:e+"/rms",variable:Vi(()=>oo(s).variable(!1))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:e+"/momentum",variable:Vi(()=>oo(s).variable(!1))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:e+"/mg",variable:Vi(()=>oo(s).variable(!1))});const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const a=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;Vi(()=>{const t=eo(ro(a,this.decay),ro(io(r),1-this.decay));if(this.centered){const e=this.accumulatedMeanGrads[n].variable,o=eo(ro(e,this.decay),ro(r,1-this.decay)),l=so(ro(r,this.learningRate),ao(ko(t,eo(io(o),this.epsilon)))),u=eo(ro(i,this.momentum),l);a.assign(t),e.assign(o),i.assign(u);const c=ko(s,u);s.assign(c)}else{const t=eo(ro(a,this.decay),ro(io(r),1-this.decay)),e=eo(ro(i,this.momentum),so(ro(r,this.learningRate),ao(eo(t,this.epsilon))));a.assign(t),i.assign(e);const n=ko(s,e);s.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Ui(this.accumulatedMeanSquares.map(t=>t.variable)),null!=this.accumulatedMeanGrads&&this.centered&&Ui(this.accumulatedMeanGrads.map(t=>t.variable)),null!=this.accumulatedMoments&&Ui(this.accumulatedMoments.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);const e=this.centered?t.length/3:t.length/2;this.accumulatedMeanSquares=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedMoments=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}Do.className="RMSProp",ki(Do);const Fo=Fr({acos_:function(t){const e=Ar(t,"x","acos"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.acos(e);return n([e]),s},n,null,Gt)}});const _o=Fr({acosh_:function(t){const e=Ar(t,"x","acosh"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.acosh(e);return n([e]),s},n,null,Ht)}});const Oo=Fr({addN_:function(t){Z(Array.isArray(t),()=>"The argument passed to tf.addN() must be a list of tensors"),Z(t.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+t.length);const e=t.map((t,e)=>Ar(t,"tensors"+e,"addN")),n=e[0];e.forEach(t=>{if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),e.forEach(t=>{if(!rt(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const s=e;return Nr.runKernelFunc((t,n)=>{const s=t.addN(e);return n(e),s},s,null,qt)}});function Mo(t,e){for(let n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function Lo(t,e,n){const s=t.length+e.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(t[a++]):r.push(e[i++]);return r}function zo(t,e){const n=[],s=t.length;for(let r=0;r<s;r++)-1===e.indexOf(r)&&n.push(t[r]);return[n,e.map(e=>t[e])]}function Bo(t,e){return Lo(t,e.map(t=>1),e)}function Po(t,e,n){Z(Mo(e,n),()=>t+" supports only inner-most axes for now. "+`Got axes ${e} and rank-${n} input.`)}function Wo(t,e){if(Mo(t,e))return null;const n=[];for(let s=0;s<e;++s)-1===t.indexOf(s)&&n.push(s);return t.forEach(t=>n.push(t)),n}function Vo(t){return t.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function Uo(t,e){const n=[];for(let s=e-t;s<e;++s)n.push(s);return n}const Go=Fr({all_:function(t,e=null,n=!1){let s=Ar(t,"x","all","bool");const r={x:s},a={axis:e,keepDims:n};return Nr.runKernelFunc(t=>{const r=pt(e,s.shape);let a=r;const i=Wo(a,s.rank);null!=i&&(s=Xa(s,i),a=Uo(a.length,s.rank));const o=t.all(s,a);if(n){const t=Bo(o.shape,r);return ja(o,t)}return o},r,null,Kt,a)}});const Ho=Fr({any_:function(t,e=null,n=!1){let s=Ar(t,"x","any","bool");const r={x:s},a={axis:e,keepDims:n};return Nr.runKernelFunc(t=>{const r=pt(e,s.shape);let a=r;const i=Wo(a,s.rank);null!=i&&(s=Xa(s,i),a=Uo(a.length,s.rank));const o=t.any(s,a);if(n){const t=Bo(o.shape,r);return ja(o,t)}return o},r,null,Xt,a)}});const jo=Fr({argMax_:function(t,e=0){let n=Ar(t,"x","argMax");const s={x:n},r={axis:e};return Nr.runKernelFunc((t,s)=>{s([n]);let r=pt(e,n.shape);const a=Wo(r,n.rank);return null!=a&&(n=Xa(n,a),r=Uo(r.length,n.rank)),t.argMax(n,r[0])},s,null,Yt,r)}});const qo=Fr({argMin_:function(t,e=0){let n=Ar(t,"x","argMin");const s={x:n},r={axis:e};return Nr.runKernelFunc((t,s)=>{s([n]),null==e&&(e=0);let r=pt(e,n.shape);const a=Wo(r,n.rank);return null!=a&&(n=Xa(n,a),r=Uo(r.length,n.rank)),t.argMin(n,r[0])},s,null,Jt,r)}});const Ko=Fr({asin_:function(t){const e=Ar(t,"x","asin"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.asin(e);return n([e]),s},n,null,Zt)}});const Xo=Fr({asinh_:function(t){const e=Ar(t,"x","asinh"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.asinh(e);return n([e]),s},n,null,Qt)}});const Yo=Fr({atan_:function(t){const e=Ar(t,"x","atan"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.atan(e);return n([e]),s},n,null,te)}});const Jo=Fr({atan2_:function(t,e){let n=Ar(t,"a","atan2"),s=Ar(e,"b","atan2");[n,s]=gr(n,s);const r={a:n,b:s};return Nr.runKernelFunc((t,e)=>{const r=t.atan2(n,s);return e([n,s]),r},r,null,ne)}});const Zo=Fr({atanh_:function(t){const e=Ar(t,"x","atanh"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.atanh(e);return n([e]),s},n,null,ee)}});function Qo(t,e,n,s,r="NHWC",a){return nl(t,[...e,t[3]],n,a,s,null,null,hl(r))}function tl(t,e,n,s,r,a,i="channelsLast"){const[o,l]=al(e);let u;if("channelsLast"===i)u=[o,l,t[3],t[3]];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);u=[o,l,t[1],t[1]]}return nl(t,u,n,s,r,a,!1,i)}function el(t,e,n,s,r,a,i="NDHWC"){const[o,l,u]=il(e);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,t[4],t[4]];else{if("NCDHW"!==i)throw new Error("Unknown dataFormat "+i);h="channelsFirst",c=[o,l,u,t[1],t[1]]}return sl(t,c,n,s,r,!1,h,a)}function nl(t,e,n,s,r,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=t;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);[l,h,u,c]=t}const[p,d,,f]=e,[m,g]=al(n),[y,b]=al(s),x=ol(p,y),w=ol(d,b),{padInfo:v,outHeight:k,outWidth:N}=function(t,e,n,s,r,a,i,o,l){let u,c,h;if("number"==typeof t){u={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const r=function(t,e,n,s,r){null==s&&(s=rl(t,e,n));const a=t[0],i=t[1],o=ll((a-e+2*s)/n+1,r);Z(at(o),()=>`The output # of rows (${o}) must be an integer. Change the stride and/or zero pad parameters`);const l=ll((i-e+2*s)/n+1,r);return Z(at(l),()=>`The output # of columns (${l}) must be an integer. Change the stride and/or zero pad parameters`),[o,l]}([e,n],a,s,t,o);c=r[0],h=r[1]}else if("same"===t){c=Math.ceil(e/s),h=Math.ceil(n/r);const t=Math.max(0,(c-1)*s+a-e),o=Math.max(0,(h-1)*r+i-n),l=Math.floor(t/2),p=t-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===t)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-a+1)/s),h=Math.ceil((n-i+1)/r);else{if("object"!=typeof t)throw Error("Unknown padding parameter: "+t);{const p="channelsLast"===l?t[1][0]:t[2][0],d="channelsLast"===l?t[1][1]:t[2][1],f="channelsLast"===l?t[2][0]:t[3][0],m="channelsLast"===l?t[2][1]:t[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=ll((e-a+p+d)/s+1,o),h=ll((n-i+f+m)/r+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,m,g,x,w,a,o),I=i?f*h:f;let C;return"channelsFirst"===o?C=[l,I,k,N]:"channelsLast"===o&&(C=[l,k,N,I]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:k,outWidth:N,outChannels:I,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:t,outShape:C,filterShape:e}}function sl(t,e,n,s,r,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=t;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[l,p,u,c,h]=t}const[d,f,m,,g]=e,[y,b,x]=il(n),[w,v,k]=il(s),N=ol(d,w),I=ol(f,v),C=ol(m,k),{padInfo:S,outDepth:T,outHeight:E,outWidth:$}=function(t,e,n,s,r,a,i,o,l,u,c){let h,p,d,f;if("number"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};const a=function(t,e,n,s,r,a){null==r&&(r=rl(t,e,s));const i=t[0],o=t[1],l=t[2],u=ll((i-e+2*r)/s+1,a);Z(at(u),()=>`The output # of depths (${u}) must be an integer. Change the stride and/or zero pad parameters`);const c=ll((o-e+2*r)/s+1,a);Z(at(c),()=>`The output # of rows (${c}) must be an integer. Change the stride and/or zero pad parameters`);const h=ll((l-e+2*r)/s+1,a);return Z(at(h),()=>`The output # of columns (${h}) must be an integer. Change the stride and/or zero pad parameters`),[u,c,h,n]}([e,n,s,1],o,1,r,t,c);p=a[0],d=a[1],f=a[2]}else if("same"===t){p=Math.ceil(e/r),d=Math.ceil(n/a),f=Math.ceil(s/i);const t=(p-1)*r+o-e,c=(d-1)*a+l-n,m=(f-1)*i+u-s,g=Math.floor(t/2),y=t-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((e-o+1)/r),d=Math.ceil((n-l+1)/a),f=Math.ceil((s-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(r,u,c,h,y,b,x,N,I,C,o),A=a?g*p:g;let R;return"channelsFirst"===i?R=[l,A,T,E,$]:"channelsLast"===i&&(R=[l,T,E,$,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:T,outHeight:E,outWidth:$,outChannels:A,padInfo:S,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:I,effectiveFilterWidth:C,dilationDepth:w,dilationHeight:v,dilationWidth:k,inShape:t,outShape:R,filterShape:e}}function rl(t,e,n,s=1){const r=ol(e,s);return Math.floor((t[0]*(n-1)-n+r)/2)}function al(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function il(t){return"number"==typeof t?[t,t,t]:t}function ol(t,e){return e<=1?t:t+(t-1)*(e-1)}function ll(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function ul(t){const[e,n,s]=al(t);return 1===e&&1===n&&1===s}function cl(t,e){return ul(t)||ul(e)}function hl(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}const pl=Fr({avgPool_:function(t,e,n,s,r){const a=Ar(t,"x","avgPool","float32");Z(cl(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let i=a,o=!1;3===a.rank&&(o=!0,i=ja(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Z(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),null!=r&&Z(at(s),()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);const l={x:i},u={filterSize:e,strides:n,pad:s,dimRoundingMode:r};let c=Nr.runKernelFunc((t,a)=>{const o=tl(i.shape,e,n,1,s,r);return a([i]),1===o.filterWidth&&1===o.filterHeight&&rt(o.inShape,o.outShape)?i.clone():t.avgPool(i,o)},l,null,se,u);return c=Sa(c,a.dtype),o?ja(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const dl=Fr({avgPool3d_:function(t,e,n,s,r,a="NDHWC",i){null==i?i=[1,1,1]:Li("dilations is deprecated, this field will be gone in v3.0.0.");const o=Ar(t,"x","avgPool3d","float32");let l=o,u=!1;4===o.rank&&(u=!0,l=ja(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Z(5===l.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${l.rank}.`),Z("NDHWC"===a,()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),Z(cl(n,i),()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=r&&Z(at(s),()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);const c={x:l},h={filterSize:e,strides:n,pad:s,dimRoundingMode:r,dataFormat:a,dilations:i};let p=Nr.runKernelFunc((t,o)=>{null==i&&(i=[1,1,1]);const u=el(l.shape,e,n,i,s,r,a);return o([l]),t.avgPool3d(l,u)},c,null,ae,h);return p=Sa(p,l.dtype),u?ja(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});function fl(t,e){const n=t[0].length;t.forEach((t,e)=>{Z(t.length===n,()=>`Error in concat${n}D: rank of tensors[${e}] must be the same as the rank of the rest (${n})`)}),Z(e>=0&&e<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const s=t[0];t.forEach((t,r)=>{for(let a=0;a<n;a++)Z(a===e||t[a]===s[a],()=>`Error in concat${n}D: Shape of tensors[${r}] (${t}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`)})}function ml(t,e){const n=t[0].slice();for(let s=1;s<t.length;s++)n[e]+=t[s][e];return n}const gl=Fr({concat_:function(t,e=0){Z(t.length>=1,()=>"Pass at least one tensor to concat");let n=Rr(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach(t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)});const s=n,r={axis:e};return Nr.runKernelFunc((t,s)=>{const r=pt(e,n[0].shape)[0],a=ml(n.map(t=>t.shape),r);if(0===nt(a))return Mr([],a);if(n=n.filter(t=>t.size>0),1===n.length)return n[0];fl(n.map(t=>t.shape),r);const i=t.concat(n,r);return s(n),i},s,null,fe,r)}});const yl=Fr({sigmoid_:function(t){const e=Ar(t,"x","sigmoid"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.sigmoid(e);return n([s]),s},n,null,as)}});const bl=Fr({slice_:function(t,e,n){const s=Ar(t,"x","slice");if(0===s.rank)throw new Error("Slicing scalar is not possible");const r={x:s},a={begin:e,size:n};return Nr.runKernelFunc((t,r)=>{const[a,i]=xi(s,e,n);return ai(s,a,i),r([s]),t.slice(s,a,i)},r,null,es,a)}});const xl=Fr({tanh_:function(t){const e=Ar(t,"x","tanh"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.tanh(e);return n([s]),s},n,null,bs)}});const wl=Fr({basicLSTMCell_:function(t,e,n,s,r,a){const i=Ar(t,"forgetBias","basicLSTMCell"),o=Ar(e,"lstmKernel","basicLSTMCell"),l=Ar(n,"lstmBias","basicLSTMCell"),u=Ar(s,"data","basicLSTMCell"),c=Ar(r,"c","basicLSTMCell"),h=Ar(a,"h","basicLSTMCell"),p=gl([u,h],1),d=qa(p,o),f=eo(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=bl(f,[0,0],y),x=bl(f,[0,g],y),w=bl(f,[0,2*g],y),v=bl(f,[0,3*g],y),k=eo(ro(yl(b),xl(x)),ro(c,yl(eo(i,w))));return[k,ro(xl(k),yl(v))]}});const vl=Fr({batchToSpaceND_:function(t,e,n){const s=Ar(t,"x","batchToSpaceND"),r=e.reduce((t,e)=>t*e);Z(s.rank>=1+e.length,()=>`input rank is ${s.rank} but should be > than blockShape.length ${e.length}`),Z(n.length===e.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`),Z(s.shape[0]%r==0,()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${r}`);const a={x:s},i={blockShape:e,crops:n};return Nr.runKernelFunc(t=>t.batchToSpaceND(s,e,n),a,null,le,i)}});function kl(t){return null==t?null:0===t.rank?ja(t,[t.size]):1===t.rank?t:2===t.rank?ja(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?ja(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t}const Nl=Fr({batchNorm_:function(t,e,n,s,r,a){null==a&&(a=.001);const i=Ar(t,"x","batchNorm"),o=Ar(e,"mean","batchNorm"),l=Ar(n,"variance","batchNorm");let u,c;null!=r&&(u=Ar(r,"scale","batchNorm")),null!=s&&(c=Ar(s,"offset","batchNorm")),Z(o.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),Z(null==c||o.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),Z(null==u||o.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const h=function(t){let e;return e=0===t.rank||1===t.rank?ja(t,[1,1,1,t.size]):2===t.rank?ja(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?ja(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t,e}(i),p={x:h,scale:u,offset:c,mean:o,variance:l},d={varianceEpsilon:a},f=Nr.runKernelFunc((t,e)=>(e([h,o,l,u]),t.batchNorm(h,kl(o),kl(l),kl(c),kl(u),a)),p,null,He,d);return ja(f,i.shape)}});const Il=Fr({batchNorm2d_:function(t,e,n,s,r,a){const i=Ar(t,"x","batchNorm"),o=Ar(e,"mean","batchNorm"),l=Ar(n,"variance","batchNorm");let u,c;return null!=r&&(u=Ar(r,"scale","batchNorm")),null!=s&&(c=Ar(s,"offset","batchNorm")),Z(2===i.rank,()=>"Error in batchNorm2D: x must be rank 2 but got rank "+i.rank+"."),Z(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`),Z(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=u&&Z(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&Z(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),Nl(i,o,l,c,u,a)}});const Cl=Fr({batchNorm3d_:function(t,e,n,s,r,a){const i=Ar(t,"x","batchNorm"),o=Ar(e,"mean","batchNorm"),l=Ar(n,"variance","batchNorm");let u,c;return null!=r&&(u=Ar(r,"scale","batchNorm")),null!=s&&(c=Ar(s,"offset","batchNorm")),Z(3===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+"."),Z(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`),Z(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=u&&Z(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&Z(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),Nl(i,o,l,c,u,a)}});const Sl=Fr({batchNorm4d_:function(t,e,n,s,r,a){const i=Ar(t,"x","batchNorm"),o=Ar(e,"mean","batchNorm"),l=Ar(n,"variance","batchNorm");let u,c;return null!=r&&(u=Ar(r,"scale","batchNorm")),null!=s&&(c=Ar(s,"offset","batchNorm")),Z(4===i.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+i.rank+"."),Z(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`),Z(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=u&&Z(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&Z(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),Nl(i,o,l,c,u,a)}});const Tl=Fr({broadcastTo_:function(t,e){let n=Ar(t,"broadcastTo","x");const s=n.shape;if(e.some(t=>!(t>0)||t%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<n.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`);if(e.length>n.rank){const t=n.shape.slice();for(;t.length<e.length;)t.unshift(1);n=ja(n,t)}const r=n.shape,a=Array.from(e);for(let t=e.length-1;t>=0;t--)if(r[t]===e[t])a[t]=1;else if(1!==n.shape[t])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${e}].`);if(0===a.map((t,e)=>t>1?e:-1).filter(t=>t>=0).length)return Ta(n);const i={x:n},o={shape:e,inputShape:r};return Nr.runKernelFunc(t=>t.tile(n,a),i,null,ue,o)}});const El=Fr({ceil_:function(t){const e=Ar(t,"x","ceil"),n={x:e};return Nr.runKernelFunc(t=>t.ceil(e),n,null,he)}});const $l=Fr({clipByValue_:function(t,e,n){const s=Ar(t,"x","clipByValue");Z(e<=n,()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`);const r={x:s},a={clipValueMin:e,clipValueMax:n};return Nr.runKernelFunc((t,r)=>{const a=t.clip(s,e,n);return r([s]),a},r,null,pe,a)}});const Al=Fr({concat1d_:function(t){return gl(t,0)}});const Rl=Fr({concat2d_:function(t,e){return gl(t,e)}});const Dl=Fr({concat3d_:function(t,e){return gl(t,e)}});const Fl=Fr({concat4d_:function(t,e){return gl(t,e)}});const _l=Fr({conv2d_:function(t,e,n,s,r="NHWC",a=[1,1],i){const o=Ar(t,"x","conv2d"),l=Ar(e,"filter","conv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=ja(o,[1,o.shape[0],o.shape[1],o.shape[2]])),Z(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),Z(4===l.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+l.rank+"."),null!=i&&Z(at(s),()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const h="NHWC"===r?u.shape[3]:u.shape[1];Z(h===l.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`),Z(cl(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const p={x:u,filter:l},d={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},f=Nr.runKernelFunc((t,e)=>{const o=hl(r),c=nl(u.shape,l.shape,n,a,s,i,!1,o),h=t.conv2d(u,l,c);return e([u,l]),h},p,null,me,d);return c?ja(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Ol=Fr({conv1d_:function(t,e,n,s,r="NWC",a=1,i){const o=Ar(t,"x","conv1d"),l=Ar(e,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=ja(o,[1,o.shape[0],o.shape[1]])),Z(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),Z(3===l.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+l.rank+"."),null!=i&&Z(at(s),()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`),Z(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),Z(cl(n,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`),Z("NWC"===r,()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);const h=ja(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=ja(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=_l(p,h,[1,n],s,"NHWC",[1,a],i);return ja(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const Ml=Fr({conv2DBackpropInput_:function(t,e,n,s,r,a="NHWC",i){Z(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let o=t,l=e,u=!1;3===e.rank&&(u=!0,l=ja(e,[1,e.shape[0],e.shape[1],e.shape[2]]),o=[1,t[0],t[1],t[2]]),Z(4===o.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+o.length+"."),Z(4===l.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+l.rank),Z(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank);const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?l.shape[3]:l.shape[1];Z(c===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`),Z(h===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`),null!=i&&Z(at(r),()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const p={dy:l,filter:n},d={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,inputShape:o},f=Nr.runKernelFunc((t,e)=>{const u=hl(a),c=nl(o,n.shape,s,1,r,i,!1,u),h=t.conv2dDerInput(l,n,c);return e([l,n]),h},p,null,ye,d);return u?ja(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Ll=Fr({conv2dTranspose_:function(t,e,n,s,r,a){const i=Ar(t,"x","conv2dTranspose"),o=Ar(e,"filter","conv2dTranspose");return Ml(n,i,o,s,r,"NHWC",a)}});const zl=Fr({conv3d_:function(t,e,n,s,r="NDHWC",a=[1,1,1]){const i=Ar(t,"x","conv3d"),o=Ar(e,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=ja(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),Z(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),Z(5===o.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+o.rank+"."),Z(l.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`),Z(cl(n,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),Z("NDHWC"===r,()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`);const c={x:l,filter:o},h={strides:n,pad:s,dataFormat:r,dilations:a},p=Nr.runKernelFunc((t,e)=>{const r=sl(l.shape,o.shape,n,a,s),i=t.conv3d(l,o,r);return e([l,o]),i},c,null,be,h);return u?ja(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Bl=Fr({conv3DBackpropInput_:function(t,e,n,s,r){Z(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let a=t,i=e,o=!1;4===e.rank&&(o=!0,i=ja(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),a=[1,t[0],t[1],t[2],t[3]]);const l=a[4],u=i.shape[4];Z(5===a.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+"."),Z(5===i.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+i.rank),Z(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank),Z(l===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`),Z(u===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`);const c={dy:i,filter:n},h={pad:r,strides:s,inputShape:a},p=Nr.runKernelFunc(t=>{const e=sl(a,n.shape,s,1,r);return t.conv3dDerInput(i,n,e)},c,null,we,h);return o?ja(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Pl=Fr({conv3dTranspose_:function(t,e,n,s,r){const a=Ar(t,"x","conv3dTranspose"),i=Ar(e,"filter","conv3dTranspose");return Bl(n,a,i,s,r)}});const Wl=Fr({cos_:function(t){const e=Ar(t,"x","cos"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.cos(e);return n([e]),s},n,null,ve)}});const Vl=Fr({cosh_:function(t){const e=Ar(t,"x","cosh"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.cosh(e);return n([e]),s},n,null,ke)}});const Ul=Fr({cumsum_:function(t,e=0,n=!1,s=!1){const r=Ar(t,"x","cumsum"),a={x:r},i={axis:e,exclusive:n,reverse:s};return Nr.runKernelFunc((t,a)=>{const i=Wo([e],r.rank);let o=r;null!=i&&(o=Xa(r,i));const l=Uo(1,r.rank)[0];let u=t.cumsum(o,l,n,s);if(a([r]),null!=i){const t=Vo(i);u=Xa(u,t)}return u},a,null,Ne,i)}});const Gl=Fr({depthToSpace_:function(t,e,n="NHWC"){const s=Ar(t,"x","depthToSpace"),r="NHWC"===n?s.shape[1]:s.shape[2],a="NHWC"===n?s.shape[2]:s.shape[3],i="NHWC"===n?s.shape[3]:s.shape[1];Z(r*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${e}  for depthToSpace with input shape\n    ${s.shape}`),Z(a*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${e} for depthToSpace with input shape\n        ${s.shape}`),Z(i%(e*e)==0,()=>`Dimension size must be evenly divisible by ${e*e} but is ${i} for depthToSpace with input shape ${s.shape}`);const o={x:s},l={blockSize:e,dataFormat:n};return Nr.runKernelFunc(t=>t.depthToSpace(s,e,n),o,null,Ce,l)}});const Hl=Fr({depthwiseConv2d_:function(t,e,n,s,r="NHWC",a=[1,1],i){const o=Ar(t,"x","depthwiseConv2d"),l=Ar(e,"filter","depthwiseConv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=ja(o,[1,o.shape[0],o.shape[1],o.shape[2]])),Z(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),Z(4===l.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+l.rank+"."),Z(u.shape[3]===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`),null!=i&&Z(at(s),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const h={x:u,filter:l},p={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},d=Nr.runKernelFunc((t,e)=>{null==a&&(a=[1,1]),Z(cl(n,a),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const r=nl(u.shape,l.shape,n,a,s,i,!0),o=t.depthwiseConv2D(u,l,r);return e([u,l]),o},h,null,Se,p);return c?ja(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const jl=Fr({diag_:function(t){const e=Ar(t,"x","diag"),n={x:e};return Nr.runKernelFunc(n=>{const s=ja(e,[e.size]),r=n.diag(s),a=[...t.shape,...t.shape];return ja(r,a)},n,null,$e)}});const ql=Fr({dilation2d_:function(t,e,n,s,r=[1,1],a="NHWC"){const i=Ar(t,"x","dilation2d"),o=Ar(e,"filter","dilation2d");Z(3===i.rank||4===i.rank,()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+i.rank+"."),Z(3===o.rank,()=>"Error in dilation2d: filter must be rank 3, but got rank "+o.rank+"."),Z("NHWC"===a,()=>"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+a);let l=i,u=!1;3===i.rank&&(l=ja(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);const c={x:l,filter:o},h={strides:n,pad:s,dilations:r},p=Nr.runKernel(Ae,c,h);return u?ja(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const Kl=Fr({equal_:function(t,e){let n=Ar(t,"a","equal"),s=Ar(e,"b","equal");[n,s]=gr(n,s),To(n.shape,s.shape);const r={a:n,b:s};return Nr.runKernelFunc(t=>t.equal(n,s),r,null,Le)}});const Xl=Fr({where_:function(t,e,n){const s=Ar(e,"a","where"),r=Ar(n,"b","where"),a=Ar(t,"condition","where","bool"),i=To(s.shape,r.shape),o=Tl(s,i),l=Tl(r,i);1===a.rank&&Z(a.shape[0]===s.shape[0],()=>"The first dimension of `a` must match the size of `condition`."),1!==a.rank&&Q(a.shape,l.shape,"Error in where: ");const u={condition:a,t:o,e:l};return Nr.runKernelFunc((t,e)=>{const n=t.select(a,o,l);return e([a]),n},u,null,Qn)}});const Yl=Fr({divNoNan_:function(t,e){let n=Ar(t,"a","div"),s=Ar(e,"b","div");[n,s]=gr(n,s);const r=so(n,s),a=oo(r),i=Kl(s,a);return Xl(i,a,r)}});const Jl=Fr({dot_:function(t,e){const n=Ar(t,"t1","dot"),s=Ar(e,"t2","dot");Z(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`);const r=1===n.rank?n.size:n.shape[1],a=1===s.rank?s.size:s.shape[0];if(Z(r===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`),1===n.rank&&1===s.rank){const t=ja(n,[1,-1]),e=ja(s,[-1,1]),r=qa(t,e);return ja(r,[])}if(1===n.rank&&2===s.rank){const t=ja(n,[1,-1]),e=ja(s,[s.shape[0],s.shape[1]]),r=qa(t,e);return ja(r,[r.size])}if(2===n.rank&&1===s.rank){const t=ja(s,[-1,1]),e=qa(n,t);return ja(e,[e.size])}{const t=ja(s,[s.shape[0],s.shape[1]]);return qa(n,t)}}});const Zl=Fr({elu_:function(t){const e=Ar(t,"x","elu"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.elu(e);return n([s]),s},n,null,_e)}});const Ql=Fr({erf_:function(t){let e=Ar(t,"x","erf");Z("int32"===e.dtype||"float32"===e.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===e.dtype&&(e=Sa(e,"float32"));const n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.erf(e);return n([e]),s},n,null,Me)}});const tu=Fr({exp_:function(t){const e=Ar(t,"x","exp"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.exp(e);return n([s]),s},n,null,ze)}});const eu=Fr({expandDims_:function(t,e=0){const n=Ar(t,"x","expandDims",null);Z(e<=n.rank,()=>"Axis must be <= rank of the tensor");const s=n.shape.slice();return e<0&&(Z(-(n.rank+1)<=e,()=>`Axis must be in the interval [${-(n.rank+1)}, ${n.rank}]`),e=n.rank+e+1),s.splice(e,0,1),ja(n,s)}});const nu=Fr({expm1_:function(t){const e=Ar(t,"x","expm1"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.expm1(e);return n([e]),s},n,null,Be)}});const su=Fr({tile_:function(t,e){const n=Ar(t,"x","tile",null);Z(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`);const s=[n],r={x:n},a={reps:e};return Nr.runKernelFunc((t,s)=>{const r=t.tile(n,e);return s([n]),r},r,null,xs,a,s)}});const ru=Fr({eye_:function(t,e,n,s="float32"){null==e&&(e=t);const r=Ca([t,e],s),a=t<=e?t:e;for(let t=0;t<a;++t)r.set(1,t,t);const i=ja(r.toTensor(),[t,e]);if(null==n)return i;if(1===n.length)return su(eu(i,0),[n[0],1,1]);if(2===n.length)return su(eu(eu(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return su(eu(eu(eu(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const au=Fr({floor_:function(t){const e=Ar(t,"x","floor"),n={x:e};return Nr.runKernelFunc(t=>t.floor(e),n,null,Ue)}}),iu=30;function ou(t){return t<=iu?t:Tt(t,Math.floor(Math.sqrt(t)))}function lu(t,e){let n,s=!1;for(t<=iu?(n=t,s=!0):n=Tt(t,Math.floor(Math.sqrt(t)));!s;)n>e||n===t?s=!0:n=Tt(t,n+1);return n}function uu(t,e,n){const s=[],r=t.length;for(let a=0;a<r;a++)a!==e?s.push(t[a]):s.push(n);return s}function cu(t,e,n){const s=t.shape[n],r=[];let a=1,i=1;for(let e=0;e<n;e++)r.push(t.shape[e]),a*=t.shape[e];for(let t=0;t<e.rank;t++)r.push(e.shape[t]);for(let e=n+1;e<t.rank;e++)r.push(t.shape[e]),i*=t.shape[e];return{batchSize:a,sliceSize:i,dimSize:s,outputShape:r}}const hu=Fr({gather_:function(t,e,n=0){const s=Ar(t,"x","gather"),r=Ar(e,"indices","gather","int32"),a={x:s,indices:r},i={axis:n};return Nr.runKernelFunc((t,e)=>{const a=pt(n,s.shape)[0],i=cu(s,r,a),o=t.gather(s,ja(r,[r.size]),a);return e([s,r]),ja(o,i.outputShape)},a,null,je,i)}});const pu=Fr({greater_:function(t,e){let n=Ar(t,"a","greater"),s=Ar(e,"b","greater");[n,s]=gr(n,s),To(n.shape,s.shape);const r={a:n,b:s};return Nr.runKernelFunc(t=>t.greater(n,s),r,null,Ke)}});const du=Fr({greaterEqual_:function(t,e){let n=Ar(t,"a","greaterEqual"),s=Ar(e,"b","greaterEqual");[n,s]=gr(n,s),To(n.shape,s.shape);const r={a:n,b:s};return Nr.runKernelFunc((t,e)=>{const r=t.greaterEqual(n,s);return e([n,s]),r},r,null,Xe)}});const fu=Fr({imag_:function(t){const e=Ar(t,"input","imag"),n={input:e};return Nr.runKernelFunc(t=>t.imag(e),n,null,Ze)}});const mu=Fr({isFinite_:function(t){const e=Ar(t,"x","isFinite"),n={x:e};return Nr.runKernelFunc(t=>t.isFinite(e),n,null,Qe)}});const gu=Fr({isInf_:function(t){const e=Ar(t,"x","isInf"),n={x:e};return Nr.runKernelFunc(t=>t.isInf(e),n,null,tn)}});const yu=Fr({isNaN_:function(t){const e=Ar(t,"x","isNaN"),n={x:e};return Nr.runKernelFunc(t=>t.isNaN(e),n,null,en)}});const bu=Fr({leakyRelu_:function(t,e=.2){const n=Ar(t,"x","leakyRelu");return Eo(ro(go(e),n),n)}});const xu=Fr({less_:function(t,e){let n=Ar(t,"a","less"),s=Ar(e,"b","less");[n,s]=gr(n,s),To(n.shape,s.shape);const r={a:n,b:s};return Nr.runKernelFunc(t=>t.less(n,s),r,null,nn)}});const wu=Fr({lessEqual_:function(t,e){let n=Ar(t,"a","lessEqual"),s=Ar(e,"b","lessEqual");[n,s]=gr(n,s),To(n.shape,s.shape);const r={a:n,b:s};return Nr.runKernelFunc((t,e)=>{const r=t.lessEqual(n,s);return e([n,s]),r},r,null,sn)}});function vu(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:t,stop:e,num:n};return Nr.runKernelFunc(s=>s.linspace(t,e,n),{},null,rn,s)}const ku=Fr({localResponseNormalization_:function(t,e=5,n=1,s=1,r=.5){const a=Ar(t,"x","localResponseNormalization");Z(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),Z(at(e),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);let i=a,o=!1;3===a.rank&&(o=!0,i=ja(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:i},u={depthRadius:e,bias:n,alpha:s,beta:r},c=Nr.runKernelFunc((t,a)=>{const o=t.localResponseNormalization4D(i,e,n,s,r);return a([i,o]),o},l,null,pn,u);return o?ja(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Nu=Fr({log_:function(t){const e=Ar(t,"x","log"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.log(e);return n([e]),s},n,null,an)}});const Iu=Fr({log1p_:function(t){const e=Ar(t,"x","log1p"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.log1p(e);return n([e]),s},n,null,on)}});const Cu=Fr({neg_:function(t){const e=Ar(t,"x","neg"),n={x:e};return Nr.runKernelFunc(t=>t.neg(e),n,null,Tn)}});const Su=Fr({softplus_:function(t){const e=Ar(t,"x","softplus"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.softplus(e);return n([e]),s},n,null,is)}});const Tu=Fr({logSigmoid_:function(t){const e=Ar(t,"x","logSigmoid");return fo(t=>({value:Cu(Su(Cu(t))),gradFunc:e=>ro(e,yl(Cu(t)))}))(e)}});const Eu=Fr({max_:function(t,e=null,n=!1){const s=Ar(t,"x","max"),r={x:s},a={reductionIndices:e,keepDims:n};return Nr.runKernelFunc((t,r)=>{let a=pt(e,s.shape);const i=Wo(a,s.rank);let o=s;null!=i&&(o=Xa(s,i),a=Uo(a.length,o.rank));const l=t.max(o,a);null!=i&&o.dispose();let u=l;if(n){const t=Bo(u.shape,pt(e,s.shape));u=ja(u,t),l.dispose()}return r([s,u]),u},r,null,fn,a)}});const $u=Fr({sum_:function(t,e=null,n=!1){let s=Ar(t,"x","sum");"bool"===s.dtype&&(s=Sa(s,"int32"));const r={x:s},a={axis:e,keepDims:n};return Nr.runKernelFunc((t,r)=>{r([s]);const a=pt(e,s.shape),i=Wo(a,s.rank);let o=a,l=s;null!=i&&(l=Xa(s,i),o=Uo(o.length,s.rank));let u=t.sum(l,o);if(n){const t=Bo(u.shape,a);u=ja(u,t)}return u},r,null,ls,a)}});const Au=Fr({logSoftmax_:function(t,e=-1){const n=Ar(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);const s={logits:n},r={axis:e};return Nr.runKernelFunc((n,s)=>{const r=Eu(t,e,!0),a=ko(t,r),i=ko(Sa(a,"float32"),Nu($u(tu(a),e,!0)));return s([i]),i},s,null,hn,r)}});const Ru=Fr({logSumExp_:function(t,e=null,n=!1){const s=Ar(t,"x","logSumExp"),r=pt(e,s.shape),a=Eu(s,r,!0),i=ko(s,a),o=tu(i),l=$u(o,r),u=Nu(l),c=eo(ja(a,u.shape),u);if(n){const t=Bo(c.shape,r);return ja(c,t)}return c}});const Du=Fr({logicalAnd_:function(t,e){const n=Ar(t,"a","logicalAnd","bool"),s=Ar(e,"b","logicalAnd","bool");To(n.shape,s.shape);const r={a:n,b:s};return Nr.runKernelFunc(t=>t.logicalAnd(n,s),r,null,ln)}});const Fu=Fr({logicalNot_:function(t){const e=Ar(t,"x","logicalNot","bool"),n={x:e};return Nr.runKernelFunc(t=>t.logicalNot(e),n,null,un)}});const _u=Fr({logicalOr_:function(t,e){const n=Ar(t,"a","logicalOr","bool"),s=Ar(e,"b","logicalOr","bool");To(n.shape,s.shape);const r={a:n,b:s};return Nr.runKernelFunc(t=>t.logicalOr(n,s),r,null,cn)}});const Ou=Fr({logicalXor_:function(t,e){const n=Ar(t,"a","logicalXor","bool"),s=Ar(e,"b","logicalXor","bool");return To(n.shape,s.shape),Du(_u(t,e),Fu(Du(t,e)))}});const Mu=Fr({maxPool_:function(t,e,n,s,r){const a=Ar(t,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=ja(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Z(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),Z(cl(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),null!=r&&Z(at(s),()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);const l={x:i},u={filterSize:e,strides:n,pad:s,dimRoundingMode:r},c=Nr.runKernelFunc((t,a)=>{const o=tl(i.shape,e,n,1,s,r);let l;return l=1===o.filterWidth&&1===o.filterHeight&&rt(o.inShape,o.outShape)?i.clone():t.maxPool(i,o),a([i,l]),l},l,null,gn,u);return o?ja(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Lu=Fr({maxPool3d_:function(t,e=[1,1,1],n,s,r,a="NDHWC",i){null==i?i=[1,1,1]:Li("dilations is deprecated, this field will be gone in v3.0.0.");const o=Ar(t,"x","maxPool3d");let l=o,u=!1;4===o.rank&&(u=!0,l=ja(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Z(5===l.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${l.rank}.`),Z("NDHWC"===a,()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),Z(cl(n,i),()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=r&&Z(at(s),()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);const c={x:l},h={filterSize:e,strides:n,pad:s,dimRoundingMode:r,dataFormat:a,dilations:i},p=Nr.runKernelFunc((t,o)=>{null==i&&(i=[1,1,1]);const u=el(l.shape,e,n,i,s,r,a),c=t.maxPool3d(l,u);return o([l,c]),c},c,null,bn,h);return u?ja(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const zu=Fr({maxPoolWithArgmax_:function(t,e,n,s,r=!1){const a={x:Ar(t,"x","maxPoolWithArgmax")},i={filterSize:e,strides:n,pad:s,includeBatchInIndex:r},o=Nr.runKernel(wn,a,i);return{result:o[0],indexes:o[1]}}});function Bu(t,e="float32"){if("complex64"===e){const e=Bu(t,"float32"),n=Bu(t,"float32");return _r(e,n)}const n=Rt(nt(t),e);return Nr.makeTensor(n,t,e)}function Pu(t,e="float32"){if("complex64"===e){const e=Pu(t,"float32"),n=Bu(t,"float32");return _r(e,n)}const n=At(nt(t),e);return Nr.makeTensor(n,t,e)}const Wu=Fr({mean_:function(t,e=null,n=!1){const s=Ar(t,"x","mean"),r=pt(e,s.shape),a=nt(zo(s.shape,r)[1]),i={x:s},o={axis:e,keepDims:n},l=()=>{const t=go(a),r=t.dtype===s.dtype?s:Sa(s,t.dtype),i=so(r,t);return $u(i,e,n)};return fo(t=>({value:Nr.runKernelFunc(l,i,null,vn,o),gradFunc:e=>{const n=t.shape.slice();r.forEach(t=>{n[t]=1});const s=ja(e,n);return so(ro(s,Pu(t.shape,"float32")),a)}}))(s)}});const Vu=Fr({min_:function(t,e=null,n=!1){const s=Ar(t,"x","min"),r={x:s},a={axis:e,keepDims:n};return Nr.runKernelFunc((t,r)=>{const a=pt(e,s.shape);let i=a;const o=Wo(i,s.rank);let l=s;null!=o&&(l=Xa(s,o),i=Uo(i.length,s.rank));const u=t.min(l,i);null!=o&&l.dispose();let c=u;if(n){const t=Bo(c.shape,a);c=ja(u,t),u.dispose()}return r([s,c]),c},r,null,kn,a)}});const Uu=Fr({minimum_:function(t,e){let n=Ar(t,"a","minimum"),s=Ar(e,"b","minimum");[n,s]=gr(n,s),"bool"===n.dtype&&(n=Sa(n,"int32"),s=Sa(s,"int32")),To(n.shape,s.shape);const r={a:n,b:s};return Nr.runKernelFunc((t,e)=>{const r=t.minimum(n,s);return e([n,s]),r},r,null,Nn)}});const Gu=Fr({mirrorPad_:function(t,e,n){Z("reflect"===n||"symmetric"===n,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`);const s=Ar(t,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");Z(e.length===s.rank,()=>`Padding doesn't match input. Must be ${s.rank}. Got ${e.length}.`);const r="reflect"===n?1:0;for(let t=0;t<s.rank;t++)Z(2===e[t].length,()=>"Invalid number of paddings. Must be length of 2 each."),Z(e[t][0]>=0&&e[t][0]<=s.shape[t]-r&&e[t][1]>=0&&e[t][1]<=s.shape[t]-r,()=>`Padding in dimension ${t} cannot be greater than or equal to ${s.shape[t]-r} or less than 0 for input of shape `+s.shape);const a={paddings:e,mode:n},i={x:s};return Nr.runKernel(In,i,a)}});const Hu=Fr({mod_:function(t,e){let n=Ar(t,"a","mod"),s=Ar(e,"b","mod");[n,s]=gr(n,s);const r={a:n,b:s};return Nr.runKernelFunc((t,e)=>{const r=t.mod(n,s);return e([n,s]),r},r,null,Cn)}});const ju=Fr({moments_:function(t,e=null,n=!1){const s=pt(e,(t=Ar(t,"x","moments")).shape),r=Wu(t,s,n);let a=r.shape;n||(a=Bo(r.shape,s));const i=io(ko(Sa(t,"float32"),ja(r,a)));return{mean:r,variance:Wu(i,s,n)}}});const qu=Fr({multiRNNCell_:function(t,e,n,s){const r=Ar(e,"data","multiRNNCell"),a=Rr(n,"c","multiRNNCell"),i=Rr(s,"h","multiRNNCell");let o=r;const l=[];for(let e=0;e<t.length;e++){const n=t[e](o,a[e],i[e]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],c=[];for(let t=0;t<l.length;t+=2)u.push(l[t]),c.push(l[t+1]);return[u,c]}});const Ku=Fr({multinomial_:function(t,e,n,s=!1){const r=Ar(t,"logits","multinomial"),a=r.size,i=r.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(i>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+i);n=n||Math.random();const o=1===i?ja(r,[1,-1]):r,l=Nr.runKernelFunc(t=>t.multinomial(o,s,e,n),{logits2D:o});return 1===i?ja(l,[l.size]):l}});const Xu=Fr({notEqual_:function(t,e){let n=Ar(t,"a","notEqual"),s=Ar(e,"b","notEqual");[n,s]=gr(n,s),To(n.shape,s.shape);const r={a:n,b:s};return Nr.runKernelFunc(t=>t.notEqual(n,s),r,null,En)}});const Yu=Fr({real_:function(t){const e=Ar(t,"input","real"),n={input:e};return Nr.runKernelFunc(t=>t.real(e),n,null,Pn)}});const Ju=Fr({onesLike_:function(t){const e=Ar(t,"x","onesLike"),n={x:e};return Nr.runKernelFunc((t,n)=>{if("complex64"===e.dtype){const t=Ju(Yu(e)),n=oo(fu(e));return _r(t,n)}return t.onesLike(e)},n,null,Dn)}});const Zu=Fr({outerProduct_:function(t,e){const n=Ar(t,"v1","outerProduct"),s=Ar(e,"v2","outerProduct");Z(1===n.rank&&1===s.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`);const r=ja(n,[-1,1]),a=ja(s,[1,-1]);return qa(r,a)}});const Qu=Fr({pad_:function(t,e,n=0){const s=Ar(t,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:e,constantValue:n},a={x:s};return Nr.runKernelFunc((t,r)=>(r([s]),t.pad(s,e,n)),a,null,_n,r)}});const tc=Fr({pad1d_:function(t,e,n=0){return Z(2===e.length,()=>"Invalid number of paddings. Must be length of 2."),Qu(t,[e],n)}});const ec=Fr({pad2d_:function(t,e,n=0){return Z(2===e.length&&2===e[0].length&&2===e[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),Qu(t,e,n)}});const nc=Fr({pad3d_:function(t,e,n=0){return Z(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),Qu(t,e,n)}});const sc=Fr({pad4d_:function(t,e,n=0){return Z(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),Qu(t,e,n)}});const rc=Fr({spaceToBatchND_:function(t,e,n){const s=Ar(t,"x","spaceToBatchND");Z(s.rank>=1+e.length,()=>`input rank ${s.rank} should be > than [blockShape] ${e.length}`),Z(n.length===e.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`),Z(s.shape.reduce((t,s,r)=>r>0&&r<=e.length?t&&(s+n[r-1][0]+n[r-1][1])%e[r-1]==0:t,!0),()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`);const r={x:s},a={blockShape:e,paddings:n};return Nr.runKernelFunc(t=>t.spaceToBatchND(s,e,n),r,null,us,a)}});const ac=Fr({pool_:function(t,e,n,s,r,a){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const i=Ar(t,"x","maxPool");let o=i,l=!1;3===i.rank&&(l=!0,o=ja(i,[1,i.shape[0],i.shape[1],i.shape[2]])),Z(cl(a,r),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`);const u=tl(o.shape,e,a,r,s),c=[u.dilationHeight,u.dilationWidth];let h;h="same"===s?function(t,e){const n=t.map((t,n)=>t+(t-1)*(e[n]-1)).map(t=>t-1),s=n.map(t=>Math.floor(t/2)),r=n.map((t,e)=>t-s[e]);return n.map((t,e)=>[s[e],r[e]])}([u.filterHeight,u.filterWidth],c):[[0,0],[0,0]];const p=1===c[0]&&1===c[1],[d,f]=function(t,e,n){const s=n.map(t=>t[0]),r=n.map(t=>t[1]),a=t.concat(s,r),i=e.map((t,e)=>(t-a[e]%t)%t),o=r.map((t,e)=>t+i[e]),l=e.map((t,e)=>[s[e],o[e]]),u=e.map((t,e)=>[0,i[e]]);return[l,u]}([u.inHeight,u.inWidth],c,h),m=p?s:"valid",g=p?o:rc(o,c,d),y=("avg"===n?()=>pl(g,e,a,m):()=>Mu(g,e,a,m))(),b=p?y:vl(y,c,f);return l?ja(b,[b.shape[1],b.shape[2],b.shape[3]]):b}});const ic=Fr({prelu_:function(t,e){const n=Ar(t,"x","prelu"),s=Ar(e,"alpha","prelu"),r={x:n,alpha:s};return Nr.runKernelFunc((t,e)=>{const r=t.prelu(n,s);return e([n,s]),r},r,null,Ln)}});const oc=Fr({prod_:function(t,e=null,n=!1){let s=Ar(t,"x","prod");"bool"===s.dtype&&(s=Sa(s,"int32"));const r={x:s},a={axis:e,keepDims:n};return Nr.runKernelFunc(t=>{const r=pt(e,s.shape),a=Wo(r,s.rank);let i=r,o=s;null!=a&&(o=Xa(s,a),i=Uo(i.length,s.rank));let l=t.prod(o,i);if(n){const t=Bo(l.shape,r);l=ja(l,t)}return l},r,null,zn,a)}});const lc=Fr({rand_:function(t,e,n){const s=nt(t);let r=null;if(null==n||"float32"===n)r=new Float32Array(s);else if("int32"===n)r=new Int32Array(s);else{if("bool"!==n)throw new Error("Unknown data type "+n);r=new Uint8Array(s)}for(let t=0;t<s;t++)r[t]=e();return Nr.makeTensor(r,t,n)}});var uc=n(377);class cc{constructor(t,e,n,s,r){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=uc.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*s*i,e=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class hc{constructor(t,e,n,s){this.alpha=t,this.beta=1/e,this.dtype=n;const r=s||Math.random();this.randu=uc.alea(r.toString()),this.randn=new cc(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,n,s,r,a;for(;;){do{s=this.randn.nextValue(),a=1+this.c*s}while(a<=0);if(a*=a*a,t=s*s,e=1-.331*t*t,n=.5*t+this.d*(1-a+Math.log(a)),r=this.randu(),r<e||Math.log(r)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class pc{constructor(t=0,e=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=uc.alea(s)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const dc=Fr({randomGamma_:function(t,e,n=1,s="float32",r){if(null==n&&(n=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error("Unsupported data type "+s);const a=new hc(e,n,s,r),i=Ca(t,s);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const fc=Fr({randomNormal_:function(t,e=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type "+s);const a=new cc(e,n,s,!1,r),i=Ca(t,s);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const mc=Fr({randomUniform_:function(t,e=0,n=1,s="float32",r){const a=Ca(t,s),i=new pc(e,n,null,r);for(let t=0;t<a.values.length;t++)a.values[t]=i.nextValue();return a.toTensor()}});function gc(t,e){tt(t);const n=Er(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Or(t,null,n,e)}function yc(t,e,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:t,stop:e,step:n,dtype:s};return Nr.runKernelFunc(()=>{if(t===e||t<e&&n<0||e<t&&n>1)return Bu([0],s);const r=Rt(Math.abs(Math.ceil((e-t)/n)),s);e<t&&1===n&&(n=-1),r[0]=t;for(let t=1;t<r.length;t++)r[t]=r[t-1]+n;return gc(r,s)},{},null,Bn,r)}const bc=Fr({reciprocal_:function(t){const e=Ar(t,"x","reciprocal"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.reciprocal(e);return n([e]),s},n,null,Wn)}});const xc=Fr({relu_:function(t){const e=Ar(t,"x","relu"),n={x:e};return Nr.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?Sa(e,"int32"):t.relu(e)),n,null,Vn)}});const wc=Fr({relu6_:function(t){const e=Ar(t,"x","relu6"),n={x:e};return Nr.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?Sa(e,"int32"):t.relu6(e)),n,null,Kn)}});const vc=Fr({reverse_:function(t,e){const n=Ar(t,"x","reverse"),s={x:n},r={dims:e};return Nr.runKernelFunc(t=>{const s=pt(e,n.shape);if(0===n.rank)return Ta(n);const r=t.reverse(n,s);return ja(r,n.shape)},s,null,Xn,r)}});const kc=Fr({reverse1d_:function(t){const e=Ar(t,"x","reverse");return Z(1===e.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`),vc(e,0)}});const Nc=Fr({reverse2d_:function(t,e){const n=Ar(t,"x","reverse");return Z(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),vc(n,e)}});const Ic=Fr({reverse3d_:function(t,e){const n=Ar(t,"x","reverse");return Z(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),vc(n,e)}});const Cc=Fr({reverse4d_:function(t,e){const n=Ar(t,"x","reverse");return Z(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),vc(n,e)}});const Sc=Fr({round_:function(t){const e=Ar(t,"x","round"),n={x:e};return Nr.runKernelFunc(t=>t.round(e),n,null,Yn)}});const Tc=Fr({rsqrt_:function(t){const e=Ar(t,"x","rsqrt"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.rsqrt(e);return n([e]),s},n,null,Jn)}});const Ec=Fr({selu_:function(t){const e=Ar(t,"x","selu"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.selu(e);return n([e]),s},n,null,ts)}});const $c=Fr({separableConv2d_:function(t,e,n,s,r,a=[1,1],i="NHWC"){const o=Ar(t,"x","separableConv2d"),l=Ar(e,"depthwiseFilter","separableConv2d"),u=Ar(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=ja(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");Z(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),Z(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),Z(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),Z(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),Z(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);const p=l.shape[2],d=l.shape[3];Z(u.shape[2]===p*d,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${u.shape[2]}.`);const f=Hl(c,l,s,r,i,a),m=_l(f,u,1,"valid",i);return h?ja(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Ac=async function(t,e){const n=Ar(t,"x","setdiff1d"),s=Ar(e,"y","setdiff1d");Z(n.dtype===s.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`),Z(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),Z(1===s.rank,()=>`y should be 1D tensor, but got y (${s.shape}).`);const r=await n.data(),a=await s.data(),i=new Set(a);let o=0;for(let t=0;t<r.length;t++)i.has(r[t])||o++;const l=new nr([o],n.dtype),u=new nr([o],"int32");for(let t=0,e=0;t<r.length;t++)i.has(r[t])||(l.values[e]=r[t],u.values[e]=t,e++);return[l.toTensor(),u.toTensor()]};const Rc=Fr({sign_:function(t){const e=Ar(t,"x","sign"),n={x:e};return Nr.runKernelFunc(t=>t.sign(e),n,null,rs)}});const Dc=Fr({sin_:function(t){const e=Ar(t,"x","sin"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.sin(e);return n([e]),s},n,null,ns)}});const Fc=Fr({sinh_:function(t){const e=Ar(t,"x","sinh"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.sinh(e);return n([e]),s},n,null,ss)}});const _c=Fr({slice1d_:function(t,e,n){const s=Ar(t,"x","slice1d");return Z(1===s.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`),bl(s,[e],[n])}});const Oc=Fr({slice2d_:function(t,e,n){const s=Ar(t,"x","slice2d");return Z(2===s.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`),bl(s,e,n)}});const Mc=Fr({slice3d_:function(t,e,n){const s=Ar(t,"x","slice3d");return Z(3===s.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`),bl(s,e,n)}});const Lc=Fr({slice4d_:function(t,e,n){const s=Ar(t,"x","slice4d");return Z(4===s.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`),bl(s,e,n)}});const zc=Fr({softmax_:function(t,e=-1){const n=Ar(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);const s={logits:n},r={dim:e};return Nr.runKernelFunc((t,s)=>{const r=t.softmax(n,e);return s([r]),r},s,null,hs,r)}});const Bc=Fr({fft_:function(t){Z("complex64"===t.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`);const e={input:t};return Nr.runKernelFunc(e=>{const n=t.shape[t.shape.length-1],s=t.size/n,r=t.as2D(s,n);return e.fft(r).reshape(t.shape)},e,null,Pe)}});const Pc=Fr({ifft_:function(t){Z("complex64"===t.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`);const e={input:t};return Nr.runKernelFunc(e=>{const n=t.shape[t.shape.length-1],s=t.size/n,r=ja(t,[s,n]),a=e.ifft(r);return ja(a,t.shape)},e,null,Je)}});const Wc=Fr({irfft_:function(t){const e=t.shape[t.shape.length-1],n=t.size/e;let s;if(e<=2){const r=ja(t,[n,e]);s=Pc(r)}else{const r=[n,2*(e-1)],a=ja(Yu(t),[n,e]),i=ja(fu(t),[n,e]),o=vc(bl(a,[0,1],[n,e-2]),1),l=ro(vc(bl(i,[0,1],[n,e-2]),1),go(-1)),u=gl([a,o],1),c=gl([i,l],1),h=ja(_r(u,c),[r[0],r[1]]);s=Pc(h)}if(s=Yu(s),3===t.rank&&0!==t.shape[0]){const e=s,n=t.shape[0];s=ja(s,[n,s.shape[0]/n,s.shape[1]]),e.dispose()}return s}});function Vc(t,e,n=0){let s=[];if("number"==typeof e)Z(t.shape[n]%e==0,()=>"Number of splits must evenly divide the axis."),s=new Array(e).fill(t.shape[n]/e);else{Z(e.reduce((t,e)=>(-1===e&&(t+=1),t),0)<=1,()=>"There should be only one negative value in split array.");const r=e.indexOf(-1);if(-1!==r){const s=e.reduce((t,e)=>e>0?t+e:t);e[r]=t.shape[n]-s}Z(t.shape[n]===e.reduce((t,e)=>t+e),()=>"The sum of sizes must match the size of the axis dimension."),s=e}return s}const Uc=Fr({split_:function(t,e,n=0){const s=Ar(t,"x","split"),r={x:s},a={numOrSizeSplits:e,axis:n};return Nr.runKernelFunc((t,r)=>{const a=pt(n,s.shape)[0],i=Vc(s,e,a);return t.split(s,i,a)},r,null,cs,a)}});const Gc=Fr({rfft_:function(t,e){Z("float32"===t.dtype,()=>"The dtype for rfft() must be real value but got "+t.dtype);let n=t.shape[t.shape.length-1];const s=t.size/n;let r;if(null!=e&&e<n){const s=t.shape.map(t=>0),a=t.shape.map(t=>t);a[t.shape.length-1]=e,r=bl(t,s,a),n=e}else if(null!=e&&e>n){const s=t.shape.map(t=>t);s[t.shape.length-1]=e-n,r=gl([t,Bu(s)],t.shape.length-1),n=e}else r=t;const a=oo(r),i=ja(_r(r,a),[s,n]),o=Bc(i),l=Math.floor(n/2)+1,u=Yu(o),c=fu(o),h=Uc(u,[l,n-l],u.shape.length-1),p=Uc(c,[l,n-l],c.shape.length-1),d=r.shape.slice();return d[r.shape.length-1]=l,ja(_r(h[0],p[0]),d)}});const Hc=Fr({squaredDifference_:function(t,e){let n=Ar(t,"a","squaredDifference"),s=Ar(e,"b","squaredDifference");[n,s]=gr(n,s),To(n.shape,s.shape);const r={a:n,b:s};return Nr.runKernelFunc((t,e)=>{const r=t.squaredDifference(n,s);return e([n,s]),r},r,null,ps,{})}});const jc=Fr({squeeze_:function(t,e){const n=Ar(t,"x","squeeze");return ja(n,dt(n.shape,e).newShape)}});const qc=Fr({stack_:function(t,e=0){const n=Rr(t,"tensors","stack");if(Z(n.length>=1,()=>"Pass at least one tensor to tf.stack"),1===n.length)return eu(n[0],e);const s=n[0].rank,r=n[0].shape,a=n[0].dtype;Z(e<=s,()=>"Axis must be <= rank of the tensor"),n.forEach(t=>{Q(r,t.shape,"All tensors passed to stack must have matching shapes"),Z(a===t.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=n.map(t=>eu(t,e));return gl(i,e)}});const Kc=Fr({step_:function(t,e=0){const n=Ar(t,"x","step"),s={x:n},r={alpha:e};return Nr.runKernelFunc(t=>t.step(n,e),s,null,Ss,r)}});const Xc=Fr({stridedSlice_:function(t,e,n,s,r=0,a=0,i=0,o=0,l=0){let u=Ar(t,"x","stridedSlice");const c={x:u},h={begin:e,end:n,strides:s,beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return Nr.runKernelFunc(t=>{null==s&&(s=new Array(e.length));const c=ii(i);if(c.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const h=u.rank-e.length,p=ii(o),d=u.shape.slice();p.forEach(t=>{e[t]=0,n[t]=1,d.splice(t,0,1)}),u=ja(u,d);const{begin:f,end:m,strides:g}=hi(u.shape,c,h,e,n,s,r,a,i);e=f,n=m,s=g;const y=ii(l);y.forEach(t=>{n[t]=e[t]+1,s[t]=1});const b=oi(e,n,s),x=b.filter((t,e)=>-1===y.indexOf(e));if(s.every(t=>1===t))return ja(bl(u,e,b),x);const w=t.stridedSlice(u,e,n,s);return ja(w,x)},c,null,gs,h)}});const Yc=Fr({tan_:function(t){const e=Ar(t,"x","tan"),n={x:e};return Nr.runKernelFunc((t,n)=>{const s=t.tan(e);return n([e]),s},n,null,ys)}});function Jc(t,e,n){if(tt(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Er(t,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Or(t,e,s,n)}function Zc(t,e,n){if(tt(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");const s=Er(t,n);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Or(t,e,s,n)}function Qc(t,e,n){if(tt(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");const s=Er(t,n);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Or(t,e,s,n)}function th(t,e,n){if(tt(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");const s=Er(t,n);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Or(t,e=e||s,s,n)}const eh=Fr({topk_:function(t,e=1,n=!0){const s=Ar(t,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(e>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got `+e);const a={x:s},i={k:e,sorted:n},[o,l]=Nr.runKernelFunc(t=>t.topk(s,e,n),a,null,ws,i);return{values:o,indices:l}}});const nh=Fr({truncatedNormal_:function(t,e=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new cc(e,n,s,!0,r),i=Ca(t,s);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const sh=Fr({unique_:function(t,e=0){const n=Ar(t,"x","unique",null);Z(n.rank>0,()=>"The input tensor must be at least 1D");const s={x:n},r={axis:e},[a,i]=Nr.runKernel(ks,s,r);return{values:a,indices:i}}});const rh=Fr({unsortedSegmentSum_:function(t,e,n){const s=Ar(t,"x","unsortedSegmentSum"),r=Ar(e,"segmentIds","unsortedSegmentSum","int32");Z(at(n),()=>"numSegments must be of dtype int");const a={x:s,segmentIds:r},i={numSegments:n};return Nr.runKernelFunc((t,e)=>{const a=t.unsortedSegmentSum(s,r,n);return e([r]),a},a,null,Is,i)}});const ah=Fr({unstack_:function(t,e=0){const n=Ar(t,"x","unstack");Z(e>=-n.shape.length&&e<n.shape.length,()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`),e<0&&(e+=n.shape.length);const s={value:n},r={axis:e};return Nr.runKernelFunc(t=>t.unstack(n,e),s,null,Ns,r)}});function ih(t,e=!0,n,s){return Nr.makeVariable(t,e,n,s)}function oh(t,e){const n=[];for(let t=0;t<e.length;t++)e[t]&&n.push(t);const s=Ca(t,"int32"),r=Ca([n.length,t.length],"int32");for(let e=0;e<n.length;e++){const a=s.indexToLoc(n[e]),i=e*t.length;r.values.set(a,i)}return r.toTensor()}const lh=async function(t){const e=Ar(t,"condition","whereAsync","bool"),n=await e.data(),s=oh(e.shape,n);return t!==e&&e.dispose(),s};const uh=async function(t,e,n){const s=Ar(t,"tensor","boolMask"),r=Ar(e,"mask","boolMask","bool"),a=null==n?0:n,i=r.rank,o=s.shape;Z(i>0,()=>"mask cannot be scalar"),Q(o.slice(a,a+i),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let t=a;t<a+i;t++)l*=o[t];const u=o.slice(0,a).concat([l],o.slice(a+i)),c=ja(s,u),h=ja(r,[-1]),p=await lh(h),d=jc(p,[1]),f=hu(c,d,a);return t!==s&&s.dispose(),e!==r&&r.dispose(),d.dispose(),c.dispose(),h.dispose(),p.dispose(),f};const ch=Fr({equalStrict_:function(t,e){Li("strict variants of ops have been deprecated and will be removed in future");const n=Ar(t,"a","equalStrict"),s=Ar(e,"b","equalStrict");return Q(n.shape,s.shape,"Error in equalStrict: "),Kl(n,s)}}),hh=Fr({greaterEqualStrict_:function(t,e){Li("strict variants of ops have been deprecated and will be removed in future");const n=Ar(t,"a","greaterEqualStrict"),s=Ar(e,"b","greaterEqualStrict");return Q(n.shape,s.shape,"Error in greaterEqualStrict: "),du(n,s)}}),ph=Fr({greaterStrict_:function(t,e){Li("strict variants of ops have been deprecated and will be removed in future");const n=Ar(t,"a","greaterStrict"),s=Ar(e,"b","greaterStrict");return Q(n.shape,s.shape,"Error in greaterStrict: "),pu(n,s)}}),dh=Fr({lessEqualStrict_:function(t,e){Li("strict variants of ops have been deprecated and will be removed in future");const n=Ar(t,"a","lessEqualStrict"),s=Ar(e,"b","lessEqualStrict");return Q(n.shape,s.shape,"Error in lessEqualStrict: "),wu(n,s)}}),fh=Fr({lessStrict_:function(t,e){Li("strict variants of ops have been deprecated and will be removed in future");const n=Ar(t,"a","lessStrict"),s=Ar(e,"b","lessStrict");return Q(n.shape,s.shape,"Error in lessStrict: "),xu(n,s)}}),mh=Fr({notEqualStrict_:function(t,e){Li("strict variants of ops have been deprecated and will be removed in future");const n=Ar(t,"a","notEqualStrict"),s=Ar(e,"b","notEqualStrict");return Q(n.shape,s.shape,"Error in notEqualStrict: "),Xu(n,s)}});const gh=Fr({addStrict_:function(t,e){Li("strict variants of ops have been deprecated and will be removed in future");const n=Ar(t,"a","addStrict"),s=Ar(e,"b","addStrict");return Q(n.shape,s.shape,"Error in addStrict: "),eo(n,s)}}),yh=Fr({divStrict_:function(t,e){Li("strict variants of ops have been deprecated and will be removed in future");const n=Ar(t,"a","div"),s=Ar(e,"b","div");return Q(n.shape,s.shape,"Error in divideStrict: "),so(n,s)}}),bh=Fr({maximumStrict_:function(t,e){Li("strict variants of ops have been deprecated and will be removed in future");const n=Ar(t,"a","maximumStrict"),s=Ar(e,"b","maximumStrict");return Q(n.shape,s.shape,"Error in maximumStrict: "),Eo(n,s)}}),xh=Fr({minimumStrict_:function(t,e){Li("strict variants of ops have been deprecated and will be removed in future");const n=Ar(t,"a","minimumStrict"),s=Ar(e,"b","minimumStrict");return Q(n.shape,s.shape,"Error in minimumStrict: "),Uu(n,s)}}),wh=Fr({modStrict_:function(t,e){Li("strict variants of ops have been deprecated and will be removed in future");const n=Ar(t,"a","modStrict"),s=Ar(e,"b","modStrict");return Q(n.shape,s.shape,"Error in modStrict: "),Hu(n,s)}}),vh=Fr({mulStrict_:function(t,e){Li("strict variants of ops have been deprecated and will be removed in future");const n=Ar(t,"a","mul"),s=Ar(e,"b","mul");return Q(n.shape,s.shape,"Error in multiplyStrict: "),ro(n,s)}}),kh=Fr({powStrict_:function(t,e){return Li("strict variants of ops have been deprecated and will be removed in future"),Q(t.shape,e.shape,"Error in powStrict: "),vo(t,e)}}),Nh=Fr({squaredDifferenceStrict_:function(t,e){Li("strict variants of ops have been deprecated and will be removed in future");const n=Ar(t,"a","squaredDifferenceStrict"),s=Ar(e,"b","squaredDifferenceStrict");return Q(n.shape,s.shape,"Error in squaredDifferenceStrict: "),Hc(n,s)}}),Ih=Fr({subStrict_:function(t,e){Li("strict variants of ops have been deprecated and will be removed in future");const n=Ar(t,"a","subStrict"),s=Ar(e,"b","subStrict");return Q(n.shape,s.shape,"Error in subStrict: "),ko(n,s)}});const Ch=Fr({norm_:function(t,e="euclidean",n=null,s=!1){const r=function t(e,n,s=null){if(0===e.rank)return Io(e);if(1!==e.rank&&null===s)return t(ja(e,[-1]),n,s);if(1===e.rank||"number"==typeof s||Array.isArray(s)&&1===s.length){if(1===n)return $u(Io(e),s);if(n===1/0)return Eu(Io(e),s);if(n===-1/0)return Vu(Io(e),s);if("euclidean"===n||2===n)return ao($u(vo(Io(e),go(2,"int32")),s));throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(s)&&2===s.length){if(1===n)return Eu($u(Io(e),s[0]),s[1]-1);if(n===1/0)return Eu($u(Io(e),s[1]),s[0]);if(n===-1/0)return Vu($u(Io(e),s[1]),s[0]);if("fro"===n||"euclidean"===n)return ao($u(io(e),s));throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+s)}(t=Ar(t,"x","norm"),e,n);let a=r.shape;if(s){const e=pt(n,t.shape);a=Bo(r.shape,e)}return ja(r,a)}});const Sh=Fr({movingAverage_:function(t,e,n,s,r=!0){const a=Ar(t,"v","movingAverage"),i=Ar(e,"x","movingAverage"),o=Ar(n,"decay","movingAverage");yr(a,i),Z(rt(a.shape,i.shape),()=>"Shape mismatch in v and x");const l=go(1),u=ko(l,o);let c=ro(ko(i,a),u);if(r){Z(null!=s,()=>"When using zeroDebias: true, step is required.");const t=Ar(s,"step","movingAverage");c=so(c,ko(l,vo(o,t)))}return eo(a,c)}});const Th=Fr({scatterND_:function(t,e,n){const s=Ar(t,"indices","scatterND","int32"),r=Ar(e,"updates","scatterND");si(r,s,n);const a={indices:s,updates:r},i={shape:n};return Nr.runKernelFunc(t=>t.scatterND(s,r,n),a,null,Zn,i)}});const Eh=Fr({sparseToDense_:function(t,e,n,s=0){const r=Ar(t,"sparseIndices","sparseToDense","int32"),a=Ar(e,"sparseValues","sparseToDense"),i=Ar(s,"defaultValue","sparseToDense",a.dtype);!function(t,e,n,s){if("int32"!==t.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);const r=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=e.size;if(0!==e.rank&&(1!==e.rank||i!==r))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${r}]`);if(e.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,a,n,i);const o={sparseIndices:r,sparseValues:a,defaultValue:i},l={outputShape:n};return Nr.runKernelFunc(t=>t.sparseToDense(r,a,n,i),o,null,ms,l)}});const $h=Fr({gatherND_:function(t,e){const n=Ar(e,"indices","gatherND","int32"),s=Ar(t,"x","gatherND"),r={params:s,indices:n};return Nr.runKernelFunc(t=>t.gatherND(s,n),r,null,qe)}});const Ah=Fr({dropout_:function(t,e,n,s){const r=Ar(t,"x","dropout");if(Z("float32"===r.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`),Z(e>=0&&e<1,()=>`rate must be a float in the range [0, 1), but got ${e}.`),0===e)return t instanceof ir?r.clone():r;const a=function(t,e){if(null==e)return t.shape.slice();if(rt(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let s=0;s<t.shape.length;s++)null==e[s]&&null!=t.shape[s]?n.push(t.shape[s]):n.push(e[s]);return n}return e}(r,n),i=1-e,o=so(au(eo(mc(a,0,1,"float32",s),i)),i);return ro(r,o)}});function Rh(t){return Math.floor(Math.pow(2,Math.ceil(Math.log(t)/Math.log(2))))}function Dh(t,e,n){const s=1-t%2,r=new Float32Array(t);for(let a=0;a<t;++a){const i=2*Math.PI*a/(t+s-1);r[a]=e-n*Math.cos(i)}return gc(r,"float32")}const Fh=async function(t,e,n=1){const s=Ar(t,"predictions","inTopK"),r=Ar(e,"targets","inTopK");Z(s.rank>1,()=>"inTopK() expects the predictions to be of rank 2 or higher, but got "+s.rank),Z(s.rank-1===r.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`),Q(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=s.shape[s.shape.length-1];Z(n>0&&n<=a,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`);const i=await s.data(),o=await r.data(),[l,u]=[i.length/a,a],c=ft("bool",l);for(let t=0;t<l;t++){const e=t*u,s=i.subarray(e,e+u),r=[];for(let t=0;t<s.length;t++)r.push({value:s[t],index:t});r.sort((t,e)=>e.value-t.value),c[t]=0;for(let e=0;e<n;e++)if(r[e].index===o[t]){c[t]=1;break}}return t!==s&&s.dispose(),e!==r&&r.dispose(),Mr(c,r.shape,"bool")};const _h=Fr({conv2DBackpropFilter_:function(t,e,n,s,r,a="NHWC",i){let o=t;3===t.rank&&(o=ja(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let l=e;3===l.rank&&(l=ja(e,[1,e.shape[0],e.shape[1],e.shape[2]])),Z(4===o.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+o.shape+"."),Z(4===l.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+l.shape+"."),Z(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+".");const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];Z(u===n[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`),Z(c===n[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`),null!=i&&Z(at(r),()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const h={x:o,dy:l},p={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,filterShape:n};return Nr.runKernelFunc(t=>{const e=hl(a),u=nl(o.shape,n,s,1,r,i,!1,e);return t.conv2dDerFilter(o,l,u)},h,null,ge,p)}});function Oh(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return ro(t,Kc(e));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Mh(t,e){let n=e;const s=So(t.shape,e.shape);return s.length>0&&(n=$u(n,s)),ja(n,t.shape)}function Lh(t,e,n){if("linear"===e)return t;if("relu"===e)return xc(t);if("elu"===e)return Zl(t);if("relu6"===e)return wc(t);if("prelu"===e)return ic(t,n);throw new Error(`Unknown fused activation ${e}.`)}const zh=(t,e)=>!(t>0)||"linear"===e;const Bh=Fr({fusedConv2d_:function({x:t,filter:e,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u}){if(l=l||"linear",!1===zh(Nr.state.gradientDepth,l)){let c=_l(t,e,n,s,r,a,i);return null!=o&&(c=eo(c,o)),Lh(c,l,u)}const c=Ar(t,"x","conv2d"),h=Ar(e,"filter","conv2d");let p=c,d=!1;3===c.rank&&(d=!0,p=ja(c,[1,c.shape[0],c.shape[1],c.shape[2]])),Z(4===p.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+p.rank+"."),Z(4===h.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+h.rank+"."),null!=i&&Z(at(s),()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`),Z(p.shape[3]===h.shape[2],()=>`Error in conv2d: depth of input (${p.shape[3]}) must match input depth for filter ${h.shape[2]}.`),Z(cl(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),Z("NHWC"===r,()=>`Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`);const f=nl(p.shape,h.shape,n,a,s,i);let m,g;null!=o&&(m=Ar(o,"bias","fused conv2d"),[m]=gr(m,c),To(f.outShape,m.shape)),null!=u&&(g=Ar(u,"prelu weights","fused conv2d"));const y=(t,e)=>{const[r,i,o,u]=e,c=Oh(t,o,l);Z(ul(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const h=[Ml(i.shape,c,r,n,s),_h(i,c,r.shape,n,s)];if(null!=u){const t=Mh(u,c);h.push(t)}return h},b=t=>t.fusedConv2d({input:p,filter:h,convInfo:f,bias:m,activation:l,preluActivationWeights:g}),x={x:p,filter:h,bias:m,preluActivationWeights:g},w={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l};if(null==o){return fo((t,e,n)=>{let s=Nr.runKernelFunc(b,x,null,As,w);return n([e,t,s]),d&&(s=ja(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:y}})(p,h)}return fo((t,e,n,s)=>{let r=Nr.runKernelFunc(b,x,null,As,w);return s([e,t,r,n]),d&&(r=ja(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:y}})(p,h,m)}});const Ph=Fr({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,s,r,a=[1,1],i){let o=t;3===t.rank&&(o=ja(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let l=e;3===l.rank&&(l=ja(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const u={x:o,dy:l},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,filterShape:n};return Nr.runKernelFunc(e=>{const u=nl(t.shape,n,s,a,r,i,!0);return e.depthwiseConv2DDerFilter(o,l,u)},u,null,Te,c)}});const Wh=Fr({depthwiseConv2dNativeBackpropInput_:function(t,e,n,s,r,a=[1,1],i){let o=e,l=!1;3===e.rank&&(l=!0,o=ja(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const u={dy:o,filter:n},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,inputShape:t},h=Nr.runKernelFunc(e=>{const l=nl(t,n.shape,s,a,r,i,!0);return e.depthwiseConv2DDerInput(o,n,l)},u,null,Ee,c);return l?ja(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Vh=Fr({fusedDepthwiseConv2d_:function({x:t,filter:e,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u}){if(!1===zh(Nr.state.gradientDepth,l)){let c=Hl(t,e,n,s,r,a,i);return null!=o&&(c=eo(c,o)),Lh(c,l,u)}const c=Ar(t,"x","depthwiseConv2d"),h=Ar(e,"filter","depthwiseConv2d");let p=c,d=!1;3===c.rank&&(d=!0,p=ja(c,[1,c.shape[0],c.shape[1],c.shape[2]])),Z(4===p.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`),Z(4===h.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`),Z(p.shape[3]===h.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`),null==a&&(a=[1,1]),Z(cl(n,a),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),null!=i&&Z(at(s),()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${s}.`);const f=nl(p.shape,h.shape,n,a,s,i,!0);let m,g;null!=o&&(m=Ar(o,"bias","fused conv2d"),[m]=gr(m,c),To(f.outShape,m.shape)),null!=u&&(g=Ar(u,"prelu weights","fused depthwiseConv2d"));const y=(t,e)=>{Z(ul(a),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[r,o,u,c]=e,h=Oh(t,u,l),p=Wh(o.shape,h,r,n,s,a,i),d=Ph(o,h,r.shape,n,s,a,i);if(null!=c){return[p,d,Mh(m,h)]}return[p,d]},b=t=>t.fusedDepthwiseConv2D({input:p,filter:h,convInfo:f,bias:m,activation:l,preluActivationWeights:g}),x={x:p,filter:h,bias:m,preluActivationWeights:g},w={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l};if(null==o){return fo((t,e,n)=>{let s=Nr.runKernelFunc(b,x,null,Rs,w);return n([e,t,s]),d&&(s=ja(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:y}})(p,h)}return fo((t,e,n,s)=>{let r=Nr.runKernelFunc(b,x,null,Rs,w);return s([e,t,r,n]),d&&(r=ja(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:y}})(p,h,m)}});const Uh=Fr({fusedMatMul_:function({a:t,b:e,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:i}){if(!1===zh(Nr.state.gradientDepth,a)){let o=qa(t,e,n,s);return null!=r&&(o=eo(o,r)),Lh(o,a,i)}let o=Ar(t,"a","fused matMul"),l=Ar(e,"b","fused matMul");[o,l]=gr(o,l);const u=n?o.shape[o.rank-2]:o.shape[o.rank-1],c=s?l.shape[l.rank-1]:l.shape[l.rank-2],h=n?o.shape[o.rank-1]:o.shape[o.rank-2],p=s?l.shape[l.rank-2]:l.shape[l.rank-1],d=o.shape.slice(0,-2),f=l.shape.slice(0,-2),m=nt(d),g=nt(f);Z(o.rank>=2&&l.rank>=2&&o.rank===l.rank,()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${o.rank} and ${l.rank}.`),Z(rt(d,f),()=>`Error in fused matMul: outer dimensions (${d}) and (${f}) of Tensors with shapes ${o.shape} and `+l.shape+" must match."),Z(u===c,()=>`Error in fused matMul: inner shapes (${u}) and (${c}) of Tensors with shapes ${o.shape} and ${l.shape} and transposeA=${n} and transposeB=${s} must match.`);const y=o.shape.slice(0,-2).concat([h,p]),b=ja(o,n?[m,u,h]:[m,h,u]),x=ja(l,s?[g,p,c]:[g,c,p]);let w,v;null!=r&&(w=Ar(r,"bias","fused matMul"),[w]=gr(w,o),To(y,w.shape)),null!=i&&(v=Ar(i,"prelu weights","fused matMul"));const k=(t,e)=>{const[i,o,l,u]=e,c=Oh(ja(t,l.shape),l,a);let h,p;if(n||s?!n&&s?(h=qa(c,o,!1,!1),p=qa(c,i,!0,!1)):n&&!s?(h=qa(o,c,!1,!0),p=qa(i,c,!1,!1)):(h=qa(o,c,!0,!0),p=qa(c,i,!0,!0)):(h=qa(c,o,!1,!0),p=qa(i,c,!0,!1)),null!=r){return[h,p,Mh(u,c)]}return[h,p]},N=t=>t.fusedBatchMatMul({a:b,b:x,transposeA:n,transposeB:s,bias:w,activation:a,preluActivationWeights:v}),I={a:b,b:x,bias:w,preluActivationWeights:v},C={transposeA:n,transposeB:s,activation:a};if(null==r){return fo((t,e,n)=>{const s=Nr.runKernelFunc(N,I,null,$s,C);return n([t,e,s]),{value:ja(s,y),gradFunc:k}})(b,x)}return fo((t,e,n,s)=>{const r=Nr.runKernelFunc(N,I,null,$s,C);return s([t,e,r,n]),{value:ja(r,y),gradFunc:k}})(b,x,w)}});const Gh=Fr({hammingWindow_:function(t){return Dh(t,.54,.46)}});const Hh=Fr({hannWindow_:function(t){return Dh(t,.5,.5)}});const jh=Fr({frame_:function(t,e,n,s=!1,r=0){let a=0;const i=[];for(;a+e<=t.size;)i.push(bl(t,a,e)),a+=n;if(s)for(;a<t.size;){const s=a+e-t.size,o=gl([bl(t,a,e-s),xo([s],r)]);i.push(o),a+=n}return 0===i.length?Jc([],[0,e]):ja(gl(i),[i.length,e])}});const qh=Fr({stft_:function(t,e,n,s,r=Hh){null==s&&(s=Rh(e));const a=jh(t,e,n),i=ro(a,r(e)),o=[];for(let t=0;t<a.shape[0];t++)o.push(Gc(bl(i,[t,0],[1,e]),s));return gl(o)}});const Kh=Fr({cropAndResize_:function(t,e,n,s,r,a){const i=Ar(t,"image","cropAndResize"),o=Ar(e,"boxes","cropAndResize","float32"),l=Ar(n,"boxInd","cropAndResize","int32");r=r||"bilinear",a=a||0;const u=o.shape[0];Z(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),Z(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`),Z(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`),Z(2===s.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`),Z(s[0]>=1&&s[1]>=1,()=>"cropSize must be atleast [1,1], but was "+s),Z("bilinear"===r||"nearest"===r,()=>"method must be bilinear or nearest, but was "+r);const c={image:i,boxes:o,boxInd:l},h={method:r,extrapolationValue:a,cropSize:s};return Nr.runKernelFunc(t=>t.cropAndResize(i,o,l,s,r,a),c,null,Ie,h)}});const Xh=Fr({flipLeftRight_:function(t){const e=Ar(t,"image","flipLeftRight","float32");Z(4===e.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`);const n={image:e};return Nr.runKernel(Ve,n,{})}});const Yh=Fr({rotateWithOffset_:function(t,e,n=0,s=.5){const r=Ar(t,"image","rotateWithOffset","float32");Z(4===r.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`);const a={image:r},i={radians:e,fillValue:n,center:s};return Nr.runKernel(Es,a,i)}});function Jh(t,e,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=t.shape[0];return n=Math.min(n,i),Z(0<=s&&s<=1,()=>`iouThreshold must be in [0, 1], but was '${s}'`),Z(2===t.rank,()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`),Z(4===t.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]),Z(1===e.rank,()=>"scores must be a 1D tensor"),Z(e.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was `+e.shape[0]),Z(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const Zh=Fr({nonMaxSuppression_:function(t,e,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Ar(t,"boxes","nonMaxSuppression"),i=Ar(e,"scores","nonMaxSuppression"),o=Jh(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l={maxOutputSize:n,iouThreshold:s,scoreThreshold:r};return Nr.runKernelFunc(t=>t.nonMaxSuppression(a,i,n,s,r),{boxes:a,scores:i},null,$n,l)}});function Qh(t,e,n){const s=function(t,e,n){return function(t,e,n){let s=0,r=t.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(e,t[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(t,e,n||tp)}(t,e,n),r=s<0?-(s+1):s;t.splice(r,0,e)}function tp(t,e){return t>e?1:t<e?-1:0}function ep(t,e,n,s,r){return rp(t,e,n,s,r,0).selectedIndices}function np(t,e,n,s,r,a){return rp(t,e,n,s,r,0,!1,a,!0)}function sp(t,e,n,s,r,a){return rp(t,e,n,s,r,a,!0)}function rp(t,e,n,s,r,a,i=!1,o=!1,l=!1){const u=[];for(let t=0;t<e.length;t++)e[t]>r&&u.push({score:e[t],boxIndex:t,suppressBeginIndex:0});u.sort(op);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const e=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=e;if(n<r)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=ap(t,a,h[n]);if(i>=s){o=!0;break}if(e.score=e.score*ip(s,c,i),e.score<=r)break}e.suppressBeginIndex=h.length,o||(e.score===n?(h.push(a),p.push(e.score)):e.score>r&&Qh(u,e,op))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:gc(h,"int32")};return i&&(m.selectedScores=gc(p,"float32")),l&&(m.validOutputs=go(d,"int32")),m}function ap(t,e,n){const s=t.subarray(4*e,4*e+4),r=t.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),p=Math.max(r[1],r[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function ip(t,e,n){const s=Math.exp(e*n*n);return n<=t?s:0}function op(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}const lp=async function(t,e,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Ar(t,"boxes","nonMaxSuppressionAsync"),i=Ar(e,"scores","nonMaxSuppressionAsync"),o=Jh(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=ep(l[0],l[1],n,s,r);return a!==t&&a.dispose(),i!==e&&i.dispose(),u};const up=Fr({nonMaxSuppressionWithScore_:function(t,e,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Ar(t,"boxes","nonMaxSuppression"),o=Ar(e,"scores","nonMaxSuppression"),l=Jh(i,o,n,s,r,a),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=Nr.runKernel(Rn,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const cp=async function(t,e,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Ar(t,"boxes","nonMaxSuppressionAsync"),o=Ar(e,"scores","nonMaxSuppressionAsync"),l=Jh(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=sp(u[0],u[1],n,s,r,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),c};const hp=Fr({nonMaxSuppressionPadded_:function(t,e,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Ar(t,"boxes","nonMaxSuppression"),o=Ar(e,"scores","nonMaxSuppression"),l=Jh(i,o,n,s,r,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=Nr.runKernel(An,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const pp=async function(t,e,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Ar(t,"boxes","nonMaxSuppressionAsync"),o=Ar(e,"scores","nonMaxSuppressionAsync"),l=Jh(i,o,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),f=np(p,d,u,c,h,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),f};const dp=Fr({resizeBilinear_:function(t,e,n=!1){const s=Ar(t,"images","resizeBilinear");Z(3===s.rank||4===s.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`),Z(2===e.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+e+".");let r=s,a=!1;3===s.rank&&(a=!0,r=ja(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[i,o]=e,l={images:r},u={alignCorners:n,size:e},c=Nr.runKernelFunc((t,e)=>(e([r]),t.resizeBilinear(r,i,o,n)),l,null,jn,u);return a?ja(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const fp=Fr({resizeNearestNeighbor_:function(t,e,n=!1){const s=Ar(t,"images","resizeNearestNeighbor");Z(3===s.rank||4===s.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`),Z(2===e.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+"."),Z("float32"===s.dtype||"int32"===s.dtype,()=>"`images` must have `int32` or `float32` as dtype");let r=s,a=!1;3===s.rank&&(a=!0,r=ja(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[i,o]=e,l={images:r},u={alignCorners:n,size:e},c=Nr.runKernelFunc((t,e)=>(e([r]),t.resizeNearestNeighbor(r,i,o,n)),l,null,Gn,u);return a?ja(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const mp=Fr({bandPart_:function(t,e,n){Z(e%1==0,()=>`bandPart(): numLower must be an integer, got ${e}.`),Z(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`);const s=Ar(t,"a","bandPart");Z(s.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`);const r=s.shape,[a,i]=s.shape.slice(-2);if(!(e<=a))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);e<0&&(e=a),n<0&&(n=i);const o=ja(yc(0,a,1,"int32"),[-1,1]),l=yc(0,i,1,"int32"),u=ko(o,l),c=Du(wu(u,go(+e,"int32")),du(u,go(-n,"int32"))),h=Bu([a,i],s.dtype);return ja(qc(ah(ja(s,[-1,a,i])).map(t=>Xl(c,t,h))),r)}});const gp=Fr({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,Z(null!=t&&t.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=t[0].shape[0];for(let e=1;e<t.length;++e)Z(t[e].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[e].shape[0]} vs. ${n})`)}else e=!0,t=Uc(t,t.shape[0],0).map(t=>jc(t,[0]));Z(t.length<=t[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`);const n=[],s=t;for(let e=0;e<t.length;++e)n.push(Nr.tidy(()=>{let t=s[e];if(e>0)for(let s=0;s<e;++s){const e=ro($u(ro(n[s],t)),n[s]);t=ko(t,e)}return so(t,Ch(t,"euclidean"))}));return e?qc(n,0):n}});function yp(t,e=!1){return Nr.tidy(()=>{Z(2===t.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`);const n=t.shape[0],s=t.shape[1];let r=ru(n),a=Ta(t);const i=Jc([[1]],[1,1]);let o=Ta(i);const l=n>=s?s:n;for(let t=0;t<l;++t){const e=a,l=o,u=r;[o,a,r]=Nr.tidy(()=>{const e=bl(a,[t,t],[n-t,1]),l=Ch(e),u=bl(a,[t,t],[1,1]),c=Xl(pu(u,0),Jc([[-1]]),Jc([[1]])),h=ko(u,ro(c,l)),p=so(e,h);o=1===p.shape[0]?Ta(i):gl([i,bl(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=Cu(so(qa(c,h),l)),f=bl(a,[t,0],[n-t,s]),m=ro(d,o),g=Xa(o);if(0===t)a=ko(f,qa(m,qa(g,f)));else{const e=ko(f,qa(m,qa(g,f)));a=gl([bl(a,[0,0],[t,s]),e],0)}const y=Xa(m),b=bl(r,[0,t],[n,r.shape[1]-t]);if(0===t)r=ko(b,qa(qa(b,o),y));else{const e=ko(b,qa(qa(b,o),y));r=gl([bl(r,[0,0],[n,t]),e],1)}return[o,a,r]}),Ui([e,l,u])}return!e&&n>s&&(r=bl(r,[0,0],[n,s]),a=bl(a,[0,0],[s,s])),[r,a]})}const bp=Fr({qr_:function(t,e=!1){if(Z(t.rank>=2,()=>"qr() requires input tensor to have a rank >= 2, but got rank "+t.rank),2===t.rank)return yp(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce((t,e)=>t*e),s=ah(ja(t,[n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),r=[],a=[];s.forEach(t=>{const[n,s]=yp(t,e);r.push(n),a.push(s)});return[ja(qc(r,0),t.shape),ja(qc(a,0),t.shape)]}}});var xp;!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(xp||(xp={}));const wp=Fr({computeWeightedLoss_:function(t,e,n=xp.SUM_BY_NONZERO_WEIGHTS){const s=Ar(t,"losses","computeWeightedLoss");let r=null;null!=e&&(r=Ar(e,"weights","computeWeightedLoss"));const a=null==r?s:ro(s,r);if(n===xp.NONE)return a;if(n===xp.SUM)return $u(a);if(n===xp.MEAN){if(null==r)return Wu(a);{const t=s.size/r.size,e=so($u(a),$u(r));return t>1?so(e,go(t)):e}}if(n===xp.SUM_BY_NONZERO_WEIGHTS){if(null==r)return so($u(a),go(s.size));{const t=ro(r,Pu(s.shape)),e=Sa($u(Xu(t,go(0))),"float32");return so($u(a),e)}}throw Error("Unknown reduction: "+n)}});const vp=Fr({absoluteDifference_:function(t,e,n,s=xp.SUM_BY_NONZERO_WEIGHTS){const r=Ar(t,"labels","absoluteDifference"),a=Ar(e,"predictions","absoluteDifference");let i=null;null!=n&&(i=Ar(n,"weights","absoluteDifference")),Q(r.shape,a.shape,"Error in absoluteDifference: ");const o=Io(ko(r,a));return wp(o,i,s)}});const kp=Fr({cosineDistance_:function(t,e,n,s,r=xp.SUM_BY_NONZERO_WEIGHTS){const a=Ar(t,"labels","cosineDistance"),i=Ar(e,"predictions","cosineDistance");let o=null;null!=s&&(o=Ar(s,"weights","cosineDistance")),Q(a.shape,i.shape,"Error in cosineDistance: ");const l=go(1),u=ko(l,$u(ro(a,i),n,!0));return wp(u,o,r)}});const Np=Fr({hingeLoss_:function(t,e,n,s=xp.SUM_BY_NONZERO_WEIGHTS){let r=Ar(t,"labels","hingeLoss");const a=Ar(e,"predictions","hingeLoss");let i=null;null!=n&&(i=Ar(n,"weights","hingeLoss")),Q(r.shape,a.shape,"Error in hingeLoss: ");const o=go(1);r=ko(ro(go(2),r),o);const l=xc(ko(o,ro(r,a)));return wp(l,i,s)}});const Ip=Fr({huberLoss_:function(t,e,n,s=1,r=xp.SUM_BY_NONZERO_WEIGHTS){const a=Ar(t,"labels","huberLoss"),i=Ar(e,"predictions","huberLoss");let o=null;null!=n&&(o=Ar(n,"weights","huberLoss")),Q(a.shape,i.shape,"Error in huberLoss: ");const l=go(s),u=Io(ko(i,a)),c=Uu(u,l),h=ko(u,c),p=eo(ro(go(.5),io(c)),ro(l,h));return wp(p,o,r)}});const Cp=Fr({logLoss_:function(t,e,n,s=1e-7,r=xp.SUM_BY_NONZERO_WEIGHTS){const a=Ar(t,"labels","logLoss"),i=Ar(e,"predictions","logLoss");let o=null;null!=n&&(o=Ar(n,"weights","logLoss")),Q(a.shape,i.shape,"Error in logLoss: ");const l=go(1),u=go(s),c=Cu(ro(a,Nu(eo(i,u)))),h=ro(ko(l,a),Nu(eo(ko(l,i),u))),p=ko(c,h);return wp(p,o,r)}});const Sp=Fr({meanSquaredError_:function(t,e,n,s=xp.SUM_BY_NONZERO_WEIGHTS){const r=Ar(t,"labels","meanSquaredError"),a=Ar(e,"predictions","meanSquaredError");let i=null;null!=n&&(i=Ar(n,"weights","meanSquaredError")),Q(r.shape,a.shape,"Error in meanSquaredError: ");const o=Hc(r,a);return wp(o,i,s)}});const Tp=Fr({sigmoidCrossEntropy_:function(t,e,n,s=0,r=xp.SUM_BY_NONZERO_WEIGHTS){let a=Ar(t,"multiClassLabels","sigmoidCrossEntropy");const i=Ar(e,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Ar(n,"weights","sigmoidCrossEntropy")),Q(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),s>0){const t=go(s),e=go(1),n=go(.5);a=eo(ro(a,ko(e,t)),ro(n,t))}const l=function(t,e){const n=Ar(t,"labels","sigmoidCrossEntropyWithLogits"),s=Ar(e,"logits","sigmoidCrossEntropyWithLogits");Q(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=xc(s),a=ro(s,n),i=Iu(tu(Cu(Io(s))));return eo(ko(r,a),i)}(a,i);return wp(l,o,r)}});const Ep=Fr({softmaxCrossEntropy_:function(t,e,n,s=0,r=xp.SUM_BY_NONZERO_WEIGHTS){let a=Ar(t,"onehotLabels","softmaxCrossEntropy");const i=Ar(e,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Ar(n,"weights","softmaxCrossEntropy")),Q(a.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const t=go(s),e=go(1),n=go(a.shape[1]);a=eo(ro(a,ko(e,t)),so(t,n))}const l=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was `+n);return fo((t,e,s)=>{const r=Ru(e,[n],!0),a=ko(Sa(e,"float32"),r);s([t,a]);const i=Cu(ro(a,t));return{value:$u(i,[n]),gradFunc:(t,e)=>{const[s,r]=e,a=Bo(t.shape,[n]);return[ro(ja(t,a),ko(Sa(s,"float32"),tu(r))),ro(ja(t,a),ko(tu(r),Sa(s,"float32")))]}}})(t,e)}(a,i);return wp(l,o,r)}}),$p={fft:Bc,ifft:Pc,rfft:Gc,irfft:Wc},Ap={hammingWindow:Gh,hannWindow:Hh,frame:jh,stft:qh},Rp={flipLeftRight:Xh,resizeNearestNeighbor:fp,resizeBilinear:dp,rotateWithOffset:Yh,cropAndResize:Kh,nonMaxSuppression:Zh,nonMaxSuppressionAsync:lp,nonMaxSuppressionWithScore:up,nonMaxSuppressionWithScoreAsync:cp,nonMaxSuppressionPadded:hp,nonMaxSuppressionPaddedAsync:pp},Dp={bandPart:mp,gramSchmidt:gp,qr:bp},Fp={absoluteDifference:vp,computeWeightedLoss:wp,cosineDistance:kp,hingeLoss:Np,huberLoss:Ip,logLoss:Cp,meanSquaredError:Sp,sigmoidCrossEntropy:Tp,softmaxCrossEntropy:Ep};class _p{static sgd(t){return new Ao(t)}static momentum(t,e,n=!1){return new Ro(t,e,n)}static rmsprop(t,e=.9,n=0,s=null,r=!1){return new Do(t,e,n,s,r)}static adam(t=.001,e=.9,n=.999,s=null){return new No(t,e,n,s)}static adadelta(t=.001,e=.95,n=null){return new bo(t,e,n)}static adamax(t=.002,e=.9,n=.999,s=null,r=0){return new $o(t,e,n,s,r)}static adagrad(t,e=.1){return new wo(t,e)}}const Op={sgd:_p.sgd,momentum:_p.momentum,adadelta:_p.adadelta,adagrad:_p.adagrad,rmsprop:_p.rmsprop,adamax:_p.adamax,adam:_p.adam},Mp="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:t=>t();function Lp(){return new Promise(t=>Mp(()=>t()))}function zp(t,e,n){return[n*("number"==typeof t?t:t[0]),e*("number"==typeof t?t:t[1])]}function Bp(t,e,n,s=!0){let r=[];if(s)r=r.concat(e.slice(0)),r.push(t[0]/n),r=r.concat(t.slice(1));else{r=r.concat(t[0]);const n=e.length;for(let s=0;s<n;++s)r=r.concat([t[s+1]/e[s],e[s]]);r=r.concat(t.slice(n+1))}return r}function Pp(t,e,n=!0){const s=[];if(n){s.push(e);for(let n=e+1;n<t;++n)n<=2*e?(s.push(n),s.push(n-(e+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<t;++s)s>=2*e+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function Wp(t,e,n,s=!0){const r=[];s?r.push(t[0]/n):r.push(t[0]*n);for(let n=1;n<t.length;++n)n<=e.length?s?r.push(e[n-1]*t[n]):r.push(t[n]/e[n-1]):r.push(t[n]);return r}function Vp(t,e){const n=[0];for(let s=0;s<e;++s)n.push(t[s][0]);return n}function Up(t,e,n){const s=t.slice(0,1);for(let r=0;r<n;++r)s.push(t[r+1]-e[r][0]-e[r][1]);return s}const Gp=1.7580993408473768,Hp=1.0507009873554805,jp=.3275911,qp=.254829592,Kp=-.284496736,Xp=1.421413741,Yp=-1.453152027,Jp=1.061405429;function Zp(...t){zt().getBool("IS_TEST")||console.warn(...t)}function Qp(...t){zt().getBool("IS_TEST")||console.log(...t)}function td(t,e){if(t.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);const n=new Float32Array(2*t.length);for(let s=0;s<n.length;s+=2)n[s]=t[s/2],n[s+1]=e[s/2];return n}function ed(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let s=0;s<t.length;s+=2)e[s/2]=t[s],n[s/2]=t[s+1];return{real:e,imag:n}}function nd(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),s=new Float32Array(e);for(let e=0;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],s[Math.floor(e/4)]=t[e+1];return{real:n,imag:s}}function sd(t){const e=Math.floor(t.length/4),n=new Float32Array(e),s=new Float32Array(e);for(let e=2;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],s[Math.floor(e/4)]=t[e+1];return{real:n,imag:s}}function rd(t,e){return{real:t[2*e],imag:t[2*e+1]}}function ad(t,e,n,s){t[2*s]=e,t[2*s+1]=n}function id(t,e){const n=new Float32Array(t/2),s=new Float32Array(t/2);for(let r=0;r<Math.ceil(t/2);r++){const a=(e?2:-2)*Math.PI*(r/t);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function od(t,e,n){const s=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(s),imag:Math.sin(s)}}function ld(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();const e=Bu(t.shape),s=Sa(t,"float32"),r=n.complex(s,e);return e.dispose(),s.dispose(),r}if(!bt(t.dtype,e))return Nr.makeTensorFromDataId(t.dataId,t.shape,e);if("complex64"===t.dtype){const s=n.real(t),r=Sa(s,e);return s.dispose(),r}if("int32"===e)return n.int(t);if("bool"===e){const e=go(0,t.dtype),s=n.notEqual(t,e);return e.dispose(),s}throw new Error(`Error in Cast: failed to cast ${t.dtype} to ${e}`)}function ud(t,e){return Nr.makeTensorFromDataId(t.dataId,e,t.dtype)}function cd(t,e,n){const s=(e-t)/(n-1),r=Rt(n,"float32");r[0]=t;for(let t=1;t<r.length;t++)r[t]=r[t-1]+s;return gc(r,"float32")}function hd(t,e,n){const s=new Array(t.rank).fill(0),r=t.shape.slice();return e.map(e=>{const a=[...r];a[n]=e;const i=bl(t,s,a);return s[n]+=e,i})}function pd(t,e){const n=new Array(t.rank);for(let s=0;s<n.length;s++)n[s]=t.shape[s]*e[s];const s=Ca(n,t.dtype);for(let e=0;e<s.values.length;++e){const n=s.indexToLoc(e),r=new Array(t.rank);for(let e=0;e<r.length;e++)r[e]=n[e]%t.shape[e];const a=t.locToIndex(r);s.values[e]=t.values[a]}return s.toTensor()}function dd(t,e,n,s,r){const a=e[e.length-1],[i,o]=[t.length/a,a],l=ft(n,i*s),u=ft("int32",i*s);for(let e=0;e<i;e++){const n=e*o,r=t.subarray(n,n+o),a=[];for(let t=0;t<r.length;t++)a.push({value:r[t],index:t});a.sort((t,e)=>e.value-t.value);const i=e*s,c=l.subarray(i,i+s),h=u.subarray(i,i+s);for(let t=0;t<s;t++)c[t]=a[t].value,h[t]=a[t].index}const c=e.slice();return c[c.length-1]=s,[Mr(l,c,n),Mr(u,c,"int32")]}const fd={kernelName:Ut,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ro(t,Kc(Sa(n,"float32"),-1))}}},md={kernelName:Gt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=io(Sa(n,"float32")),s=ao(ko(go(1),e));return Cu(so(t,s))}}}},gd={kernelName:Ht,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=ao(ko(io(Sa(n,"float32")),1));return so(t,e)}}}},yd={kernelName:jt,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=To(n.shape,s.shape);return{a:()=>{let e=t;const s=So(n.shape,r);return s.length>0&&(e=$u(e,s)),ja(e,n.shape)},b:()=>{let e=t;const n=So(s.shape,r);return n.length>0&&(e=$u(e,n)),ja(e,s.shape)}}}},bd={kernelName:qt,saveAllInputs:!0,gradFunc:(t,e)=>{const n={};return e.forEach((e,s)=>{n[s]=()=>t.clone()}),n}},xd={kernelName:Yt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>oo(n)}}},wd={kernelName:Jt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>oo(n)}}},vd={kernelName:Zt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>so(t,ao(ko(go(1),io(Sa(n,"float32")))))}}},kd={kernelName:Qt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=ao(eo(go(1),io(Sa(n,"float32"))));return so(t,e)}}}},Nd={kernelName:ne,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=To(n.shape,s.shape);return{a:()=>{const e=eo(io(n),io(s));let a=ro(t,so(s,e));const i=So(n.shape,r);return i.length>0&&(a=$u(a,i)),ja(a,n.shape)},b:()=>{const e=eo(io(n),io(s));let a=Cu(ro(t,so(n,e)));const i=So(s.shape,r);return i.length>0&&(a=$u(a,i)),ja(a,s.shape)}}}},Id={kernelName:te,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>so(t,eo(io(Sa(n,"float32")),1))}}},Cd={kernelName:ee,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>so(t,ko(go(1),io(Sa(n,"float32"))))}}};const Sd=Fr({avgPool3dBackprop_:function(t,e,n,s,r=[1,1,1],a,i){const o=Ar(t,"dy","avgPool3dBackprop"),l=Ar(e,"input","avgPool3dBackprop");let u=o,c=l,h=!1;4===l.rank&&(h=!0,u=ja(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=ja(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),Z(5===u.rank,()=>"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+u.rank+"."),Z(5===c.rank,()=>"Error in avgPool3dBackprop: input must be rank 5 but got rank "+c.rank+"."),Z(cl(s,r),()=>`Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ${s} and dilations '${r}'`),null!=i&&Z(at(a),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const p={dy:u,input:c},d={filterSize:n,strides:s,dilations:r,pad:a,dimRoundingMode:i},f=Nr.runKernelFunc(t=>{const e=el(c.shape,n,s,r,a,i);return t.avgPool3dBackprop(u,c,e)},p,null,ie,d);return h?ja(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),Td={kernelName:ae,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,{filterSize:r,strides:a,dilations:i,pad:o,dimRoundingMode:l}=n,u=null==i?[1,1,1]:i;return{x:()=>Sd(t,s,r,a,u,o,l)}}};const Ed=Fr({avgPoolBackprop_:function(t,e,n,s,r){const a=Ar(t,"dy","avgPoolBackprop"),i=Ar(e,"input","avgPoolBackprop");Z(i.rank===a.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`);let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=ja(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=ja(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Z(4===l.rank,()=>"Error in avgPoolBackprop: dy must be rank 4 but got rank "+l.rank+"."),Z(4===o.rank,()=>"Error in avgPoolBackprop: input must be rank 4 but got rank "+o.rank+".");const c={dy:l,input:o},h={filterSize:n,strides:s,pad:r},p=Nr.runKernelFunc(t=>{const e=tl(o.shape,n,s,1,r);return t.avgPoolBackprop(l,o,e)},c,null,re,h);return u?ja(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),$d={kernelName:se,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,{filterSize:r,strides:a,pad:i}=n;return{x:()=>Ed(t,s,r,a,i)}}},Ad={kernelName:oe,inputsToSave:["a","b"],gradFunc:(t,e,n)=>{const[s,r]=e,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>qa(t,r,!1,!1),b:()=>qa(t,s,!0,!1)}:a&&!i?{a:()=>qa(r,t,!1,!0),b:()=>qa(s,t,!1,!1)}:{a:()=>qa(r,t,!0,!0),b:()=>qa(t,s,!0,!0)}:{a:()=>qa(t,r,!1,!0),b:()=>qa(s,t,!0,!1)}}},Rd={kernelName:le,gradFunc:(t,e,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>rc(t,s,r)}}},Dd={kernelName:ue,gradFunc:(t,e,n)=>{const s=n,r=s.inputShape,a=s.shape,i=Array.from(a);for(let t=r.length-1;t>=0;t--)if(r[t]===a[t])i[t]=1;else if(1!==r[t])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const o=[];for(let t=0;t<i.length;t++)i[t]>1&&o.push(t);return{x:()=>$u(t,o,!0)}}},Fd={kernelName:ce,gradFunc:t=>({x:()=>t.clone()})},_d={kernelName:he,gradFunc:t=>({x:()=>oo(t)})},Od={kernelName:pe,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>Xl(Du(du(s,r),wu(s,a)),t,oo(t))}}},Md={kernelName:fe,saveAllInputs:!0,gradFunc:(t,e,n)=>{const s=e.map(t=>t.shape),{axis:r}=n,a=pt(r,e[0].shape)[0],i=s.map(t=>t[a]);return Uc(t,i,a).map(t=>()=>t)}},Ld={kernelName:me,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[s,r]=e,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return Z(ul(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>Ml(s.shape,t,r,i,o,l),filter:()=>_h(s,t,r.shape,i,o,l)}}},zd={kernelName:ye,inputsToSave:["dy","filter"],gradFunc:(t,e,n)=>{const[s,r]=e,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>_l(t,r,a,i,o,1,l),filter:()=>_h(t,s,r.shape,a,i,o,l)}}};const Bd=Fr({conv3DBackpropFilter_:function(t,e,n,s,r){let a=t;4===t.rank&&(a=ja(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]));let i=e;4===i.rank&&(i=ja(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),Z(5===a.rank,()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+a.shape+"."),Z(5===i.rank,()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+i.shape+"."),Z(5===n.length,()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."),Z(a.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`),Z(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`);const o={x:a,dy:i},l={strides:s,pad:r,filterShape:n};return Nr.runKernelFunc(t=>{const e=sl(a.shape,n,s,1,r);return t.conv3dDerFilter(a,i,e)},o,null,xe,l)}}),Pd={kernelName:be,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:s,strides:r,pad:a}=n;Z(ul(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const[i,o]=e;return{x:()=>Bl(i.shape,t,o,r,a),filter:()=>Bd(i,t,o.shape,r,a)}}},Wd={kernelName:ve,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ro(Cu(Dc(Sa(n,"float32"))),t)}}},Vd={kernelName:ke,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ro(Fc(Sa(n,"float32")),t)}}},Ud={kernelName:Ne,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const e=Wo([r],s.rank);let n=Ul(t,r,a,!i);return null!=e&&(n=Xa(n,e)),n}}}},Gd={kernelName:Se,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,o=null==s?[1,1]:s;Z(ul(o),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[l,u]=e;return Z(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),Z(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),Z(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),Z(cl(r,o),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`),null!=i&&Z(at(a),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`),{x:()=>Wh(l.shape,t,u,r,a,s,i),filter:()=>Ph(l,t,u.shape,r,a,s,i)}}},Hd={kernelName:Ae,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[s,r]=e,a={x:s,filter:r,dy:t},i={x:s,filter:r,dy:t};return{x:()=>Nr.runKernel(Re,a,n),filter:()=>Nr.runKernel(De,i,n)}}},jd={kernelName:Fe,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=To(n.shape,s.shape);return{a:()=>{const e=so(t,Sa(s,"float32")),a=So(n.shape,r);return a.length>0?ja($u(e,a),n.shape):e},b:()=>{let e=ro(t,Sa(n,"float32"));const a=So(s.shape,r);a.length>0&&(e=ja($u(e,a),s.shape));const i=io(s);return Cu(so(e,Sa(i,"float32")))}}}},qd={kernelName:_e,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e,s=e=>e.eluDer(t,n),r={dy:t,y:n};return{x:()=>Nr.runKernelFunc(s,r,null,Oe)}}},Kd={kernelName:Me,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,s=ro(tu(Cu(io(n))),2/Math.sqrt(Math.PI));return{x:()=>ro(t,s)}}},Xd={kernelName:ze,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ro(t,n)}}},Yd={kernelName:Be,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ro(t,tu(n))}}},Jd={kernelName:Ue,gradFunc:t=>({x:()=>oo(t)})},Zd={kernelName:Ge,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=To(n.shape,s.shape);return{a:()=>{const e=so(t,Sa(s,"float32")),a=So(n.shape,r);return a.length>0?ja($u(e,a),n.shape):e},b:()=>{let e=ro(t,Sa(n,"float32"));const a=So(s.shape,r);a.length>0&&(e=ja($u(e,a),s.shape));const i=io(s);return Cu(so(e,Sa(i,"float32")))}}}},Qd={kernelName:He,inputsToSave:["x","mean","variance","scale"],gradFunc:(t,e,n)=>{const{varianceEpsilon:s}=n,[r,a,i,o]=e,l=null==o?go(1):o,u=So(a.shape,r.shape),c=[];if(1===a.rank){for(let t=0;t<r.shape.length-1;++t)c.push(r.shape[t]);c.push(1)}const h=ko(r,a),p=ro(t,l),d=Tc(eo(i,go(s))),f=ro(ro(ro(d,d),d),go(-.5));return{x:()=>1===a.rank?ja(ro(ro(t,su(ja(d,[1,1,1,a.shape[0]]),c)),l),r.shape):ja(ro(ro(t,d),l),r.shape),mean:()=>{let t=ro(ro(d,go(-1)),p);return 1===a.rank&&(t=$u(t,u)),ja(t,a.shape)},variance:()=>{let t=ro(ro(f,h),p);return 1===a.rank&&(t=$u(t,u)),ja(t,a.shape)},scale:()=>{const e=ro(h,d);let n=ro(t,e);return 1===a.rank&&(n=$u(n,u)),ja(n,a.shape)},offset:()=>{let e=t;return 1===a.rank&&(e=$u(e,u)),ja(e,a.shape)}}}},tf={kernelName:je,inputsToSave:["x","indices"],gradFunc:(t,e,n)=>{const[s,r]=e,{axis:a}=n,i=pt(a,s.shape)[0];return{x:()=>{const e=s.shape,n=r.size,o=e.slice(0,i),l=o.length,u=e.slice(a,e.length).slice(1),c=u.length,h=ef(0,l),p=ef(l+1,l+1+c),d=nf([o,[n],u]),f=ja(t,d),m=ja(r,[n]),g=nf([[l],h,p]),y=Xa(f,g);let b=rh(y,m,s.shape[i]);const x=Vo(g);return b=Xa(b,x),b},indices:()=>r}}};function ef(t,e){const n=[];for(let s=t;s<e;++s)n.push(s);return n}function nf(t){const e=[];for(let n=0;n<t.length;++n)for(let s=0;s<t[n].length;++s)e.push(t[n][s]);return e}const sf={kernelName:Xe,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e;return{a:()=>oo(n),b:()=>oo(s)}}},rf={kernelName:Ye,gradFunc:t=>({x:()=>Sa(t,"float32")})},af={kernelName:Qe,gradFunc:t=>({x:()=>oo(t)})},of={kernelName:tn,gradFunc:t=>({x:()=>oo(t)})},lf={kernelName:en,gradFunc:t=>({x:()=>oo(t)})},uf={kernelName:on,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>so(t,eo(n,1))}}},cf={kernelName:an,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>so(t,Sa(n,"float32"))}}},hf={kernelName:hn,inputsToSave:[],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[s]=e,{axis:r}=n;return{logits:()=>{const e=tu(s);return ko(t,ro($u(t,r,!0),e))}}}};const pf=Fr({localResponseNormalizationBackprop_:function(t,e,n,s=5,r=1,a=1,i=.5){const o={x:t,y:e,dy:n},l={depthRadius:s,bias:r,alpha:a,beta:i};return Nr.runKernelFunc(o=>o.LRNGrad(n,t,e,s,r,a,i),o,null,dn,l)}}),df={kernelName:pn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[s,r]=e,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>pf(s,r,t,a,i,o,l)}}};function ff(t,e,n,s){return e.rank<n.rank&&(e=ja(e,Bo(e.shape,s))),t.rank<n.rank&&(t=ja(t,Bo(t.shape,s))),{x:()=>ro(t,Sa(Kl(n,e),t.dtype))}}const mf={kernelName:fn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const s=n,{reductionIndices:r}=s,a=e[0],i=ff(t,e[1],a,pt(r,a.shape));return{x:()=>i.x()}}},gf={kernelName:mn,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e;return{a:()=>ro(t,Sa(du(n,s),"float32")),b:()=>ro(t,Sa(xu(n,s),"float32"))}}};const yf=Fr({maxPool3dBackprop_:function(t,e,n,s,r,a=[1,1,1],i,o){const l=Ar(t,"dy","maxPool3dBackprop"),u=Ar(e,"input","maxPool3dBackprop"),c=Ar(n,"output","maxPool3dBackprop");let h=l,p=u,d=c,f=!1;4===u.rank&&(f=!0,h=ja(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=ja(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=ja(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),Z(5===h.rank,()=>"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+h.rank+"."),Z(5===p.rank,()=>"Error in maxPool3dBackprop: input must be rank 5 but got rank "+p.rank+"."),Z(5===d.rank,()=>"Error in maxPool3dBackprop: output must be rank 5 but got rank "+d.rank+"."),Z(cl(r,a),()=>`Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ${r} and dilations '${a}'`),null!=o&&Z(at(i),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`);const m={dy:h,input:p,output:d},g={filterSize:s,strides:r,dilations:a,pad:i,dimRoundingMode:o},y=Nr.runKernelFunc(t=>{const e=el(p.shape,s,r,a,i,o);return t.maxPool3dBackprop(h,p,d,e)},m,null,xn,g);return f?ja(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),bf={kernelName:bn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[s,r]=e,{filterSize:a,strides:i,dilations:o,pad:l,dimRoundingMode:u}=n,c=null==o?[1,1,1]:o;return{x:()=>yf(t,s,r,a,i,c,l,u)}}};const xf=Fr({maxPoolBackprop_:function(t,e,n,s,r,a,i){const o=Ar(t,"dy","maxPoolBackprop"),l=Ar(e,"input","maxPoolBackprop"),u=Ar(n,"output","maxPoolBackprop");Z(l.rank===o.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`),Z(4===o.rank,()=>"Error in maxPoolBackprop: dy must be rank 4 but got rank "+o.rank+"."),Z(4===l.rank,()=>"Error in maxPoolBackprop: input must be rank 4 but got rank "+l.rank+"."),null!=i&&Z(at(a),()=>`Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const c={dy:o,input:l,output:u},h={filterSize:s,strides:r,pad:a,dimRoundingMode:i};return Nr.runKernelFunc(t=>{const e=tl(l.shape,s,r,1,a,i);return t.maxPoolBackprop(o,l,u,e)},c,null,yn,h)}}),wf={kernelName:_n,inputsToSave:["x"],gradFunc:(t,e,n)=>{const s=e[0],{paddings:r}=n,a=r.map(t=>t[0]);return{x:()=>bl(t,a,s.shape)}}},vf={kernelName:us,gradFunc:(t,e,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>vl(t,s,r)}}},kf={kernelName:cs,gradFunc:(t,e,n)=>{const{axis:s}=n;return{x:()=>gl(t,s)}}};const Nf=[fd,md,gd,yd,bd,xd,wd,vd,kd,Nd,Id,Cd,Td,$d,Ad,Rd,Dd,Fd,_d,Od,Md,zd,Ld,Pd,Wd,Vd,Ud,Gd,Hd,jd,qd,Kd,Xd,Yd,Zd,Jd,Qd,tf,sf,rf,af,of,lf,uf,cf,hf,df,mf,mf,gf,bf,{kernelName:gn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[s,r]=e,{filterSize:a,strides:i,pad:o}=n;return{x:()=>xf(t,s,r,a,i,o)}}},{kernelName:kn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const s=n,{axis:r}=s,[a,i]=e,o=ff(t,i,a,pt(r,a.shape));return{x:()=>o.x()}}},{kernelName:Nn,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e;return{a:()=>ro(t,Sa(wu(n,s),"float32")),b:()=>ro(t,Sa(pu(n,s),"float32"))}}},{kernelName:In,inputsToSave:["x"],gradFunc:(t,e,n)=>{const s=e[0],{paddings:r}=n,a=r.map(t=>t[0]);return{x:()=>bl(t,a,s.shape)}}},{kernelName:Cn,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=To(n.shape,s.shape);return{a:()=>{const e=So(n.shape,r);return e.length>0?ja($u(t,e),n.shape):t},b:()=>{const e=ro(t,Cu(au(so(n,s)))),a=So(s.shape,r);return a.length>0?ja($u(e,a),s.shape):e}}}},{kernelName:Sn,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=To(n.shape,s.shape);return{a:()=>{const e=ro(t,Sa(s,"float32")),a=So(n.shape,r);return a.length>0?ja($u(e,a),n.shape):e},b:()=>{const e=ro(t,Sa(n,"float32")),a=So(s.shape,r);return a.length>0?ja($u(e,a),s.shape):e}}}},{kernelName:Tn,gradFunc:t=>({x:()=>Cu(t)})},{kernelName:Fn,inputsToSave:["indices"],gradFunc:(t,e)=>{const n=e[0];return{indices:()=>Bu(n.shape,"float32")}}},{kernelName:Dn,gradFunc:t=>({x:()=>oo(t)})},wf,wf,{kernelName:Mn,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(t,e)=>{const[n,s,r]=e,a=n,i=s,o=To(a.shape,i.shape);return{a:()=>{const e=Sa(i,"float32");let n=ro(t,ro(e,vo(a,ko(e,go(1)))));const s=So(a.shape,o);return s.length>0&&(n=$u(n,s)),ja(n,a.shape)},b:()=>{const e=pu(a,0),n=Xl(e,Nu(a),oo(a));let s=ro(t,ro(r,n));const l=So(i.shape,o);return l.length>0&&(s=$u(s,l)),ja(s,i.shape)}}}},{kernelName:Ln,inputsToSave:["x","alpha"],gradFunc:(t,e)=>{const[n,s]=e,r=pu(n,0);return{x:()=>Xl(r,t,ro(t,s)),alpha:()=>{let e=Xl(r,oo(t),ro(t,n));const a=So(s.shape,t.shape);return a.length>0&&(e=$u(e,a)),ja(e,s.shape)}}}},{kernelName:Wn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>so(t,Cu(io(n)))}}},{kernelName:Kn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,s=ro(wu(n,6),Kc(n));return{x:()=>ro(t,Sa(s,"float32"))}}},{kernelName:Vn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ro(t,Sa(Kc(n),"float32"))}}},{kernelName:Un,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ja(t,n.shape)}}},{kernelName:jn,inputsToSave:["images"],gradFunc:(t,e,n)=>{const[s]=e,r=e=>{const{alignCorners:r}=n;return e.resizeBilinearBackprop(t,s,r)},a={images:s};return{images:()=>Nr.runKernelFunc(r,a,null,qn,n)}}},{kernelName:Gn,inputsToSave:["images"],gradFunc:(t,e,n)=>{const[s]=e,r=e=>{const{alignCorners:r}=n;return e.resizeNearestNeighborBackprop(t,s,r)},a={images:s};return{images:()=>Nr.runKernelFunc(r,a,null,Hn,n)}}},{kernelName:Xn,gradFunc:(t,e,n)=>{const{dims:s}=n,r=pt(s,t.shape);return{x:()=>vc(t,r)}}},{kernelName:Yn,gradFunc:t=>({x:()=>oo(t)})},{kernelName:Jn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Cu(so(t,ro(vo(n,1.5),2)))}}},{kernelName:Qn,inputsToSave:["condition"],gradFunc:(t,e)=>{const[n]=e;return{condition:()=>Sa(oo(n),"float32"),t:()=>ro(t,Sa(n,t.dtype)),e:()=>ro(t,Sa(Fu(n),t.dtype))}}},{kernelName:ts,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=pu(n,go(0)),s=go(Gp),r=go(Hp),a=ro(t,r),i=ro(ro(t,s),tu(Sa(n,"float32")));return Xl(e,a,i)}}}},{kernelName:as,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ro(t,ro(n,ko(go(1),n)))}}},{kernelName:rs,gradFunc:t=>({x:()=>oo(t)})},{kernelName:ns,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ro(Wl(Sa(n,"float32")),t)}}},{kernelName:ss,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ro(Vl(Sa(n,"float32")),t)}}},{kernelName:es,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,{begin:r,size:a}=n,i=s.shape,[o,l]=xi(s,r,a),u=[];for(let e=0;e<t.rank;e++)u.push([o[e],i[e]-o[e]-l[e]]);return{x:()=>Qu(t,u)}}},{kernelName:hs,outputsToSave:[!0],gradFunc:(t,e,n)=>{const[s]=e,{dim:r}=n,a=ro(t,s);return{logits:()=>ko(a,ro($u(a,[r],!0),s))}}},{kernelName:is,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ro(t,yl(n))}}},vf,vf,kf,kf,{kernelName:os,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>so(t,ro(ao(Sa(n,"float32")),2))}}},{kernelName:ps,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=go(2);return{a:()=>ro(t,ro(r,ko(n,s))),b:()=>ro(t,ro(r,ko(s,n)))}}},{kernelName:ds,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ro(t,ro(Sa(n,"float32"),2))}}},{kernelName:Ss,gradFunc:t=>({x:()=>oo(t)})},{kernelName:fs,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=To(n.shape,s.shape);return{a:()=>{let e=t;const s=So(n.shape,r);return s.length>0&&(e=$u(e,s)),ja(e,n.shape)},b:()=>{let e=t;const n=So(s.shape,r);return n.length>0&&(e=$u(e,n)),ja(Cu(e),s.shape)}}}},{kernelName:ls,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,r=s.shape.slice(),{axis:a}=n;pt(a,s.shape).forEach(t=>{r[t]=1});const i=ja(t,r),o=ro(i,Pu(s.shape,"float32"));return{x:()=>o}}},{kernelName:ys,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>so(t,io(Wl(n)))}}},{kernelName:bs,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ro(ko(go(1),io(n)),t)}}},{kernelName:xs,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,{reps:r}=n;return{x:()=>{let e=oo(s);if(1===s.rank)for(let n=0;n<r[0];++n)e=eo(e,bl(t,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)e=eo(e,bl(t,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)e=eo(e,bl(t,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+s.rank+" tensors yet.");for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)e=eo(e,bl(t,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return e}}}},{kernelName:vs,gradFunc:(t,e,n)=>{const s=n,{perm:r}=s,a=Vo(r);return{x:()=>Xa(t,a)}}},{kernelName:Ns,gradFunc:(t,e,n)=>{const s=n,{axis:r}=s;return{value:()=>qc(t,r)}}},{kernelName:Is,inputsToSave:["segmentIds"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>function(t,e){const n=Eo(e,oo(e)),s=hu(t,n);let r=du(e,go(0,"int32"));const a=s.rank-r.rank;for(let t=0;t<a;++t)r=eu(r,t+1);r=Du(r,Pu(s.shape,"bool"));const i=oo(s);return Xl(r,s,i)}(t,n)}}},{kernelName:Cs,gradFunc:t=>({x:()=>oo(t)})}];for(const t of Nf)zs(t);let If;function Cf(){return null==If&&(If=Qi().epsilon()),If}ir.prototype.abs=function(){return this.throwIfDisposed(),Io(this)},ir.prototype.acos=function(){return this.throwIfDisposed(),Fo(this)},ir.prototype.acosh=function(){return this.throwIfDisposed(),_o(this)},ir.prototype.addStrict=function(t){return this.throwIfDisposed(),gh(this,t)},ir.prototype.add=function(t){return this.throwIfDisposed(),eo(this,t)},ir.prototype.all=function(t,e){return this.throwIfDisposed(),Go(this,t,e)},ir.prototype.any=function(t,e){return this.throwIfDisposed(),Ho(this,t,e)},ir.prototype.argMax=function(t){return this.throwIfDisposed(),jo(this,t)},ir.prototype.argMin=function(t){return this.throwIfDisposed(),qo(this,t)},ir.prototype.asScalar=function(){return this.throwIfDisposed(),Z(1===this.size,()=>"The array must have only 1 element."),ja(this,[])},ir.prototype.asType=function(t){return this.throwIfDisposed(),Sa(this,t)},ir.prototype.as1D=function(){return this.throwIfDisposed(),ja(this,[this.size])},ir.prototype.as2D=function(t,e){return this.throwIfDisposed(),ja(this,[t,e])},ir.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),ja(this,[t,e,n])},ir.prototype.as4D=function(t,e,n,s){return this.throwIfDisposed(),ja(this,[t,e,n,s])},ir.prototype.as5D=function(t,e,n,s,r){return this.throwIfDisposed(),ja(this,[t,e,n,s,r])},ir.prototype.asin=function(){return this.throwIfDisposed(),Ko(this)},ir.prototype.asinh=function(){return this.throwIfDisposed(),Xo(this)},ir.prototype.atan=function(){return this.throwIfDisposed(),Yo(this)},ir.prototype.atan2=function(t){return this.throwIfDisposed(),Jo(this,t)},ir.prototype.atanh=function(){return this.throwIfDisposed(),Zo(this)},ir.prototype.avgPool=function(t,e,n,s){return this.throwIfDisposed(),pl(this,t,e,n,s)},ir.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),vl(this,t,e)},ir.prototype.batchNorm=function(t,e,n,s,r){return this.throwIfDisposed(),Nl(this,t,e,n,s,r)},ir.prototype.broadcastTo=function(t){return this.throwIfDisposed(),Tl(this,t)},ir.prototype.cast=function(t){return this.throwIfDisposed(),Sa(this,t)},ir.prototype.ceil=function(){return this.throwIfDisposed(),El(this)},ir.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),$l(this,t,e)},ir.prototype.concat=function(t,e){return this.throwIfDisposed(),t instanceof ir&&(t=[t]),gl([this,...t],e)},ir.prototype.conv1d=function(t,e,n,s,r,a){return this.throwIfDisposed(),Ol(this,t,e,n,s,r,a)},ir.prototype.conv2dTranspose=function(t,e,n,s,r){return this.throwIfDisposed(),Ll(this,t,e,n,s,r)},ir.prototype.conv2d=function(t,e,n,s,r,a){return this.throwIfDisposed(),_l(this,t,e,n,s,r,a)},ir.prototype.cos=function(){return this.throwIfDisposed(),Wl(this)},ir.prototype.cosh=function(){return this.throwIfDisposed(),Vl(this)},ir.prototype.cumsum=function(t,e,n){return this.throwIfDisposed(),Ul(this,t,e,n)},ir.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),Gl(this,t,e)},ir.prototype.depthwiseConv2D=function(t,e,n,s,r,a){return Li("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),Hl(this,t,e,n,s,r,a)},ir.prototype.depthwiseConv2d=function(t,e,n,s,r,a){return this.throwIfDisposed(),Hl(this,t,e,n,s,r,a)},ir.prototype.dilation2d=function(t,e,n,s,r){return this.throwIfDisposed(),ql(this,t,e,n,s,r)},ir.prototype.divNoNan=function(t){return this.throwIfDisposed(),Yl(this,t)},ir.prototype.divStrict=function(t){return this.throwIfDisposed(),yh(this,t)},ir.prototype.div=function(t){return this.throwIfDisposed(),so(this,t)},ir.prototype.dot=function(t){return this.throwIfDisposed(),Jl(this,t)},ir.prototype.elu=function(){return this.throwIfDisposed(),Zl(this)},ir.prototype.equalStrict=function(t){return this.throwIfDisposed(),ch(this,t)},ir.prototype.equal=function(t){return this.throwIfDisposed(),Kl(this,t)},ir.prototype.erf=function(){return this.throwIfDisposed(),Ql(this)},ir.prototype.exp=function(){return this.throwIfDisposed(),tu(this)},ir.prototype.expandDims=function(t){return this.throwIfDisposed(),eu(this,t)},ir.prototype.expm1=function(){return this.throwIfDisposed(),nu(this)},ir.prototype.fft=function(){return this.throwIfDisposed(),Bc(this)},ir.prototype.flatten=function(){return this.throwIfDisposed(),ja(this,[this.size])},ir.prototype.floor=function(){return this.throwIfDisposed(),au(this)},ir.prototype.floorDiv=function(t){return this.throwIfDisposed(),no(this,t)},ir.prototype.gather=function(t,e){return this.throwIfDisposed(),hu(this,t,e)},ir.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),hh(this,t)},ir.prototype.greaterEqual=function(t){return this.throwIfDisposed(),du(this,t)},ir.prototype.greaterStrict=function(t){return this.throwIfDisposed(),ph(this,t)},ir.prototype.greater=function(t){return this.throwIfDisposed(),pu(this,t)},ir.prototype.ifft=function(){return this.throwIfDisposed(),Pc(this)},ir.prototype.irfft=function(){return this.throwIfDisposed(),Wc(this)},ir.prototype.isFinite=function(){return this.throwIfDisposed(),mu(this)},ir.prototype.isInf=function(){return this.throwIfDisposed(),gu(this)},ir.prototype.isNaN=function(){return this.throwIfDisposed(),yu(this)},ir.prototype.leakyRelu=function(t){return this.throwIfDisposed(),bu(this,t)},ir.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),dh(this,t)},ir.prototype.lessEqual=function(t){return this.throwIfDisposed(),wu(this,t)},ir.prototype.lessStrict=function(t){return this.throwIfDisposed(),fh(this,t)},ir.prototype.less=function(t){return this.throwIfDisposed(),xu(this,t)},ir.prototype.localResponseNormalization=function(t,e,n,s){return this.throwIfDisposed(),ku(this,t,e,n,s)},ir.prototype.logSigmoid=function(){return this.throwIfDisposed(),Tu(this)},ir.prototype.logSoftmax=function(t){return this.throwIfDisposed(),Au(this,t)},ir.prototype.logSumExp=function(t,e){return this.throwIfDisposed(),Ru(this,t,e)},ir.prototype.log=function(){return this.throwIfDisposed(),Nu(this)},ir.prototype.log1p=function(){return this.throwIfDisposed(),Iu(this)},ir.prototype.logicalAnd=function(t){return this.throwIfDisposed(),Du(this,t)},ir.prototype.logicalNot=function(){return this.throwIfDisposed(),Fu(this)},ir.prototype.logicalOr=function(t){return this.throwIfDisposed(),_u(this,t)},ir.prototype.logicalXor=function(t){return this.throwIfDisposed(),Ou(this,t)},ir.prototype.matMul=function(t,e,n){return this.throwIfDisposed(),qa(this,t,e,n)},ir.prototype.maxPool=function(t,e,n,s){return this.throwIfDisposed(),Mu(this,t,e,n,s)},ir.prototype.max=function(t,e){return this.throwIfDisposed(),Eu(this,t,e)},ir.prototype.maximumStrict=function(t){return this.throwIfDisposed(),bh(this,t)},ir.prototype.maximum=function(t){return this.throwIfDisposed(),Eo(this,t)},ir.prototype.mean=function(t,e){return this.throwIfDisposed(),Wu(this,t,e)},ir.prototype.min=function(t,e){return this.throwIfDisposed(),Vu(this,t,e)},ir.prototype.minimumStrict=function(t){return this.throwIfDisposed(),xh(this,t)},ir.prototype.minimum=function(t){return this.throwIfDisposed(),Uu(this,t)},ir.prototype.mirrorPad=function(t,e){return this.throwIfDisposed(),Gu(this,t,e)},ir.prototype.modStrict=function(t){return this.throwIfDisposed(),wh(this,t)},ir.prototype.mod=function(t){return this.throwIfDisposed(),Hu(this,t)},ir.prototype.mulStrict=function(t){return this.throwIfDisposed(),vh(this,t)},ir.prototype.mul=function(t){return this.throwIfDisposed(),ro(this,t)},ir.prototype.neg=function(){return this.throwIfDisposed(),Cu(this)},ir.prototype.norm=function(t,e,n){return this.throwIfDisposed(),Ch(this,t,e,n)},ir.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),mh(this,t)},ir.prototype.notEqual=function(t){return this.throwIfDisposed(),Xu(this,t)},ir.prototype.oneHot=function(t,e=1,n=0){return this.throwIfDisposed(),Ka(this,t,e,n)},ir.prototype.onesLike=function(){return this.throwIfDisposed(),Ju(this)},ir.prototype.pad=function(t,e){return this.throwIfDisposed(),Qu(this,t,e)},ir.prototype.pool=function(t,e,n,s,r){return this.throwIfDisposed(),ac(this,t,e,n,s,r)},ir.prototype.powStrict=function(t){return this.throwIfDisposed(),kh(this,t)},ir.prototype.pow=function(t){return this.throwIfDisposed(),vo(this,t)},ir.prototype.prelu=function(t){return this.throwIfDisposed(),ic(this,t)},ir.prototype.prod=function(t,e){return this.throwIfDisposed(),oc(this,t,e)},ir.prototype.reciprocal=function(){return this.throwIfDisposed(),bc(this)},ir.prototype.relu=function(){return this.throwIfDisposed(),xc(this)},ir.prototype.relu6=function(){return this.throwIfDisposed(),wc(this)},ir.prototype.reshapeAs=function(t){return this.throwIfDisposed(),ja(this,t.shape)},ir.prototype.reshape=function(t){return this.throwIfDisposed(),ja(this,t)},ir.prototype.resizeBilinear=function(t,e){return this.throwIfDisposed(),dp(this,t,e)},ir.prototype.resizeNearestNeighbor=function(t,e){return this.throwIfDisposed(),fp(this,t,e)},ir.prototype.reverse=function(t){return this.throwIfDisposed(),vc(this,t)},ir.prototype.rfft=function(){return this.throwIfDisposed(),Gc(this)},ir.prototype.round=function(){return this.throwIfDisposed(),Sc(this)},ir.prototype.rsqrt=function(){return this.throwIfDisposed(),Tc(this)},ir.prototype.selu=function(){return this.throwIfDisposed(),Ec(this)},ir.prototype.separableConv2d=function(t,e,n,s,r,a){return this.throwIfDisposed(),$c(this,t,e,n,s,r,a)},ir.prototype.sigmoid=function(){return this.throwIfDisposed(),yl(this)},ir.prototype.sign=function(){return this.throwIfDisposed(),Rc(this)},ir.prototype.sin=function(){return this.throwIfDisposed(),Dc(this)},ir.prototype.sinh=function(){return this.throwIfDisposed(),Fc(this)},ir.prototype.slice=function(t,e){return this.throwIfDisposed(),bl(this,t,e)},ir.prototype.softmax=function(t){return this.throwIfDisposed(),zc(this,t)},ir.prototype.softplus=function(){return this.throwIfDisposed(),Su(this)},ir.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),rc(this,t,e)},ir.prototype.split=function(t,e){return this.throwIfDisposed(),Uc(this,t,e)},ir.prototype.sqrt=function(){return this.throwIfDisposed(),ao(this)},ir.prototype.square=function(){return this.throwIfDisposed(),io(this)},ir.prototype.squaredDifference=function(t){return this.throwIfDisposed(),Hc(this,t)},ir.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),Nh(this,t)},ir.prototype.squeeze=function(t){return this.throwIfDisposed(),jc(this,t)},ir.prototype.stack=function(t,e){this.throwIfDisposed();const n=t instanceof ir?[this,t]:[this,...t];return qc(n,e)},ir.prototype.step=function(t){return this.throwIfDisposed(),Kc(this,t)},ir.prototype.stridedSlice=function(t,e,n,s,r,a,i,o){return this.throwIfDisposed(),Xc(this,t,e,n,s,r,a,i,o)},ir.prototype.subStrict=function(t){return this.throwIfDisposed(),Ih(this,t)},ir.prototype.sub=function(t){return this.throwIfDisposed(),ko(this,t)},ir.prototype.sum=function(t,e){return this.throwIfDisposed(),$u(this,t,e)},ir.prototype.tan=function(){return this.throwIfDisposed(),Yc(this)},ir.prototype.tanh=function(){return this.throwIfDisposed(),xl(this)},ir.prototype.tile=function(t){return this.throwIfDisposed(),su(this,t)},ir.prototype.toBool=function(){return this.throwIfDisposed(),Sa(this,"bool")},ir.prototype.toFloat=function(){return this.throwIfDisposed(),Sa(this,"float32")},ir.prototype.toInt=function(){return this.throwIfDisposed(),Sa(this,"int32")},ir.prototype.topk=function(t,e){return this.throwIfDisposed(),eh(this,t,e)},ir.prototype.transpose=function(t){return this.throwIfDisposed(),Xa(this,t)},ir.prototype.unique=function(t){return this.throwIfDisposed(),sh(this,t)},ir.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),rh(this,t,e)},ir.prototype.unstack=function(t){return this.throwIfDisposed(),ah(this,t)},ir.prototype.where=function(t,e){return this.throwIfDisposed(),Xl(t,this,e)},ir.prototype.zerosLike=function(){return this.throwIfDisposed(),oo(this)};class Sf extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Sf.prototype)}}class Tf extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Tf.prototype)}}class Ef extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Ef.prototype)}}class $f extends Error{constructor(t){super(t),Object.setPrototypeOf(this,$f.prototype)}}class Af extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Af.prototype)}}Error;function Rf(t,e){if(Array.isArray(t)){let n=[];for(let s=0;s<e;s++)n=n.concat(t);return n}{const n=new Array(e);return n.fill(t),n}}function Df(t,e){if(!t)throw new Af(e)}function Ff(t,e){let n=0;for(const s of t)s===e&&n++;return n}function _f(t){return 1===t.length?t[0]:t}function Of(t){return Array.isArray(t)?t:[t]}function Mf(t){const e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function Lf(t){return t.length<=1||-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}let zf={};function Bf(t){if(null==t)return null;const e={};return e.className=t.getClassName(),e.config=t.getConfig(),e}function Pf(t,e={},n={},s="object",r=!1){if("string"==typeof t){const r=t;let a;if(r in n)a=n[r];else if(r in zf)a=zf[r];else if(a=e[r],null==a)throw new Ef(`Unknown ${s}: ${t}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=t;if(null==a.className||null==a.config)throw new Ef(s+": Improper config format: "+JSON.stringify(a)+".\n'className' and 'config' must set.");const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in zf?[o,l]=zf.className:i in e&&([o,l]=e[i]),null==o)throw new Ef(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const t={};for(const e of Object.keys(zf))t[e]=zf[e];for(const e of Object.keys(n))t[e]=n[e];a.config.customObjects=t;const e=Object.assign({},zf);for(const t of Object.keys(n))zf[t]=n[t];!function t(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach(e=>t(e));else{const n=Object.keys(e);for(const s of n){const n=e[s];null!=n&&"object"==typeof n&&(Array.isArray(n)||"ndarray"!==n.type||"number"!=typeof n.value?t(n):e[s]=n.value)}}}(a.config);const s=l(o,a.config,n,r);return zf=Object.assign({},e),s}{const t=Object.assign({},zf);for(const t of Object.keys(n))zf[t]=n[t];const e=new o(a.config);return zf=Object.assign({},t),e}}}function Wf(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function Vf(t){if(null==t)return t;const e=[];for(const n of t)-1===e.indexOf(n)&&e.push(n);return e}function Uf(t){if(null==t)throw new Ef("Invalid value in obj: "+JSON.stringify(t));for(const e in t)if(t.hasOwnProperty(e))return!1;return!0}function Gf(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new Ef(`${n} is not a valid ${e}.  Valid values are ${t} or null/undefined.`)}function Hf(t,e,n=0,s=1/0){return Df(n>=0),Df(s>=n),Array.isArray(t)&&t.length>=n&&t.length<=s&&t.every(t=>typeof t===e)}function jf(t,e){Array.isArray(t)?(Z(t.length>0,()=>e+" is unexpectedly an empty array."),t.forEach((t,n)=>jf(t,`element ${n+1} of ${e}`))):Z(Number.isInteger(t)&&t>0,()=>`Expected ${e} to be a positive integer, but got `+function t(e){return null===e?"null":Array.isArray(e)?"["+e.map(e=>t(e)).join(",")+"]":"string"==typeof e?`"${e}"`:""+e}(t)+".")}function qf(t){return"relu"===t?"relu":"linear"===t?"linear":"elu"===t?"elu":null}function Kf(t,e){return Vi(()=>ao($u(ro(t,t),e,!0)))}class Xf extends wi{getConfig(){return{}}}class Yf extends Xf{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Vi(()=>{const e=Kf(t,this.axis),n=$l(e,0,this.maxValue);return ro(t,so(n,eo(Cf(),e)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Yf.className="MaxNorm",ki(Yf);class Jf extends Xf{constructor(t){super(),this.defaultAxis=0,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Vi(()=>so(t,eo(Cf(),Kf(t,this.axis))))}getConfig(){return{axis:this.axis}}}Jf.className="UnitNorm",ki(Jf);class Zf extends Xf{apply(t){return xc(t)}}Zf.className="NonNeg",ki(Zf);class Qf extends Xf{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=t.minValue?t.minValue:this.defaultMinValue,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.rate=null!=t.rate?t.rate:this.defaultRate,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Vi(()=>{const e=Kf(t,this.axis),n=eo(ro(this.rate,$l(e,this.minValue,this.maxValue)),ro(1-this.rate,e));return ro(t,so(n,eo(Cf(),e)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Qf.className="MinMaxNorm",ki(Qf);const tm={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function em(t){return Bf(t)}function nm(t,e={}){return Pf(t,vi.getMap().classNameMap,e,"constraint")}function sm(t){if(null==t)return null;if("string"==typeof t){return nm({className:t in tm?tm[t]:t,config:{}})}return t instanceof Xf?t:nm(t)}function rm(t){return new Yf(t)}function am(t){return new Jf(t)}function im(){return new Zf}function om(t){return new Qf(t)}const lm=["channelsFirst","channelsLast"],um=["valid","same","causal"],cm=["max","avg"],hm=["sum","mul","concat","ave"],pm=new Map;function dm(t){Gf(lm,"DataFormat",t)}function fm(t){Gf(um,"PaddingMode",t)}function mm(t){Gf(cm,"PoolMode",t)}const gm=[];function ym(t,e){gm.push(t);try{const t=e();return gm.pop(),t}catch(t){throw gm.pop(),t}}function bm(t){if(!vm(t))throw new Error("Not a valid tensor name: '"+t+"'");return(0===gm.length?"":gm.join("/")+"/")+t}function xm(t){if(!vm(t))throw new Error("Not a valid tensor name: '"+t+"'");pm.has(t)||pm.set(t,0);const e=pm.get(t);if(pm.set(t,pm.get(t)+1),e>0){const n=`${t}_${e}`;return pm.set(n,1),n}return t}const wm=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function vm(t){return!!t.match(wm)}function km(t,e,n){null==e&&(e=0),null==n&&(n=t.length);let s=1;for(let r=e;r<n;++r)s*=t[r];return s}function Nm(t){return gc(t=Array.isArray(t)?new Float32Array(t):t)}function Im(t){return Vu(Nm(t)).dataSync()[0]}function Cm(t){return Eu(Nm(t)).dataSync()[0]}function Sm(t,e){if(e<t)throw new Ef(`end (${e}) < begin (${t}) is forbidden.`);const n=[];for(let s=t;s<e;++s)n.push(s);return n}function Tm(t,e){return t.asType(e)}function Em(t,e=-1){const n=t.shape.slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),t.reshape(n)}function $m(t,e,n){return Vi(()=>{switch(t.rank){case 1:return _c(t,e,n);case 2:return Oc(t,[e,0],[n,t.shape[1]]);case 3:return Mc(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return Lc(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);case 5:return bl(t,[e,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return bl(t,[e,0,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new Ef("sliceAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}})}function Am(t,e,n){return Vi(()=>{switch(t.rank){case 1:return _c(t,e,n);case 2:return Oc(t,[0,e],[t.shape[0],n]);case 3:return Mc(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return Lc(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new Ef("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function Rm(t,e,n,s){return Vi(()=>{switch(t.rank){case 1:return _c(t,e,n);case 2:switch(s){case 1:return $m(t,e,n);case 2:return Am(t,e,n);default:throw new Ef("The axis is not within the rank of the tensor "+s)}case 3:switch(s){case 1:return $m(t,e,n);case 2:return Mc(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return Am(t,e,n);default:throw new Ef("The axis is not within the rank of the tensor "+s)}case 4:switch(s){case 1:return $m(t,e,n);case 2:return Lc(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return Lc(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return Am(t,e,n);default:throw new Ef("The axis is not within the rank of the tensor "+s)}default:throw new Ef("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function Dm(t,e=-1){let n;return e<0&&(n=t[0].rank,e=0!==n?n:0),e===t[0].rank&&(e=-1),gl(t,e)}function Fm(t,e){switch(t.rank){case 1:return Al([t,e]);case 2:return Rl([t,e],0);case 3:return Dl([t,e],0);case 4:return Fl([t,e],0);default:throw new Ef("concatAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}}function _m(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new Ef(`The length of input n (${e.length}) does not match the number of dimensions in input x (${t.rank})`);return su(t,e)}function Om(t,e=0,n=1,s,r){return fc(t,e,n,s,r)}function Mm(t,e,n,s){if(t.rank<2||e.rank<2)throw new $f(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${e.shape}`);if(e.rank>=3){if(t.shape.slice(-1)[0]!==e.shape.slice(-2)[0])throw new $f(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = `+e.shape)}if(2===t.rank&&2===e.rank){return Uh({a:t,b:e,transposeA:!1,transposeB:!1,bias:s?Bm(t.rank,s,"channelsLast"):null,activation:n})}{const r=t.shape.slice(),a=r.pop();t=t.reshape([-1,a]);const i=e.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:e.rank},(t,n)=>0===n?e.rank-2:n<=e.rank-2?n-1:n);e=e.transpose(c).reshape([l,-1]);const h=[...r,...u];return Uh({a:t,b:e,transposeA:!1,transposeB:!1,bias:s?Bm(t.rank,s,"channelsLast"):null,activation:n}).reshape(h)}}function Lm(t,e,n){return Vi(()=>(e=Array.isArray(e)?gc(e,"int32"):e.toInt(),hu(t,e,n)))}function zm(t){return ro(t,t)}function Bm(t,e,n){const s=e.shape;if(1!==e.rank&&e.rank!==t)throw new Ef("Unexpected bias dimensions: "+e.rank+"; expected it to be 1 or "+t);if(5===t){if("channelsFirst"===n)return 1===s.length?e.reshape([1,s[0],1,1,1]):e.reshape([1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?e.reshape([1,1,1,1,s[0]]):e.reshape([1].concat(s))}else if(4===t){if("channelsFirst"===n)return 1===s.length?e.reshape([1,s[0],1,1]):e.reshape([1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?e.reshape([1,1,1,s[0]]):e.reshape([1].concat(s))}else if(3===t){if("channelsFirst"===n)return 1===s.length?e.reshape([1,s[0],1]):e.reshape([1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?e.reshape([1,1,s[0]]):e.reshape([1].concat(s))}else if(t<3)return e;throw new Ef("Unsupported input rank by biasAdd: "+e.rank)}function Pm(t,e,n){return Vi(()=>(null==n&&(n="channelsLast"),dm(n),t.add(Bm(t.rank,e,n))))}function Wm(t,e,n,s){return Vi(()=>Ah(t,e,n,s))}function Vm(t,e,n=!1){return n?t():e()}const Um=["fanIn","fanOut","fanAvg"],Gm=["normal","uniform","truncatedNormal"];class Hm extends wi{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class jm extends Hm{apply(t,e){return Bu(t,e)}}jm.className="Zeros",ki(jm);class qm extends Hm{apply(t,e){return Pu(t,e)}}qm.className="Ones",ki(qm);class Km extends Hm{constructor(t){if(super(),"object"!=typeof t)throw new Ef("Expected argument of type ConstantConfig but got "+t);if(void 0===t.value)throw new Ef("config must have value set but got "+t);this.value=t.value}apply(t,e){return Vi(()=>ro(go(this.value),Pu(t,e)))}getConfig(){return{value:this.value}}}Km.className="Constant",ki(Km);class Xm extends Hm{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return mc(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Xm.className="RandomUniform",ki(Xm);class Ym extends Hm{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new $f(`randomNormal does not support dType ${e}.`);return Om(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Ym.className="RandomNormal",ki(Ym);class Jm extends Hm{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new $f(`truncatedNormal does not support dType ${e}.`);return nh(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Jm.className="TruncatedNormal",ki(Jm);class Zm extends Hm{constructor(t){super(),this.gain=null!=t.gain?t.gain:1}apply(t,e){return Vi(()=>{if(2!==t.length||t[0]!==t[1])throw new Ef("Identity matrix initializer can only be used for 2D square matrices.");return ro(this.gain,ru(t[0]))})}getConfig(){return{gain:this.gain}}}Zm.className="Identity",ki(Zm);class Qm extends Hm{constructor(t){if(super(),t.scale<0)throw new Ef("scale must be a positive float. Got: "+t.scale);var e;this.scale=null==t.scale?1:t.scale,this.mode=null==t.mode?"fanIn":t.mode,e=this.mode,Gf(Um,"FanMode",e),this.distribution=null==t.distribution?"normal":t.distribution,function(t){Gf(Gm,"Distribution",t)}(this.distribution),this.seed=t.seed}apply(t,e){const n=function(t,e="channelsLast"){let n,s;if(dm(e),2===t.length)n=t[0],s=t[1];else if(-1!==[3,4,5].indexOf(t.length)){if("channelsFirst"===e){const e=km(t,2);n=t[1]*e,s=t[0]*e}else if("channelsLast"===e){const e=km(t,0,t.length-2);n=t[t.length-2]*e,s=t[t.length-1]*e}}else{const e=km(t);n=Math.sqrt(e),s=Math.sqrt(e)}return[n,s]}(t),s=n[0],r=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,s):"fanOut"===this.mode?a/=Math.max(1,r):a/=Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(e=e||"float32")&&"int32"!==e)throw new $f(`${this.getClassName()} does not support dType ${e}.`);return nh(t,0,n,e,this.seed)}{const n=Math.sqrt(3*a);return mc(t,-n,n,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Qm.className="VarianceScaling",ki(Qm);class tg extends Qm{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Qm.className}}tg.className="GlorotUniform",ki(tg);class eg extends Qm{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Qm.className}}eg.className="GlorotNormal",ki(eg);class ng extends Qm{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Qm.className}}ng.className="HeNormal",ki(ng);class sg extends Qm{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Qm.className}}sg.className="HeUniform",ki(sg);class rg extends Qm{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Qm.className}}rg.className="LeCunNormal",ki(rg);class ag extends Qm{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Qm.className}}ag.className="LeCunNormal",ki(ag);class ig extends Hm{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=null==t.gain?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,null!=this.seed)throw new $f("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return Vi(()=>{if(t.length<2)throw new $f("Shape must be at least 2D.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);const e=Om(t[0]>t[1]?[t[1],t[0]]:t,0,1,"float32");let n=Dp.gramSchmidt(e);return t[0]>t[1]&&(n=n.transpose()),ro(this.gain,n)})}getConfig(){return{gain:this.gain,seed:this.seed}}}ig.className="Orthogonal",ki(ig);const og={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function lg(t,e={}){return Pf(t,vi.getMap().classNameMap,e,"initializer")}function ug(t){return Bf(t)}function cg(t){if("string"==typeof t){const e=t in og?og[t]:t;if("GlorotNormal"===e)return new eg;if("GlorotUniform"===e)return new tg;if("HeNormal"===e)return new ng;if("HeUniform"===e)return new sg;if("LeCunNormal"===e)return new rg;if("LeCunUniform"===e)return new ag;{const t={};return t.className=e,t.config={},lg(t)}}return t instanceof Hm?t:lg(t)}function hg(){return new jm}function pg(){return new qm}function dg(t){return new Km(t)}function fg(t){return new Xm(t)}function mg(t){return new Ym(t)}function gg(t){return new Jm(t)}function yg(t){return new Zm(t)}function bg(t){return new Qm(t)}function xg(t){return new tg(t)}function wg(t){return new eg(t)}function vg(t){return new ng(t)}function kg(t){return new sg(t)}function Ng(t){return new rg(t)}function Ig(t){return new ag(t)}function Cg(t){return new ig(t)}let Sg=0;function Tg(){return Sg++}const Eg={};function $g(t=""){return t in Eg||(Eg[t]=0),Eg[t]+=1,t+Eg[t].toString()}function Ag(t){return Array.isArray(t)&&Array.isArray(t[0])}function Rg(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function Dg(t){let e;if(Array.isArray(t)){if(1!==t.length)throw new Ef("Expected Tensor length to be 1; got "+t.length);e=t[0]}else e=t;return e}function Fg(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return(t=t)[0];throw new Ef("Expected exactly 1 Shape; got "+t.length)}return t}function _g(t){let e=0;for(const n of t)0===n.shape.length?e+=1:e+=n.shape.reduce((t,e)=>t*e);return e}class Og{constructor(t,e="float32",n="Variable",s=!0,r=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=Tg(),n=null==n?"Variable":n,this.originalName=bm(n),this.name=xm(this.originalName),this.trainable_=s,this.constraint=r,this.val=ih(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function Mg(t){return t.map(t=>t.read())}function Lg(t){t.forEach(t=>{t[0].write(t[1])})}class zg{constructor(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class Bg{constructor(t,e,n,s,r,a,i){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=Tg(),null!=a&&(this.originalName=bm(a),this.name=xm(this.originalName)),this.rank=e.length}}let Pg=0;class Wg{constructor(t,e){this.callArgs=e,this.id=Pg++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const e of t.inboundLayers)null!=e&&e.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)null!=e?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Vg=0;class Ug extends wi{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Vg++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const t=this.getClassName();e=Mf(t)+"_"+$g(t)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let e;if(null!=t.batchInputShape)e=t.batchInputShape;else if(null!=t.inputShape){let n=null;null!=t.batchSize&&(n=t.batchSize),e=[n].concat(t.inputShape)}this.batchInputShape=e;let n=t.dtype;null==n&&(n=t.inputDType),null==n&&(n="float32"),this.dtype=n}null!=t.weights?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new Tf(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new Ef(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return _f(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return _f(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Sf("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new Sf("Layer "+this.name+" is not connected, no input to return.");return _f(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Sf("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new Sf("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return _f(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=Of(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=Of(this.inputSpec);if(t.length!==e.length)throw new Ef(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: `+t);for(let n=0;n<t.length;n++){const s=t[n],r=e[n];if(null==r)continue;const a=s.rank;if(null!=r.ndim&&a!==r.ndim)throw new Ef(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new Ef(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new Ef(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new Ef(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const t=s.shape;for(const e in r.axes){const s=Number(e),a=r.axes[e],i=s>=0?t[s]:t[t.length+s];if(null!=a&&-1===[a,null].indexOf(i))throw new Ef(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=r.shape)for(let t=0;t<r.shape.length;++t){const e=r.shape[t],a=s.shape[t];if(null!=e&&null!=a&&e!==a)throw new Ef(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const n=Of(t);let s=!0;for(const t of n)if(!(t instanceof Bg)){s=!1;break}let r=!0;for(const t of n)if(t instanceof Bg){r=!1;break}if(s===r)throw new Ef("Arguments to apply() must be all SymbolicTensors or all Tensors");return ym(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const e=[];for(const n of Of(t))e.push(n.shape);this.build(_f(e)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(t),r){let s=this.call(t,e);const r=Of(s),a=[];for(let t of r)-1!==n.indexOf(t)&&(t=t.clone()),a.push(t);if(s=_f(a),null!=this.activityRegularizer)throw new $f("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(t){t=Of(t);const e=[];for(const n of t)e.push(n.shape);return _f(e)}(t),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map((n,s)=>new Bg(a,n,this,Of(t),e,this.name,s)):new Bg(a,s,this,Of(t),e,this.name),this.addInboundNode(t,r,null,null,n,s,e),this._refCount++,null!=this.activityRegularizer)throw new $f("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+JSON.stringify(t)+") does not match that of the "+`batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer `+this.name);else{let e=!1;this.batchInputShape.forEach((n,s)=>{null!=n&&null!=t[s]&&t[s]!==n&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: `+JSON.stringify(this.batchInputShape))}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Sf(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const n=JSON.stringify(e.outputShapes);-1===t.indexOf(n)&&t.push(n)}if(1===t.length){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&1===t.length?t[0]:t}throw new Sf(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Tf(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return _g(this.weights)}build(t){this.built=!0}getWeights(t=!1){return Mg(t?this.trainableWeights:this.weights)}setWeights(t){Vi(()=>{const e=this.weights;if(e.length!==t.length)throw new Ef(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const n=[],s=Mg(e);for(let r=0;r<s.length;++r){const a=s[r],i=e[r],o=t[r];if(!rt(a.shape,o.shape))throw new Ef(`Layer weight shape ${a.shape} not compatible with provided weight shape `+o.shape);n.push([i,o])}Lg(n)})}addWeight(t,e,n,s,r,a,i){if(-1!==this._addedWeightNames.indexOf(t))throw new Ef(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=cg("zeros"));const o=s.apply(e,n),l=new Og(o,n,t,a,i);return o.dispose(),null!=r&&this.addLoss(()=>r.apply(l.read())),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=Of(t),void 0!==this._losses&&null!==this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(t=>{if(null!=t)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}addInboundNode(t,e,n,s,r,a,i=null){const o=Of(t);e=Of(e),n=Of(n),s=Of(s),r=Rg(r),a=Rg(a);const l=[],u=[],c=[];for(const t of o)l.push(t.sourceLayer),u.push(t.nodeIndex),c.push(t.tensorIndex);new Wg({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:e,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let t=0;t<e.length;t++)e[t].sourceLayer=this,e[t].nodeIndex=this.inboundNodes.length-1,e[t].tensorIndex=t}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}class Gg extends Ug{constructor(t){if(super({dtype:t.dtype,name:null!=t.name?t.name:$g("input").toString()}),null==t.batchSize&&(t.batchSize=null),null==t.sparse&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,null!=t.inputShape&&null!=t.batchInputShape)throw new Ef("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(null==e){if(null==t.inputShape)throw new Ef("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(null!=t.batchSize)throw new Ef("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=t.dtype||"float32";this.batchInputShape=e,this.dtype=n,this.inputSpec=[{shape:e}];const s=new Bg(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new Wg({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new Ef("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function Hg(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new Ef("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));let n=t.dtype;null==n&&(n="float32");return new Gg({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}async function jg(t){if(null==t)return;const e=[],n=[],s=[];for(const r in t){const a=t[r];if("number"!=typeof a){const t=a;e.push(t.data()),n.push(r),s.push(t)}}if(e.length>0){const r=await Promise.all(e);for(let e=0;e<r.length;++e)t[n[e]]=r[e][0];Ui(s)}}function qg(t){if(null!=t)for(const e in t){const n=t[e];"number"!=typeof n&&n.dispose()}}var Kg;Gg.className="InputLayer",ki(Gg),function(t){t[t.SILENT=0]="SILENT",t[t.VERBOSE=1]="VERBOSE"}(Kg||(Kg={}));class Xg{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}}class Yg{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochBegin(t,e)}async onEpochEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochEnd(t,e)}async onBatchBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchBegin(t,e)}async onBatchEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchEnd(t,e)}async onTrainBegin(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainEnd(t)}}class Jg extends Xg{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){null==e&&(e={});const n=null==e.size?0:e.size;this.seen+=n;for(const t in e){const s=e[t];if("number"==typeof s)this.totals.hasOwnProperty(t)||(this.totals[t]=0),this.totals[t]=this.totals[t]+s*n;else{let e;t in this.totals?e=this.totals[t]:this.totals[t]=0;const r=Vi(()=>eo(this.totals[t],ro(s,n)));this.totals[t]=r,null!=e&&e.dispose()}}}async onEpochEnd(t,e){if(null!=e)for(const t of this.params.metrics)null!=this.totals[t]&&("number"==typeof this.totals[t]?e[t]=this.totals[t]/this.seen:Vi(()=>{const n=ro(so(1,this.seen),this.totals[t]);e[t]=n,this.totals[t].dispose(),Gi(e[t])}))}}class Zg extends Xg{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){null==e&&(e={}),this.epoch.push(t);for(const t in e)null==this.history[t]&&(this.history[t]=[]),this.history[t].push(e[t])}async syncData(){const t=[],e=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)if("number"!=typeof r[a]){const i=r[a];t.push(i.data()),e.push(s),n.push(a)}}const s=await Promise.all(t);for(let t=0;t<s.length;++t){this.history[e[t]][n[t]].dispose(),this.history[e[t]][n[t]]=s[t][0]}}}class Qg extends Xg{constructor(t,e){if(super(),this.currentEpoch=0,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");It(this.yieldEvery)&&(this.maybeWait=function(t,e){let n,s=Zs();return(...r)=>{const a=Zs();return a-s<e||(s=a,n=t(...r)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,n){const s=[];null!=this.yield&&(await jg(n),s.push(this.yield(t,e,n))),s.push(Lp()),await Promise.all(s)}async onEpochBegin(t,e){this.currentEpoch=t,null!=this.epochBegin&&(await jg(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){const n=[];null!=this.epochEnd&&(await jg(e),n.push(this.epochEnd(t,e))),"epoch"===this.yieldEvery&&n.push(Lp()),await Promise.all(n)}async onBatchBegin(t,e){null!=this.batchBegin&&(await jg(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){const n=[];null!=this.batchEnd&&(await jg(e),n.push(this.batchEnd(t,e))),"batch"===this.yieldEvery?n.push(Lp()):It(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(n)}async onTrainBegin(t){null!=this.trainBegin&&(await jg(t),await this.trainBegin(t))}async onTrainEnd(t){null!=this.trainEnd&&(await jg(t),await this.trainEnd(t))}}function ty(t,e){if(null==t&&(t={}),t instanceof Xg)return[t];if(Array.isArray(t)&&t[0]instanceof Xg)return t;return Of(t).map(t=>new Qg(t,e))}class ey{constructor(){}static registerCallbackConstructor(t,e){Z(t>=0&&Number.isInteger(t),()=>"Verbosity level is expected to be an integer >= 0, but got "+t),ey.checkForDuplicate(e),null==ey.constructors[t]&&(ey.constructors[t]=[]),ey.constructors[t].push(e)}static checkForDuplicate(t){for(const e in ey.constructors){ey.constructors[+e].forEach(e=>{if(e===t)throw new Ef("Duplicate callback constructor.")})}}static clear(){ey.constructors={}}static createCallbacks(t){const e=[];for(const n in ey.constructors){const s=+n;t>=s&&e.push(...ey.constructors[s])}return e.map(t=>new t)}}function ny(t,e,n,s,r,a,i,o,l){const u=new Zg,c=[new Jg,...ey.createCallbacks(e)];null!=t&&c.push(...t),c.push(u);const h=new Yg(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:e,doValidation:o,metrics:l}),{callbackList:h,history:u}}function sy(t,e={},n=!1){return Pf(t,vi.getMap().classNameMap,e,"layer",n)}function ry(t,e){return Vi(()=>{"float32"!==t.dtype&&(t=t.asType("float32"));const n=$u(zm(t),e,!0),s=xo(n.shape,Cf()),r=ao(Eo(n,s));return so(t,r)})}function ay(t,e){return Vi(()=>Wu(zm(ko(e,t)),-1))}function iy(t,e){return Vi(()=>Wu(Io(ko(e,t)),-1))}function oy(t,e){return Vi(()=>{const n=ko(t,e),s=$l(Io(t),Cf(),Number.MAX_VALUE),r=Io(so(n,s));return ro(100,Wu(r,-1))})}function ly(t,e){return Vi(()=>{const n=$l(e,Cf(),Number.MAX_VALUE),s=Nu(eo(1,n)),r=$l(t,Cf(),Number.MAX_VALUE),a=Nu(eo(1,r));return Wu(zm(ko(s,a)),-1)})}function uy(t,e,n=!1){return Vi(()=>{if(n)e=zc(e);else{const t=$u(e,e.shape.length-1,!0);e=so(e,t)}return e=$l(e,Cf(),1-Cf()),Cu($u(ro(t.toFloat(),Nu(e)),e.shape.length-1))})}function cy(t,e,n=!1){return Vi(()=>{const s=au(function(t){const e=[km(t.shape)];return t.reshape(e)}(t)).toInt(),r=(e=$l(e,Cf(),1-Cf())).shape;return uy(Ka(s,r[r.length-1]).reshape(r),e,n)})}function hy(t,e){return Vi(()=>{let n;return n=$l(e,Cf(),1-Cf()),n=Nu(so(n,ko(1,n))),Wu(function(t,e){if(!rt(t.shape,e.shape))throw new Ef(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(e.shape)}`);return Vi(()=>{const n=e.relu(),s=e.abs().neg();return n.sub(e.mul(t)).add(s.exp().log1p())})}(t,n),-1)})}function py(t,e){return Vi(()=>{const n=$l(t,Cf(),1),s=$l(e,Cf(),1);return $u(ro(t,Nu(so(n,s))),-1)})}function dy(t,e){return Vi(()=>{const n=ry(t,-1),s=ry(e,-1),r=ro(n,s);return Cu($u(r,-1))})}ey.constructors={};const fy={meanSquaredError:ay,meanAbsoluteError:iy,meanAbsolutePercentageError:oy,meanSquaredLogarithmicError:ly,squaredHinge:function(t,e){return Vi(()=>{const n=Eo(0,ko(1,ro(t,e)));return Wu(zm(n),-1)})},hinge:function(t,e){return Vi(()=>{const n=Eo(0,ko(1,ro(t,e)));return Wu(n,-1)})},categoricalHinge:function(t,e){return Vi(()=>{const n=$u(ro(t,e),-1),s=Eu(ro(ko(1,t),e),-1);return Eo(0,eo(1,ko(s,n)))})},logcosh:function(t,e){return Vi(()=>{const n=Math.log(2),s=ko(e,t),r=ko(eo(s,Su(ro(-2,s))),n);return Wu(r,-1)})},categoricalCrossentropy:uy,sparseCategoricalCrossentropy:cy,binaryCrossentropy:hy,kullbackLeiblerDivergence:py,poisson:function(t,e){return Vi(()=>{const n=Nu(eo(Cf(),e));return Wu(ko(e,ro(t,n)),-1)})},cosineProximity:dy};function my(t){if("string"==typeof t){if(t in fy)return fy[t];let e="Unknown loss "+t;throw t.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${t}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Ef(e)}return t}function gy(t,e){return Vi(()=>{const n=ro(.5,Ju(e)),s=Tm(pu(e,n),t.dtype);return Wu(Kl(t,s),-1)})}function yy(t,e){return Vi(()=>Tm(Kl(jo(t,-1),jo(e,-1)),"float32"))}function by(t,e){return Vi(()=>Du(t.equal(1),e.equal(1)).sum().cast("float32"))}function xy(t,e){return Vi(()=>{const n=by(t,e),s=function(t,e){return Vi(()=>Du(t.equal(0),e.equal(1)).sum().cast("float32"))}(t,e),r=n.add(s);return Xl(pu(r,0),n.div(r),0).cast("float32")})}function wy(t,e){return Vi(()=>{const n=by(t,e),s=function(t,e){return Vi(()=>Du(t.equal(1),e.equal(0)).sum().cast("float32"))}(t,e),r=n.add(s);return Xl(pu(r,0),n.div(r),0).cast("float32")})}function vy(t,e){return hy(t,e)}function ky(t,e){return t.rank===e.rank&&(t=t.squeeze([t.rank-1])),(e=e.argMax(-1)).dtype!==t.dtype&&(e=e.asType(t.dtype)),Kl(t,e).asType("float32")}const Ny=uy,Iy=cy,Cy={binaryAccuracy:gy,categoricalAccuracy:yy,precision:xy,categoricalCrossentropy:Ny,sparseCategoricalCrossentropy:Iy,mse:ay,MSE:ay,mae:iy,MAE:iy,mape:oy,MAPE:oy,cosine:dy};function Sy(t){if("string"==typeof t&&t in Cy)return Cy[t];if("string"!=typeof t&&null!=t)return t;throw new Ef("Unknown metric "+t)}function Ty(t){if(Df(null!==t,"Unknown LossOrMetricFn "+t),"string"==typeof t)return t;{let e;for(const n of Object.keys(fy))if(fy[n]===t){e=n;break}if(void 0!==e)return e;for(const n of Object.keys(Cy))if(Cy[n]===t){e=n;break}return void 0!==e?e:t.name}}function Ey(t,e,n=!1){if(null==t||"object"!=typeof t||Object.getPrototypeOf(t)!==Object.prototype||!function t(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const n=Object.keys(e);for(const s of n){if("string"!=typeof s)return!1;if(!t(e[s]))return!1}return!0}if(Array.isArray(e)){for(const n of e)if(!t(n))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}(t))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(t);n.length>1048576&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function $y(t,e,n,s=console.log){const r=function(t){let e=!0;const n=[],s=[];for(const e in t.nodesByDepth)n.push(t.nodesByDepth[e]);for(const t of n){if(t.length>1||1===t.length&&t[0].inboundLayers.length>1){e=!1;break}s.push(...t)}if(e)for(const n of t.layers){let t=!1;for(const r of n.inboundNodes)if(-1!==s.indexOf(r)){if(t){e=!1;break}t=!0}if(!e)break}return e}(t),a=["Layer (type)","Output shape","Param #"];let i;if(r?(e=e||65,n=n||[.45,.85,1]):(e=e||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map(t=>Math.floor(e*t))),!r){a.push("Receives inputs"),i=[];for(const e in t.nodesByDepth)i.push(...t.nodesByDepth[e])}s("_".repeat(e)),Ay(a,n,s),s("=".repeat(e));const o=t.layers;for(let t=0;t<o.length;++t)r?Ry(o[t],n,s):Dy(o[t],n,i,s),s((t===o.length-1?"=":"_").repeat(e));t.checkTrainableWeightsConsistency();const l=function(t){let e;e=null!=t.collectedTrainableWeights?_g(t.collectedTrainableWeights):_g(t.trainableWeights);return e}(t),u=_g(t.nonTrainableWeights);s("Total params: "+(l+u)),s("Trainable params: "+l),s("Non-trainable params: "+u),s("_".repeat(e))}function Ay(t,e,n=console.log){let s="";for(let n=0;n<t.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=t[n],s=s.slice(0,e[n]),s+=" ".repeat(e[n]-s.length);n(s)}function Ry(t,e,n){let s;try{s=JSON.stringify(t.outputShape)}catch(t){s="multiple"}Ay([`${t.name} (${t.getClassName()})`,s,t.countParams().toString()],e,n)}function Dy(t,e,n,s){let r;try{r=JSON.stringify(t.outputShape)}catch(t){r="multiple"}const a=[];for(const e of t.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(e)))for(let t=0;t<e.inboundLayers.length;++t){const n=e.inboundLayers[t].name,s=e.nodeIndices[t],r=e.tensorIndices[t];a.push(`${n}[${s}][${r}]`)}const i=t.name,o=t.getClassName(),l=0===a.length?"":a[0];Ay([`${i} (${o})`,r,t.countParams().toString(),l],e,s);for(let t=1;t<a.length;++t)Ay(["","","",a[t]],e,s)}function Fy(t,e,n){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"==typeof n}function _y(t,e){if(null===t)return null;if("string"==typeof t)return Lf(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const n=[],s=t.length;for(let r=0;r<s;++r){const s=t[r];Fy(e,r,s)?n.push(s):n.push(_y(s,e))}return n}{const e={};for(const n of Object.keys(t)){const s=t[n];if("name"===n&&"string"==typeof s)e[n]=s;else{const t=Lf(n);e[t]=_y(s,t)}}return e}}const Oy="2.7.0";class My{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof My)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,n){if(null!=this.id2Value[t.id])throw new Ef(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return Sa(e,t.dtype)}catch(n){throw new Ef(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=n&&(this.id2Mask[t.id]=n),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof Bg){if(null==this.id2Value[t.id])throw new Ef("Nonexistent key: "+t.name);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new Ef("Feed dict has no SymbolicTensor name: "+t);return this.id2Value[e]}}getMask(t){if(t instanceof Bg){if(null==this.id2Value[t.id])throw new Ef("Nonexistent key: "+t.name);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new Ef("Feed dict has no SymbolicTensor name: "+t);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&Ui(this.id2Mask)}}const Ly={},zy={};function By(t,e,n,s){const r=null!=n&&n.training,a=Array.isArray(t),i=a?t:[t],o=i.map(t=>t.name),l=[],u=e.names();for(const t of o)-1!==u.indexOf(t)?l.push(e.getValue(t)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=o.join(",")+"|"+e.names().join(",");let h,p;if(null==Ly[c]){const t=function(t,e){Z(null!=t&&t.length>0,()=>"Expected at least one fetch, got none");let n=[],s={};if(1===t.length){const r=Wy(t[0],e);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of t){const{sorted:t,recipientMap:i}=Wy(a,e);for(const e of t)r.has(e.name)||(n.push(e),r.add(e.name));for(const t in i)null==s[t]&&(s[t]=new Set),i[t].forEach(e=>s[t].add(e))}}return{sorted:n,recipientCounts:Py(s)}}(i,e);h=t.sorted,p=t.recipientCounts,Ly[c]=h,zy[c]=p}h=Ly[c],p={},r||Object.assign(p,zy[c]);const d=new My(e);for(let t=0;t<h.length;++t){if(null!=s){const t=Pi().numTensors;t>s.maxNumTensors&&(s.maxNumTensors=t),t<s.minNumTensors&&(s.minNumTensors=t)}const a=h[t],i=a.sourceLayer;if(i instanceof Gg)continue;const u=[],c=[],f=[];let m=!1;for(const t of a.inputs){const n=d.getValue(t),s=d.getMask(t);u.push(n),c.push(s),null!=s&&(m=!0),r||(p[t.name]--,0!==p[t.name]||e.hasKey(t)||-1!==o.indexOf(t.name)||n.isDisposed||!0===t.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=Of(i.apply(u,n));let y=null;i.supportsMasking&&(y=i.computeMask(u,c));const b=Vy(a),x=Array.isArray(b)?b:[b];for(let t=0;t<x.length;++t){d.hasKey(x[t])||d.add(x[t],g[t],Array.isArray(y)?y[0]:y);const e=o.indexOf(x[t].name);-1!==e&&(l[e]=g[t])}r||Ui(f)}return d.disposeMasks(),a?l:l[0]}function Py(t){const e={};for(const n in t)e[n]=t[n].size;return e}function Wy(t,e){const n=new Set,s=[],r={};for(const t of e.names())n.add(t);const a=[],i=[];for(a.push(t);a.length>0;){const t=a[a.length-1];if(n.has(t.name)){a.pop();continue}const e=i[i.length-1]===a.length-1;if(0===t.inputs.length||e)a.pop(),s.push(t),n.add(t.name),e&&i.pop();else{i.push(a.length-1);for(const e of t.inputs)null==r[e.name]&&(r[e.name]=new Set),r[e.name].add(t.name),n.has(e.name)||a.push(e)}}return{sorted:s,recipientMap:r}}function Vy(t){let e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{let n=null;for(let e=0;e<t.sourceLayer.inboundNodes.length;++e)for(const s of t.sourceLayer.inboundNodes[e].outputTensors)if(s.id===t.id){n=e;break}e=t.sourceLayer.getOutputAt(n)}return e}class Uy extends Ug{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const t=this.getClassName().toLowerCase();this.name=$g(t)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],Vf(this.inputs).length!==this.inputs.length)throw new Ef("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+this.inputs.map(t=>t.name));Vf(this.outputs).length!==this.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+this.outputs.map(t=>t.name)),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const t of this.outputs){const e=t.sourceLayer,n=t.nodeIndex,s=t.tensorIndex;this.outputLayers.push(e),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const t of this.inputs){const e=t.sourceLayer,n=t.nodeIndex,s=t.tensorIndex;Df(0===n,"input layer has >1 nodes"),Df(0===s,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e];if(!(n instanceof Gg))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${e} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const t of this.outputLayers)this.outputNames.push(t.name);this.internalInputShapes=this.inputs.map(t=>t.shape),this.internalOutputShapes=this.outputs.map(t=>t.shape);const e={},n={},s={},r={},a={},i=[],o=(t,e,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=t.sourceLayer,r=t.nodeIndex,l=t.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new Tf(`The tensor ${t.name} at layer "${s.name}" is part of a cycle.`);if(-1!==e.indexOf(u))return;this.containerNodes.add(Uy.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let t=0;t<c;t++){const s=u.inputTensors[t],r=u.inboundLayers[t],a=u.nodeIndices[t],i=u.tensorIndices[t];o(s,e,n,r,a,i)}for(e.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const t of this.outputs)o(t,l,u);const c=i.slice().reverse();for(const t of c){n[t.id]=t,t.id in e||(e[t.id]=0);let a=e[t.id];const i=null==s[t.outboundLayer.id]?0:s[t.outboundLayer.id];a=Math.max(a,i),s[t.outboundLayer.id]=a,r[t.outboundLayer.id]=t.outboundLayer,e[t.id]=a;for(let s=0;s<t.inboundLayers.length;s++){const r=t.inboundLayers[s],i=t.nodeIndices[s],o=r.inboundNodes[i],l=null==e[o.id]?0:e[o.id];e[o.id]=Math.max(a+1,l),n[o.id]=o}}const h={};for(const t in e){const s=e[t];s in h||(h[s]=[]),h[s].push(n[t])}const p={};for(const t in s){const e=s[t];e in p||(p[e]=[]),p[e].push(r[t])}let d=Object.keys(p).map(t=>parseInt(t,10)).sort(Wf);this.layers=[];for(const t of d){const e=p[t];e.sort((t,e)=>{const n=a[t.id],s=a[e.id];return n<s?-1:n>s?1:0});for(const t of e)t instanceof Uy&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=p,d=Object.keys(h).map(t=>parseInt(t,10)).sort(Wf);const f=this.inputs.slice(),m=[];for(const t of d)for(const e of h[t]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new Tf("Graph disconnected: cannot obtain value for tensor "+n+` at layer "${t.name}". The following previous layers were accessed without issue: `+m);for(const t of e.outputTensors)f.push(t);m.push(t.name)}}this.nodesByDepth=h;const g=this.layers.map(t=>t.name);for(const t of g){const e=g.filter(e=>e===t).length;if(1!==e)throw new Tf(`The name "${t}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new Wg({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(t=>null),outputMasks:this.outputs.map(t=>null),inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs.map(t=>t.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(e=>e.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new Ef("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.layers)e.push(...t.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const n={};let s=0;for(const t of this.layers)for(const e of t.weights){if(null!=n[e.originalName])throw new Ef("Duplicate weight name: "+e.originalName);n[e.originalName]=e,s++}const r=[];for(const s in t){let a=s;if(null==n[s]){const t=s.split("/");a=t.slice(0,-2).concat([t[t.length-1]]).join("/")}if(null!=n[a])r.push([n[a],t[s]]);else if(e)throw new Ef("Provided weight data has no target variable: "+s);delete n[a]}if(e){const t=[];for(const e in n)t.push(e);if(t.length>0)throw new Ef(`${t.length} of ${s} weights are not set: `+t)}Lg(r)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers "+Oy,e.backend="TensorFlow.js",e}toJSON(t,e=!0){const n=function t(e,n){if(null==e)return null;if("string"==typeof e)return Mf(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const s=[],r=e.length;for(let a=0;a<r;++a){const r=e[a];Fy(n,a,r)?s.push(r):s.push(t(r,n))}return s}{const n={};for(const s of Object.keys(e)){const r=e[s],a=Mf(s);n[a]="name"!==s&&"className"!==s||"string"!=typeof r?t(r,s):r}return n}}(this.updatedConfig());return e?JSON.stringify(n):n}call(t,e){return Vi(()=>{t=Of(t);const n=new My;for(let e=0;e<this.inputs.length;++e)n.add(this.inputs[e],t[e]);return By(this.outputs,n,e)})}computeMask(t,e){return Vi(()=>{let n;return t=Of(t),n=null==e?Rf(null,t.length):Of(e),this.runInternalGraph(t,n)[1]})}computeOutputShape(t){const e=Rg(t);if(e.length!==this.inputLayers.length)throw new Ef(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let t=0;t<e.length;t++){const s=this.inputLayers[t],r=e[t];n[s.name+"_0_0"]=r}const s=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort(Wf);if(s.length>1)for(const t of s){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map(t=>t.id).indexOf(e.id))continue;const s=[];for(let e=0;e<t.inboundLayers.length;e++){const r=t.inboundLayers[e],a=t.nodeIndices[e],i=t.tensorIndices[e],o=n[`${r.name}_${a}_${i}`];s.push(o)}const r=Rg(e.computeOutputShape(_f(s))),a=e.inboundNodes.indexOf(t);for(let t=0;t<r.length;t++){n[`${e.name}_${a}_${t}`]=r[t]}}}const r=[],a=[];for(let t=0;t<this.outputLayers.length;t++){const e=this.outputLayers[t],n=this.outputLayersNodeIndices[t],s=this.outputLayersTensorIndices[t],r=`${e.name}_${n}_${s}`;a.push(r)}for(let t=0;t<a.length;t++){const e=a[t];Df(e in n),r.push(n[e])}return _f(r)}runInternalGraph(t,e){null==e&&(e=Rf(null,t.length));const n={};for(let s=0;s<this.inputs.length;++s){const r=this.inputs[s],a=t[s],i=e[s];n[r.id]=[a,i]}const s=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort(Wf);for(const t of s){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer,s=t.inputTensors,r=t.outputTensors,a=new Array;for(const t of s)t.id in n&&a.push(n[t.id]);if(a.length===s.length){let s,i,o,l,u={};if(null!=t.callArgs&&(u=t.callArgs),1===a.length){const[t,n]=a[0];null==u.mask&&(u.mask=n),o=Of(e.call(t,u)),l=Of(e.computeMask(t,n)),s=[t],i=[n]}else s=a.map(t=>t[0]),i=a.map(t=>t[1]),null==u.mask&&(u.mask=i),o=Of(e.call(s,u)),l=Of(e.computeMask(s,i));if(e.activityRegularizer)throw new $f("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let t=0;t<r.length;++t){const e=r[t],s=o[t],a=l[t];n[e.id]=[s,a]}}}}const r=[],a=[],i=[];for(const t of this.outputs){Df(t.id in n,`Could not compute output ${t.name} : ${t.id}`);const[e,s]=n[t.id];i.push(e.shape),r.push(e),a.push(s)}return[r,a,i]}buildNodeConversionMap(t){const e={};let n;for(const t of this.layers){n=t instanceof Uy?1:0;for(let s=0;s<t.inboundNodes.length;s++){const r=Uy.nodeKey(t,s);this.containerNodes.has(r)&&(e[r]=n,n+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new Ef(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new Ef("Provide either a layer name or layer index");for(const e of this.layers)if(e.name===t)return e;throw new Ef("No such layer: "+t)}calculateLosses(){return Vi(()=>{const t=[];for(const e of this.layers)for(let n=0;n<e.inboundNodes.length;++n){const s=Uy.nodeKey(e,n);this.containerNodes.has(s)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),n=[];for(const t of this.layers){const s=t.getClassName(),r=t.getConfig(),a=[];for(let n=0;n<t.inboundNodes.length;n++){const s=t.inboundNodes[n],r=Uy.nodeKey(t,n);let i={};if(this.containerNodes.has(r)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(e){console.warn(`Layer ${t.name} was passed non-serializable keyword arguments: `+s.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),i={}}if(s.inboundLayers.length>0){const t=[];for(let n=0;n<s.inboundLayers.length;n++){const r=s.inboundLayers[n],a=s.nodeIndices[n],o=s.tensorIndices[n];let l=e[Uy.nodeKey(r,a)];null==l&&(l=0),t.push([r.name,l,o,i])}a.push(t)}}}const i={};i.name=t.name,i.className=s,i.config=r,i.inboundNodes=a,n.push(i)}t.layers=n;const s=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t],r=this.inputLayersNodeIndices[t],a=Uy.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[t];s.push([n.name,i,o])}t.inputLayers=s;const r=[];for(let t=0;t<this.outputLayers.length;t++){const n=this.outputLayers[t],s=this.outputLayersNodeIndices[t],a=Uy.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[t];r.push([n.name,i,o])}return t.outputLayers=r,t}static fromConfig(t,e,n={},s=!1){const r={},a={};function i(t,e){t.name in a?a[t.name].push(e):a[t.name]=[e]}function o(t,e){const n=[];let s;for(const a of e){const o=a[0],l=a[1],u=a[2];if(s=null==a[3]?{}:a[3],!(o in r))return void i(t,e);const c=r[o];if(c.inboundNodes.length<=l)return void i(t,e);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&t.apply(_f(n),s)}function l(t){const n=t.name,a=sy(t,null!=e.customObjects?e.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a;t.inboundNodes.forEach(t=>{if(!(t instanceof Array))throw new Ef("Corrupted configuration, expected array for nodeData: "+t);i(a,t)})}const u=e.name,c=e.layers;for(const t of c)l(t);for(;!Uf(a);)for(const t of c){const e=r[t.name];if(e.name in a){const t=a[e.name];delete a[e.name];for(const n of t)o(e,n)}}const h=[],p=[],d=e.inputLayers;for(const t of d){const e=t[0],n=t[1],s=t[2];Df(e in r);const a=r[e].inboundNodes[n].outputTensors;h.push(a[s])}const f=e.outputLayers;for(const t of f){const e=t[0],n=t[1],s=t[2];Df(e in r);const a=r[e].inboundNodes[n].outputTensors;p.push(a[s])}return new t({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new Ef("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){Vi(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function Gy(t,e,n){const s=e.length;if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>null);if(1===s)return Array.isArray(t)&&1===t.length?t:"object"==typeof t&&e[0]in t?[t[e[0]]]:[t];if(Array.isArray(t)){if(t.length!==s)throw new Error(`Provided ${n} is an array of ${t.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return t}if("object"==typeof t&&Object.keys(t).length>0&&"object"==typeof t[Object.keys(t)[0]]){const n=[];return e.forEach(e=>{e in t?n.push(t[e]):n.push(null)}),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${e} keys. Provided ${n} not understood: ${JSON.stringify(t)}`)}function Hy(t,e){return Gy(t,e,"classWeight")}async function jy(t,e,n,s){if(null!=e||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const e=Vi(()=>{if(1===t.shape.length)return t.clone();if(2===t.shape.length){if(t.shape[1]>1){const e=1;return t.argMax(e)}if(1===t.shape[1])return t.reshape([t.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),s=Array.from(await e.data());Ui(e);const r=[];return s.forEach(t=>{if(null==n[t])throw new Error(`classWeight must contain all classes in the training data. The class ${t} exists in the data but not in classWeight`);r.push(n[t])}),gc(r,"float32")}return null}function qy(t,e){return ro(t,e)}function Ky(t,e){let n,s;const r=e;n=r.xs,s=r.ys,Z(null!=n&&null!=s,()=>"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+e);const a=Xy("input",t.inputNames,n),i=Xy("output",t.outputNames,s),o=a[0].shape[0];Z(a.length===t.inputs.length,()=>`LayersModel has ${t.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: `+JSON.stringify(t.inputNames)+")"),Z(i.length===t.outputs.length,()=>`LayersModel has ${t.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: `+JSON.stringify(t.outputNames)+")");for(let e=0;e<a.length;e++)Z(a[e].shape[0]===o,()=>`Batch size mismatch: input ${t.inputNames[e]} has ${a[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`);for(let e=0;e<i.length;e++)Z(i[e].shape[0]===o,()=>`Batch size mismatch: output ${t.outputNames[e]} has ${i[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`);return{xs:a,ys:i}}function Xy(t,e,n){if(n instanceof ir)return[n];if(Array.isArray(n))return Z(n.length===e.length,()=>`Received an array of ${n.length} Tensors, but expected ${e.length} to match the ${t} keys ${e}.`),n;{const s=[];for(const r of e){if(null==n[r])throw new Ef(`The feature data generated by the dataset lacks the required ${t} key '${r}'.`);s.push(n[r])}return s}}async function Yy(t,e,n){const s=null!=n.batchesPerEpoch;if(Z(null!=t.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),Z(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),Z(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>"For fitDataset(), config.epochs is expected to be a positive integer, but got "+n.epochs),Z(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>"For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got "+n.batchesPerEpoch),Z(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0;try{const r=null!=n.validationData;let a,i;if(r)if(Jy(n.validationData))Z(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got "+n.validationBatches);else{const t=function(t){if(3===t.length)throw new $f("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}(n.validationData);a=t.xs,i=t.ys}const o=t.makeTrainFunction(),l=t.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map(t=>"val_"+t)):l.slice();const c=ty(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=ny(c,h,n.epochs,null,null,function(t,e){let n=null;null!=e.batchesPerEpoch?n=e.batchesPerEpoch:Number.isFinite(t.size)&&(n=t.size);return n}(e,n),null,r,u);p.setModel(t),t.history=d,await p.onTrainBegin(),t.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await e.iterator();for(;f<n.epochs;){const u={};await p.onEpochBegin(f);let c=0,h=0;for(s||(m=await e.iterator());!s||c<n.batchesPerEpoch;){const e=await m.next();if(s&&e.done){console.warn("You provided `batchesPerEpoch` as "+n.batchesPerEpoch+", but your dataset iterator ran out of data after "+c+" batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=e.value){const{xs:s,ys:r}=Ky(t,e.value),a={};a.batch=h,a.size=s[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const e=Hy(n.classWeight,t.outputNames);for(let t=0;t<e.length;++t)i.push(await jy(r[t],null,e[t]))}const u=s.concat(r).concat(i),d=o(u);Ui(u);for(let t=0;t<l.length;++t){const e=l[t],n=d[t];a[e]=n,Gi(n)}await p.onBatchEnd(h,a),qg(a),h++,c++}if(s?c>=n.batchesPerEpoch:e.done){if(r){let e;e=Jy(n.validationData)?Of(await t.evaluateDataset(n.validationData,{batches:n.validationBatches})):Of(t.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<t.metricsNames.length;++n)u["val_"+t.metricsNames[n]]=e[n]}break}if(t.stopTraining_)break}if(await p.onEpochEnd(f,u),f++,t.stopTraining_)break}return await p.onTrainEnd(),await t.history.syncData(),t.history}finally{t.isTraining=!1}}function Jy(t){return"function"==typeof t.iterator}function Zy(t){Z(t>0&&Number.isInteger(t),()=>"batchSize is required to be a positive integer, but got "+t)}function Qy(t,e,n){return null==t?[null]:Array.isArray(t)?t.map(t=>$m(t,e,n-e)):$m(t,e,n-e)}function tb(t,e){return Vi(()=>null==t?null:Array.isArray(t)?t.map(t=>tb(t,e)):Lm(t,"int32"===e.dtype?e:e.toInt()))}function eb(t,e){const n=[];let s=0,r=null;for(;s<t;)r=s+e,r>=t&&(r=t),n.push([s,r]),s=r;return n}async function nb(t,e,n,s={}){if(t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,a,i,o,l,u,c;t.isTraining=!0;try{const h=null==s.batchSize?32:s.batchSize;Zy(h);const p=!1,d=await t.standardizeUserData(e,n,s.sampleWeight,s.classWeight,p,h);r=d[0],a=d[1],c=d[2];let f,m=!1;if(null!=s.validationData&&s.validationData.length>0){if(m=!0,2!==s.validationData.length)throw 3===s.validationData.length?new $f("validationData including sample weights is not supported yet."):new Ef("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+s.validationData+" is invalid.");i=s.validationData[0],o=s.validationData[1];const e=!0,n=await t.standardizeUserData(i,o,null,null,e,h);l=n[0],u=n[1],f=l.concat(u)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){m=!0;const t=Math.floor(r[0].shape[0]*(1-s.validationSplit)),e=r[0].shape[0];l=Qy(r,t,e),r=Qy(r,0,t),u=Qy(a,t,e),a=Qy(a,0,t),f=l.concat(u)}else null!=s.validationSteps&&(m=!0);const g=r.concat(a).concat(c);t.checkTrainableWeightsConsistency();const y=t.makeTrainFunction(),b=t.getDedupedMetricsNames();let x,w;m?(t.makeTestFunction(),x=t.testFunction,w=b.slice().concat(b.map(t=>"val_"+t))):(x=null,f=[],w=b.slice());const v=ty(s.callbacks,s.yieldEvery);return await async function(t,e,n,s,r,a,i,o,l,u,c,h,p,d,f){null==r&&(r=32),null==a&&(a=1),null==c&&(c=!0),null==p&&(p=0);let m=!1;if(null!=l&&null!=u&&(m=!0),null!=f&&(m=!0,null==d))throw new Ef("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=t.checkNumSamples(n,r,d,"steps_per_epoch");let y;null!=g&&(y=Sm(0,g)),null==i&&(i=1);const{callbackList:b,history:x}=ny(o,i,a,p,g,d,r,m,h);b.setModel(t),t.history=x,await b.onTrainBegin(),t.stopTraining_=!1;for(let i=p;i<a;++i){await b.onEpochBegin(i);const a={};if(null!=d)throw new $f("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new $f("batch shuffling is not implemneted yet");c&&j(y);const i=gc(y),o=eb(g,r);for(let c=0;c<o.length;++c){const h={};if(await b.onBatchBegin(c,h),Vi(()=>{const p=o[c][0],d=o[c][1],f=$m(i,p,d-p);h.batch=c,h.size=d-p;const g=tb(n,f),y=e(g);for(let t=0;t<s.length;++t){const e=s[t],n=y[t];h[e]=n,Gi(n)}if(c===o.length-1&&m){const e=t.testLoop(l,u,r);for(let t=0;t<s.length;++t){const n=s[t],r=e[t];Gi(r),a["val_"+n]=r}}}),await b.onBatchEnd(c,h),qg(h),t.stopTraining_)break}i.dispose()}if(await b.onEpochEnd(i,a),t.stopTraining_)break}return await b.onTrainEnd(),await t.history.syncData(),t.history}(t,y,g,b,h,s.epochs,s.verbose,v,x,f,s.shuffle,w,s.initialEpoch,null,null)}finally{t.isTraining=!1,rb(r,e),rb(a,n),rb(l,i),rb(u,o),null!=c&&Ui(c)}}function sb(t){const e=[];t instanceof ir&&(t=[t]);for(let n=0;n<t.length;++n){const s=t[n];if(1===s.rank)e.push(Em(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(s)}}return e}function rb(t,e){if(null==t)return;const n=[];if(e instanceof ir)n.push(e.id);else if(Array.isArray(e))e.forEach(t=>n.push(t.id));else if(null!=e)for(const t in e){const s=e[t];n.push(s.id)}const s=[];if(t instanceof ir)-1===n.indexOf(t.id)&&s.push(t);else if(Array.isArray(t))t.forEach(t=>{-1===n.indexOf(t.id)&&s.push(t)});else if(null!=t)for(const e in t){const r=t[e];-1===n.indexOf(r.id)&&s.push(r)}s.forEach(t=>{t.isDisposed||t.dispose()})}function ab(t){return Array.isArray(t)}function ib(t){return!function(t){return t instanceof ir}(t)&&!ab(t)}function ob(t,e,n,s=!0,r=""){if(null==e||0===e.length){if(null!=t){let e=!1;if(ab(t)&&t.length>0)e=!0;else if(ib(t)){for(const n in t)if(t.hasOwnProperty(n)){e=!0;break}}else e=!0;if(e)throw new Ef(`Error when checking model ${r} expected no data, but got `+t)}return[]}if(null==t)return e.map(t=>null);let a;if(ib(t)){t=t,a=[];for(const n of e){if(null==t[n])throw new Ef(`No data provided for "${n}". Need data for each key in: `+e);a.push(t[n])}}else if(ab(t)){if((t=t).length!==e.length)throw new Ef(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): `+t);a=t}else{if(t=t,e.length>1)throw new Ef(`The model ${r} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape `+t.shape);a=[t]}if(a=sb(a),null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new Ef(`Error when checking ${r}: expected ${e[t]} to have ${n[t].length} dimension(s). but got array with shape `+i.shape);for(let a=0;a<n[t].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[t][a];if(null!=l&&l>=0&&o!==l)throw new Ef(`Error when checking ${r}: expected ${e[t]} to have shape [${n[t]}], but got array with shape [${i.shape}].`)}}return a}function lb(t,e,n,s=!0,r=""){let a;if(Array.isArray(t)){if(t.length!==e.length)throw new Ef(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${t.length} Tensors(s).`);a=t}else{if(e.length>1)throw new Ef(`The model expects ${e.length} ${r} Tensors, but only received one Tensor. Found: array with shape `+JSON.stringify(t.shape)+".");a=[t]}if(null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new Ef(`Error when checking ${r}: expected ${e[t]} to have ${n[t].length} dimension(s), but got array with shape `+JSON.stringify(i.shape));for(let a=0;a<n[t].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[t][a];if(null!=l&&l!==o)throw new Ef(`Error when checking ${r}: expected ${e[t]} to have shape ${JSON.stringify(n[t])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class ub extends Uy{constructor(t){super(t),this.isTraining=!1}summary(t,e,n=console.log){if(!this.built)throw new Ef("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");$y(this,t,e,n)}compile(t){if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"==typeof t.optimizer)this.optimizer_=function(t){const e={Adagrad:()=>Op.adagrad(.01),Adadelta:()=>Op.adadelta(1,.95,Cf()),Adam:()=>Op.adam(.001,.9,.999,Cf()),Adamax:()=>Op.adamax(.002,.9,.999,Cf(),0),RMSProp:()=>Op.rmsprop(.001,.9,0,Cf()),SGD:()=>Op.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new Ef("Unknown Optimizer "+t)}(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof yo))throw new Ef("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(Array.isArray(t.loss)||"string"==typeof t.loss||"function"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new Ef(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);const n=t.loss;e=n.map(t=>my(t))}else{const n=my(t.loss);this.outputs.forEach(t=>{e.push(n)})}else{t.loss=t.loss;for(const e in t.loss)if(-1===this.outputNames.indexOf(e))throw new Ef(`Unknown entry in loss dictionary: "${e}". Only expected the following keys: `+this.outputNames);for(const n of this.outputNames)null==t.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),e.push(my(t.loss[n]))}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let t=0;t<this.outputs.length;++t){const e=this.internalOutputShapes[t],n=this.outputNames[t];this.feedOutputNames.push(n),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[t])}const n=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],ym("loss",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;const e=this.lossFunctions[t];this.outputs.length>1&&(this.metricsTensors.push([e,t]),this.metricsNames.push(this.outputNames[t]+"_loss"))}});const s=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>[]);let n;if("string"==typeof t||"function"==typeof t)n=[t];else{if(!Array.isArray(t)&&"object"!=typeof t)throw new TypeError("Type of metrics argument not understood. Expected an string,function, Array, or Object, found: "+t);n=t}if(Array.isArray(n))return e.map(t=>n);{const t=[];for(const s of e){let e=n.hasOwnProperty(s)?n[s]:[];Array.isArray(e)||(e=[e]),t.push(e)}return t}}(t.metrics,this.outputNames),r=(t,e,n)=>{this.outputNames.length>1&&(e=this.outputNames[t]+"_"+e),this.metricsNames.push(e),this.metricsTensors.push([n,t])};ym("metric",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;(e=>{let n,s,a;for(const i of e){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const e=this.internalOutputShapes[t];let r;1===e[e.length-1]||this.lossFunctions[t]===hy?-1!==["accuracy","acc"].indexOf(i)?s=gy:-1!==["crossentropy","ce"].indexOf(i)&&(s=vy):this.lossFunctions[t]===cy?-1!==["accuracy","acc"].indexOf(i)?s=ky:-1!==["crossentropy","ce"].indexOf(i)&&(s=Iy):-1!==["accuracy","acc"].indexOf(i)?s=yy:-1!==["crossentropy","ce"].indexOf(i)&&(s=Ny),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const t=Sy(i);a=t,n=""+Ty(i)}let e;ym(n,()=>{e=a}),r(t,n,e)}})(s[t])}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,n={}){const s=null==n.batchSize?32:n.batchSize;Zy(s);const r=this.standardizeUserDataXY(t,e,!0,s);try{const a=r[0].concat(r[1]);this.makeTestFunction();const i=this.testFunction;return _f(this.testLoop(i,a,s,n.verbose,n.steps))}finally{rb(r[0],t),rb(r[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),async function(t,e,n){const s=null!=(n=n||{}).batches,r=t.testFunction;let a=[];if(n.verbose>0)throw new $f("Verbose mode is not implemented yet.");Z(!s||n.batches>0&&Number.isInteger(n.batches),()=>"Test loop expects `batches` to be a positive integer, but received "+JSON.stringify(n.batches));const i="function"==typeof e.next?e:await e.iterator();let o=0,l=0;for(;!s||l<n.batches;){const e=await i.next();if(a=Vi(()=>{if(e.value){const{xs:n,ys:s}=Ky(t,e.value),i=n.concat(s),u=Vi(()=>r(i));if(Ui(i),0===l)for(let t=0;t<u.length;++t)a.push(go(0));const c=i[0].shape[0];for(let t=0;t<u.length;++t){const e=u[t],n=a[t];a[t]=Vi(()=>eo(a[t],ro(c,e))),l>0&&Ui(n)}Ui(u),o+=c,++l}return a}),e.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let t=0;t<a.length;++t){const e=a[t];a[t]=so(a[t],o),Ui(e)}return _f(a)}(this,t,e)}checkNumSamples(t,e,n,s="steps"){let r;if(null!=n){if(r=null,null!=e)throw new Ef(`If ${s} is set, batchSize must be null or undefined.Got batchSize = `+e)}else{if(null==t)throw new Ef("Either the input data should have a defined shape, or "+s+" shoud be specified.");r=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return r}execute(t,e){if(Array.isArray(e)&&0===e.length)throw new Ef("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(e),s=n?e:[e],r=this.retrieveSymbolicTensors(s),a=new My;if(t instanceof ir&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new Ef(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let e=0;e<this.inputs.length;++e)a.add(this.inputs[e],t[e])}else for(const e of this.inputs){const n=t[e.name];if(null==n)throw new Ef("No value is provided for the model's input "+e.name);a.add(e,n)}const i=By(r,a);return n?i:i[0]}retrieveSymbolicTensors(t){const e=Rf(null,t.length);let n=t.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map(t=>t.name);for(let s=0;s<t.length;++s){const i=a.indexOf(t[s]);if(-1!==i&&(e[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw e.forEach((e,s)=>{null==e&&n.push(t[s])}),new Ef("Cannot find SymbolicTensors for output name(s): "+JSON.stringify(n))}return e}predictLoop(t,e=32,n=!1){return Vi(()=>{const s=this.checkNumSamples(t);if(n)throw new $f("Verbose predictLoop() is not implemented yet.");const r=eb(s,e),a=this.outputs.map(t=>[]);for(let e=0;e<r.length;++e){Vi(()=>{const n=r[e][0],s=r[e][1],a=Qy(t,n,s),i=[];if(Array.isArray(a))for(let t=0;t<a.length;++t)i.push({key:this.inputs[t],value:a[t]});else i.push({key:this.inputs[0],value:a});const o=new My(i);return By(this.outputs,o)}).forEach((t,e)=>a[e].push(t))}return _f(a.map(t=>gl(t,0)))})}predict(t,e={}){const n=sb(t);lb(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==e.batchSize?32:e.batchSize;return Zy(s),this.predictLoop(n,s)}finally{rb(n,t)}}predictOnBatch(t){lb(t,this.inputNames,this.feedInputShapes,!0);const e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,n=!0,s){if(null==this.optimizer_)throw new Tf("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let t=0;t<this.feedOutputShapes.length;++t){const e=this.feedOutputShapes[t];this.feedLossFns[t]===cy?r.push(e.slice(0,e.length-1).concat([1])):r.push(e)}if(function(t,e,n){const s=Vf(t.map(t=>t.shape[0]));s.sort();const r=Vf(e.map(t=>t.shape[0]));if(r.sort(),s.length>1)throw new Ef("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map(t=>t.shape)));if(r.length>1)throw new Ef("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map(t=>t.shape)));if(s.length>0&&r.length>0&&!rt(s,r))throw new Ef(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(t=ob(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=ob(e,this.feedOutputNames,r,!1,"target")),function(t,e,n){const s=[ay,hy,uy];for(let r=0;r<t.length;++r){const a=t[r],i=e[r],o=n[r];if(null!=i){if(i===uy&&1===a.shape[a.shape.length-1])throw new Ef(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const t=a.shape.slice(1),e=o.slice(1);for(let n=0;n<t.length;++n){const s=t[n],r=e[n];if(null!=r&&s!==r)throw new Ef(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&t[0].shape[0]%s!=0)throw new Ef(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,n,s,r=!0,a){const[i,o]=this.standardizeUserDataXY(t,e,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const t=Hy(s,this.outputNames);l=[];for(let e=0;e<t.length;++e)l.push(await jy(o[e],null,t[e]))}return[i,o,l]}testLoop(t,e,n,s=0,r){return Vi(()=>{const a=this.checkNumSamples(e,n,r,"steps"),i=[];if(s>0)throw new $f("Verbose mode is not implemented yet.");if(null!=r)throw new $f("steps mode in testLoop() is not implemented yet");{const s=eb(a,n),r=gc(Sm(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],o=s[n][1],l=$m(r,a,o-a),u=tb(e,l),c=t(u);if(0===n)for(let t=0;t<c.length;++t)i.push(go(0));for(let t=0;t<c.length;++t){const e=c[t];i[t]=eo(i[t],ro(o-a,e))}}for(let t=0;t<i.length;++t)i[t]=so(i[t],a)}return i})}getDedupedMetricsNames(){const t=this.metricsNames,e=[];for(let n=0;n<t.length;++n){const s=t[n];let r=s;if(Ff(t,s)>1){r+="_"+Ff(t.slice(0,n),s)}e.push(r)}return e}makeTrainFunction(){return t=>{const e=[],n=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map(t=>t.read());return[this.optimizer_.minimize(()=>{const t=[];for(let e=0;e<this.inputs.length;++e)t.push({key:this.inputs[e],value:n[e]});const i=new My(t),o=By(this.outputs,i,{training:!0});let l;for(let t=0;t<this.lossFunctions.length;++t){let n=(0,this.lossFunctions[t])(s[t],o[t]);null!=r[t]&&(n=qy(n,r[t]));const a=Wu(n);e.push(a),l=0===t?n:eo(l,n)}for(let t=0;t<this.metricsTensors.length;++t){let n;if(this.outputs.length>1&&t<this.outputs.length)n=e[t];else{const e=this.metricsTensors[t][0],r=this.metricsTensors[t][1];n=Wu(e(s[r],o[r]))}Gi(n),a.push(n)}return l=Wu(l),this.calculateLosses().forEach(t=>{l=eo(l,t)}),l},!0,i)].concat(a)}}makeTestFunction(){this.testFunction=t=>Vi(()=>{const e=[];let n;const s=t.slice(0,this.inputs.length),r=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let t=0;t<this.inputs.length;++t)a.push({key:this.inputs[t],value:s[t]});const i=new My(a),o=By(this.outputs,i);for(let t=0;t<this.lossFunctions.length;++t){const s=this.lossFunctions[t],a=Wu(s(r[t],o[t]));n=0===t?a:eo(n,a),e.push(n)}for(let t=0;t<this.metricsTensors.length;++t){const n=this.metricsTensors[t][0],s=this.metricsTensors[t][1],a=Wu(n(r[s],o[s]));e.push(a)}return e})}async fit(t,e,n={}){return nb(this,t,e,n)}async fitDataset(t,e){return Yy(this,t,e)}async trainOnBatch(t,e){const n=await this.standardizeUserData(t,e),s=n[0],r=n[1],a=this.makeTrainFunction()(s.concat(r)),i=[];for(const t of a){const e=await t.data();i.push(e[0])}return Ui(a),_f(i)}getNamedWeights(t){const e=[],n=null!=t&&t.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let t=0;t<s.length;++t)n&&!s[t].trainable||e.push({name:s[t].originalName,tensor:r[t]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){const t=super.dispose();if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const e=Pi().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-Pi().numTensors}return t}getLossIdentifiers(){let t;if("string"==typeof this.loss)t=Mf(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if("string"!=typeof t)throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map(t=>Mf(t))}else{const e=Object.keys(this.loss);t={};const n=this.loss;for(const s of e){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");t[s]=Mf(n[s])}}return t}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Mf(Ty(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(t=>Mf(Ty(t)));{const t={};for(const e in this.metrics)t[e]=Mf(Ty(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(null!=t.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=t.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=t.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const e=sy(_y(t.optimizer_config));let n,s;if("string"==typeof t.loss)n=Lf(t.loss);else if(Array.isArray(t.loss))n=t.loss.map(t=>Lf(t));else if(null!=t.loss){n={};for(const e in t.loss)n[e]=Lf(t.loss[e])}if(Array.isArray(t.metrics))s=t.metrics.map(t=>Lf(t));else if(null!=t.metrics){s={};for(const e in t.metrics)s[e]=Lf(t.metrics[e])}this.compile({loss:n,metrics:s,optimizer:e})}async save(t,e){if("string"==typeof t){const e=Yr(t);if(0===e.length)throw new Ef(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Ef(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Ef("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await zr(this.getNamedWeights(e)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v"+Oy,convertedBy:null};if(null!=e&&e.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const t="optimizer",{data:e,specs:r}=await zr(await this.optimizer.getWeights(),t);n.specs.push(...r),n.data=Ur([n.data,e])}if(null!=this.userDefinedMetadata){const t=!0;Ey(this.userDefinedMetadata,this.name,t),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,t.save(s)}setUserDefinedMetadata(t){Ey(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}}ub.className="Model",ki(ub);class cb extends ub{}async function hb(t,e){"modelTopology"in t||(t={modelTopology:t});let n=(t=t).modelTopology;null!=n.model_config&&(n=n.model_config);const s=sy(_y(n),e);if(null!=t.weightsManifest){const e=await Oa(t.weightsManifest,t.pathPrefix,s.weights.map(t=>t.originalName)),n={};for(const t of s.weights)n[t.originalName]=e[t.originalName];s.loadWeights(n),Ui(e)}return s}async function pb(t,e){if(null==e&&(e={}),"string"==typeof t){const n=Jr(t,e);if(0===n.length)n.push(Wa(t,e));else if(n.length>1)throw new Ef(`Found more than one (${n.length}) load handlers for URL '${t}'`);t=n[0]}return async function(t,e,n){null==n&&(n={});if(null==t.load)throw new Ef("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=await t.load();let r=s.modelTopology;null!=r.model_config&&(r=r.model_config);const a=null==n.strict||n.strict,i=null!=s.weightData&&null!=s.weightSpecs&&a,o=sy(_y(r),e,i),l=s.trainingConfig;null!=l&&o.loadTrainingConfig(l);null!=s.userDefinedMetadata&&o.setUserDefinedMetadata(s.userDefinedMetadata);if(null!=s.weightData){if(null==s.weightSpecs)throw new Ef("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:t,optimizerWeights:e}=function(t,e){const n=Br(t,e),s={},r=[];return e.forEach(t=>{"optimizer"===t.group?r.push({name:t.name,tensor:n[t.name]}):s[t.name]=n[t.name]}),{modelWeights:s,optimizerWeights:r}}(s.weightData,s.weightSpecs);o.loadWeights(t,a),null!=o.optimizer&&e.length>0&&await o.optimizer.setWeights(e),Ui(t),Ui(e.map(t=>t.tensor))}return o}(t,void 0,e)}cb.className="Functional",ki(cb);class db extends ub{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=null!=t.name?t.name:$g("sequential_"),null!=t.layers)for(const e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some(t=>t<0))throw new Ef("Negative dimension size caused by adding layer "+t.name+" with input shape ["+t.inboundNodes[0].inputTensors[0].shape+"]")}add(t){const e=t instanceof db||t instanceof ub;let n;if(e){if(n=t,1!==n.outputs.length)throw new Ef("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Ef("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new Ef("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const e=Hg({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(e)}if(e)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==t.inboundNodes.length)throw new Ef(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(1!==t.inboundNodes[0].outputTensors.length)throw new Ef("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=function t(e,n,s){if((null==n||null!=s&&s>0)&&(n=e.sourceLayer,s=e.nodeIndex),0===n.inboundNodes.length)return[e];{const e=n.inboundNodes[s];if(0===e.inboundLayers.length)return e.inputTensors;{const n=[];for(let s=0;s<e.inboundLayers.length;s++){const r=t(e.inputTensors[s],e.inboundLayers[s],e.nodeIndices[s]);for(const t of r)-1===n.indexOf(t)&&n.push(t)}return n}}}(this.outputs[0])}this.inboundNodes=[],new Wg({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Rf(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs[0].shape})}else{const e=t.apply(this.outputs[0]);if(Array.isArray(e))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[e],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return null==this.model&&this.build(),this.model.call(t,e)}build(t){if(Fg(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new ub({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,n=console.log){this.built||this.build(),super.summary(t,e,n)}setWeights(t){null==this.model&&this.build(),this.model.setWeights(t)}evaluate(t,e,n={}){if(!this.built)throw new Tf("The model needs to be compiled before being used.");return this.model.evaluate(t,e,n)}async evaluateDataset(t,e){if(!this.built)throw new Tf("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return null==this.model&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,n={}){if(!this.built)throw new Tf("The model needs to be compiled before being used.");return this.model.fit(t,e,n)}async fitDataset(t,e){if(!this.built)throw new Tf("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,n={},s=!1){let r,a={};if(e instanceof Array){if(null==e[0].className||"Merge"===e[0].className)throw new Ef("Legacy serialization format not supported yet.");r=e}else Z(null!=e.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),r=e.layers,delete e.layers,a=e;const i=new t(a);if(!(i instanceof db))throw new $f("Sequential.fromConfig called on non-Sequential input: "+i);for(const t of r){const e=sy(t,void 0,s);s&&e.setFastWeightInitDuringBuild(!0),i.add(e)}return i}set stopTraining(t){if(null==this.model)throw new Ef("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(null==this.model)throw new Ef("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const t=[];for(const e of this.layers){const n={};n.className=e.getClassName(),n.config=e.getConfig(),t.push(n)}return{name:this.name,layers:t}}}function fb(t){return new ub(t)}function mb(t){return new db(t)}function gb(t,e){return null==e&&(e={}),pb(t,e)}function yb(t){return Hg(t)}function bb(t,e){ey.registerCallbackConstructor(t,e)}db.className="Sequential",ki(db);class xb extends wi{getConfig(){return{}}}class wb extends xb{apply(t,e=1){return function(t,e=1){if(1!==e)throw new $f(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return Zl(t)}(t,e)}}wb.className="elu",ki(wb);class vb extends xb{apply(t){return Ec(t)}}vb.className="selu",ki(vb);class kb extends xb{apply(t){return xc(t)}}kb.className="relu",ki(kb);class Nb extends xb{apply(t){return Vi(()=>Uu(6,xc(t)))}}Nb.className="relu6",ki(Nb);class Ib extends xb{apply(t){return t}}Ib.className="linear",ki(Ib);class Cb extends xb{apply(t){return yl(t)}}Cb.className="sigmoid",ki(Cb);class Sb extends xb{apply(t){return function(t){return Vi(()=>{const e=eo(.5,ro(.2,t));return $l(e,0,1)})}(t)}}Sb.className="hardSigmoid",ki(Sb);class Tb extends xb{apply(t){return Su(t)}}Tb.className="softplus",ki(Tb);class Eb extends xb{apply(t){return function(t){return Vi(()=>so(t,Io(t).add(1)))}(t)}}Eb.className="softsign",ki(Eb);class $b extends xb{apply(t){return xl(t)}}$b.className="tanh",ki($b);class Ab extends xb{apply(t,e=-1){return zc(t,e)}}Ab.className="softmax",ki(Ab);class Rb extends xb{apply(t,e=-1){return Au(t,e)}}Rb.className="logSoftmax",ki(Rb);class Db extends xb{apply(t,e=1){return Vi(()=>yl(t.mul(e)).mul(t))}}function Fb(t){return t.getClassName()}function _b(t,e={}){return Pf(t,vi.getMap().classNameMap,e,"activation")}function Ob(t){if(null==t){const t={className:"linear",config:{}};return _b(t)}if("string"==typeof t){const e={};return e.className=t,e.config={},_b(e)}return t instanceof xb?t:_b(t)}function Mb(t){if(null!=t&&"object"!=typeof t)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an object, but received: "+t)}Db.className="swish",ki(Db);class Lb extends wi{}class zb extends Lb{constructor(t){super(),Mb(t),this.l1=null==t||null==t.l1?.01:t.l1,this.l2=null==t||null==t.l2?.01:t.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(t){return Vi(()=>{let e=Bu([1]);return this.hasL1&&(e=eo(e,$u(ro(this.l1,Io(t))))),this.hasL2&&(e=eo(e,$u(ro(this.l2,zm(t))))),e.asScalar()})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}}zb.className="L1L2",ki(zb);const Bb={l1l2:"L1L2"};function Pb(t){return Bf(t)}function Wb(t,e={}){return Pf(t,vi.getMap().classNameMap,e,"regularizer")}function Vb(t){if(null==t)return null;if("string"==typeof t){return Wb({className:t in Bb?Bb[t]:t,config:{}})}return t instanceof Lb?t:Wb(t)}class Ub extends Ug{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,null!=t&&(this.maxValue=t.maxValue)}call(t,e){t=Dg(t);let n=xc(t);return null!=this.maxValue&&(n=$l(n,0,this.maxValue)),n}computeOutputShape(t){return t}getConfig(){const t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}}Ub.className="ReLU",ki(Ub);class Gb extends Ug{constructor(t){super(null==t?{}:t),this.DEFAULT_ALPHA=.3,null==t&&(t={}),this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=Dg(t);return bu(n,this.alpha)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}Gb.className="LeakyReLU",ki(Gb);class Hb extends Ug{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==t&&(t={}),this.supportsMasking=!0,this.alphaInitializer=cg(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Vb(t.alphaRegularizer),this.alphaConstraint=sm(t.alphaConstraint),null==t.sharedAxes)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else{if("number"!=typeof t.sharedAxes)throw new Ef("Expected sharedAxes to be a number or an array of numbers, but got "+t.sharedAxes);this.sharedAxes=[t.sharedAxes]}}build(t){const e=(t=Fg(t)).slice(1);if(null!=this.sharedAxes)for(const t of this.sharedAxes)e[t-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let e=1;e<t.length;++e)n[e]=t[e];this.inputSpec=[new zg({ndim:t.length,axes:n})],this.built=!0}call(t,e){return t=Dg(t),ic(t,this.alpha.read())}getConfig(){const t={alphaInitializer:ug(this.alphaInitializer),alphaRegularizer:Pb(this.alphaRegularizer),alphaConstraint:em(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}}Hb.className="PReLU",ki(Hb);class jb extends Ug{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA=1,null==t&&(t={}),null!=t.alpha&&t.alpha!==this.DEFAULT_ALPHA)throw new $f(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=Dg(t);return Zl(n)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}jb.className="ELU",ki(jb);class qb extends Ug{constructor(t){super(null==t?{}:t),this.DEFAULT_THETA=1,null==t&&(t={}),this.theta=null==t.theta?this.DEFAULT_THETA:t.theta}call(t,e){const n=Dg(t);return n.mul(Tm(n.greater(this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){const t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}}qb.className="ThresholdedReLU",ki(qb);class Kb extends Ug{constructor(t){super(null==t?{}:t),this.DEFAULT_AXIS=1,null==t&&(t={}),this.softmax=(new Ab).apply,this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis}call(t,e){const n=Dg(t);return this.softmax(n,this.axis)}computeOutputShape(t){return t}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function Xb(t,e,n){if("number"==typeof t)return Rf(t,e);if(t.length!==e)throw new Ef(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${t.length} elements.`);for(let r=0;r<e;++r){const a=t[r];if((s=a)!==parseInt(s.toString(),10))throw new Ef(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(t)} including a non-integer number `+a)}return t;var s}function Yb(t,e,n,s,r=1){if(null==t)return t;let a;return a="same"===n?t:t-(e+(e-1)*(r-1))+1,Math.floor((a+s-1)/s)}function Jb(t,e,n,s){if(null==t)return null;if("valid"===s)t=t*e+Cm([n-e,0]);else{if("same"!==s)throw new Ef(`Unsupport padding mode: ${s}.`);t*=e}return t}function Zb(t,e){return Vi(()=>(dm(e),"channelsFirst"===e?Xa(t,[0,2,3,1]):t))}function Qb(t,e){return Vi(()=>(dm(e),"channelsFirst"===e?Xa(t,[0,2,3,4,1]):t))}function tx(t,e,n,s=1,r="valid",a,i=1){return Vi(()=>{if(null==a&&(a="channelsLast"),dm(a),3!==t.shape.length)throw new Ef("The input of a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead.");if(3!==e.shape.length)throw new Ef("The kernel for a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead");if(null!=n&&1!==n.shape.length)throw new Ef("The bias for a conv1dWithBias operation should be 1, but is "+e.shape.length+" instead");if("channelsFirst"===a&&(t=Xa(t,[0,2,1])),"causal"===r)throw new $f("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=Ol(t,e,s,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=Pm(o,n)),o})}function ex(t,e,n,s=[1,1],r="valid",a,i,o=null){return Vi(()=>{if(null==a&&(a="channelsLast"),dm(a),3!==t.rank&&4!==t.rank)throw new Ef(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);if(3!==e.rank&&4!==e.rank)throw new Ef(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);let l=Zb(t,a);if("causal"===r)throw new $f("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Bh({x:l,filter:e,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=Xa(l,[0,3,1,2])),l})}function nx(t,e,n,s=[1,1,1],r="valid",a,i){return Vi(()=>{if(null==a&&(a="channelsLast"),dm(a),4!==t.rank&&5!==t.rank)throw new Ef("conv3dWithBias expects input to be of rank 4 or 5, but received "+t.rank+".");if(4!==e.rank&&5!==e.rank)throw new Ef("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+t.rank+".");let o=Qb(t,a);if("causal"===r)throw new $f("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=zl(o,e,s,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=Pm(o,n)),"channelsFirst"===a&&(o=Xa(o,[0,4,1,2,3])),o})}Kb.className="Softmax",ki(Kb);class sx extends Ug{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",sx.verifyArgs(e),this.rank=t,jf(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new $f(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Xb(e.kernelSize,t,"kernelSize"),this.strides=Xb(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,fm(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,dm(this.dataFormat),this.activation=Ob(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=cg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=sm(e.biasConstraint),this.biasRegularizer=Vb(e.biasRegularizer),this.activityRegularizer=Vb(e.activityRegularizer),this.dilationRate=Xb(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Ef("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(this.dilationRate));if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Ef("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(this.dilationRate))}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Ef("dilationRate must be a number or array of three numbers for 3D convolution, but received "+JSON.stringify(this.dilationRate))}static verifyArgs(t){if(Df("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!Hf(t.kernelSize,"number",1,3))throw new Ef(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Fb(this.activation),useBias:this.useBias,biasInitializer:ug(this.biasInitializer),biasRegularizer:Pb(this.biasRegularizer),activityRegularizer:Pb(this.activityRegularizer),biasConstraint:em(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class rx extends sx{constructor(t,e){super(t,e),this.kernel=null,rx.verifyArgs(e),this.filters=e.filters,jf(this.filters,"filters"),this.kernelInitializer=cg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=sm(e.kernelConstraint),this.kernelRegularizer=Vb(e.kernelRegularizer)}build(t){t=Fg(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new Ef("The channel dimension of the input should be defined. Found "+t[e]);const n=t[e],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:n}}],this.built=!0}call(t,e){return Vi(()=>{let e;t=Dg(t);const n=null==this.bias?null:this.bias.read(),s=qf(this.activation.getClassName());if(null!=s&&2===this.rank)e=ex(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)e=tx(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)e=ex(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new $f("convolutions greater than 3D are not implemented yet.");e=nx(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(e=this.activation.apply(e))}return e})}computeOutputShape(t){t=Fg(t);const e=[],n="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let t=0;t<n.length;++t){const s=Yb(n[t],this.kernelSize[t],this.padding,this.strides[t],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[t]);e.push(s)}let s=[t[0]];return"channelsLast"===this.dataFormat?(s=s.concat(e),s.push(this.filters)):(s.push(this.filters),s=s.concat(e)),s}getConfig(){const t={filters:this.filters,kernelInitializer:ug(this.kernelInitializer),kernelRegularizer:Pb(this.kernelRegularizer),kernelConstraint:em(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new Ef("Convolution layer expected config.filters to be a 'number' > 0 but got "+JSON.stringify(t.filters))}}class ax extends rx{constructor(t){super(2,t),ax.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!Hf(t.kernelSize,"number",1,2))throw new Ef(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}}ax.className="Conv2D",ki(ax);class ix extends rx{constructor(t){super(3,t),ix.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&(!Array.isArray(t.kernelSize)||1!==t.kernelSize.length&&3!==t.kernelSize.length))throw new Ef(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}}ix.className="Conv3D",ki(ix);class ox extends ax{constructor(t){if(super(t),this.inputSpec=[new zg({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Ef("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+this.padding)}build(t){if(4!==(t=Fg(t)).length)throw new Ef("Input should have rank 4; Received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new Ef("The channel dimension of the inputs should be defined. Found `None`.");const n=t[e],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new zg({ndim:4,axes:{[e]:n}})],this.built=!0}call(t,e){return Vi(()=>{let e=Dg(t);if(4!==e.shape.length)throw new Ef("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+e.shape.length);const n=e.shape,s=n[0];let r,a;"channelsFirst"===this.dataFormat?(r=2,a=3):(r=1,a=2);const i=n[r],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[s,Jb(i,c,l,this.padding),Jb(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(e=Xa(e,[0,2,3,1]));let d=Ll(e,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=Xa(d,[0,3,1,2])),null!=this.bias&&(d=Pm(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d})}computeOutputShape(t){const e=(t=Fg(t)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return e[n]=this.filters,e[s]=Jb(e[s],o,a,this.padding),e[r]=Jb(e[r],l,i,this.padding),e}getConfig(){const t=super.getConfig();return delete t.dilationRate,t}}ox.className="Conv2DTranspose",ki(ox);class lx extends rx{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==e.filters)throw new Ef("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=e.kernelInitializer||null!=e.kernelRegularizer||null!=e.kernelConstraint)throw new Ef("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=e.padding&&"same"!==e.padding&&"valid"!==e.padding)throw new Ef(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received `+JSON.stringify(e.padding));this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=cg(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Vb(e.depthwiseRegularizer),this.depthwiseConstraint=sm(e.depthwiseConstraint),this.pointwiseInitializer=cg(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Vb(e.pointwiseRegularizer),this.pointwiseConstraint=sm(e.pointwiseConstraint)}build(t){if((t=Fg(t)).length<this.rank+2)throw new Ef(`Inputs to SeparableConv${this.rank}D should have rank `+(this.rank+2)+", but received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e]||t[e]<0)throw new Ef("The channel dimension of the inputs should be defined, but found "+JSON.stringify(t[e]));const n=t[e],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let t=0;t<this.rank;++t)r.push(1);r.push(n*this.depthMultiplier,this.filters);this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.inputSpec=[new zg({ndim:this.rank+2,axes:{[e]:n}})],this.built=!0}call(t,e){return Vi(()=>{let e;if(t=Dg(t),1===this.rank)throw new $f("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(t=Xa(t,[0,2,3,1])),e=$c(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(e=Pm(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),"channelsFirst"===this.dataFormat&&(e=Xa(e,[0,3,1,2])),e})}getConfig(){const t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=ug(this.depthwiseInitializer),t.pointwiseInitializer=ug(this.pointwiseInitializer),t.depthwiseRegularizer=Pb(this.depthwiseRegularizer),t.pointwiseRegularizer=Pb(this.pointwiseRegularizer),t.depthwiseConstraint=em(this.depthwiseConstraint),t.pointwiseConstraint=em(this.pointwiseConstraint),t}}lx.className="SeparableConv";class ux extends lx{constructor(t){super(2,t)}}ux.className="SeparableConv2D",ki(ux);class cx extends rx{constructor(t){super(1,t),cx.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){const t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!Hf(t.kernelSize,"number",1,1))throw new Ef(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}}cx.className="Conv1D",ki(cx);class hx extends Ug{constructor(t){super(t),"number"==typeof t.cropping?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:"number"==typeof t.cropping[0]?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=void 0===t.dataFormat?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return Vi(()=>{if(t=Dg(t),"channelsLast"===this.dataFormat){const e=Rm(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Rm(e,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const e=Rm(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Rm(e,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}hx.className="Cropping2D",ki(hx);class px extends Ug{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==t.size?this.DEFAULT_SIZE:t.size,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat}computeOutputShape(t){if("channelsFirst"===this.dataFormat){const e=null==t[2]?null:this.size[0]*t[2],n=null==t[3]?null:this.size[1]*t[3];return[t[0],t[1],e,n]}{const e=null==t[1]?null:this.size[0]*t[1],n=null==t[2]?null:this.size[1]*t[2];return[t[0],e,n,t[3]]}}call(t,e){return Vi(()=>{let e=Dg(t);const n=e.shape;if("channelsFirst"===this.dataFormat){e=Xa(e,[0,2,3,1]);const t=this.size[0]*n[2],s=this.size[1]*n[3],r=e.resizeNearestNeighbor([t,s]);return Xa(r,[0,3,1,2])}{const t=this.size[0]*n[1],s=this.size[1]*n[2];return e.resizeNearestNeighbor([t,s])}})}getConfig(){const t={size:this.size,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}px.className="UpSampling2D",ki(px);class dx extends sx{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=cg(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=sm(t.depthwiseConstraint),this.depthwiseRegularizer=Vb(t.depthwiseRegularizer)}build(t){if((t=Fg(t)).length<4)throw new Ef(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);const e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new Ef(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);const n=t[e],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Vi(()=>{let e=function(t,e,n=[1,1],s="valid",r,a){return Vi(()=>{null==r&&(r="channelsLast"),dm(r);let i=Zb(t,r);if(4!==t.rank)throw new Ef("Input for depthwiseConv2d is required to be 4-D, but is instead "+t.rank+"-D");if(4!==e.rank)throw new Ef("depthwiseKernel is required to be 4-D, but is instead "+e.rank+"-D");return i=Hl(i,e,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(i=Xa(i,[0,3,1,2])),i})}(t=Dg(t),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(e=Pm(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),e})}computeOutputShape(t){t=Fg(t);const e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],s="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,r=Yb(e,this.kernelSize[0],this.padding,this.strides[0]),a=Yb(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],s,r,a]:[t[0],r,a,s]}getConfig(){const t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=ug(this.depthwiseInitializer),t.depthwiseRegularizer=Pb(this.depthwiseRegularizer),t.depthwiseConstraint=em(this.depthwiseRegularizer),t}}function fx(t,e,n,s){if(Array.isArray(t)){if(null!=e||null!=n)throw new Ef("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=t.slice(t.length-s,t.length),t=t.slice(0,t.length-s)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function r(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=r(e),constants:n=r(n)}}function mx(t,e,n,s=!1,r,a,i=!1,o=!1){return Vi(()=>{const l=e.shape.length;if(l<3)throw new Ef(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(Sm(2,l));if(e=Xa(e,u),null!=a)throw new $f("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=r.asType("bool").asType("float32")).rank===l-1&&(r=eu(r,-1)),r=Xa(r,u)),s&&(e=vc(e,0),null!=r&&(r=vc(r,0)));const c=[];let h,p=n;const d=e.shape[0],f=ah(e);let m,g;null!=r&&(m=ah(r));for(let e=0;e<d;++e){const n=f[e],s=Vi(()=>t(n,p));if(null==r)h=s[0],p=s[1];else{const t=Vi(()=>{const t=m[e],n=Ju(t).sub(t);return{output:s[0].mul(t).add(p[0].mul(n)),newStates:p.map((e,r)=>s[1][r].mul(t).add(e.mul(n)))}});h=t.output,p=t.newStates}o&&c.push(h)}if(o){g=qc(c,1)}return[h,g,p]})}dx.className="DepthwiseConv2D",ki(dx);class gx extends Ug{constructor(t){let e;if(super(t),null==t.cell)throw new Ef("cell property is missing for the constructor of RNN.");if(e=Array.isArray(t.cell)?new Ix({cells:t.cell}):t.cell,null==e.stateSize)throw new Ef("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=null!=t.returnSequences&&t.returnSequences,this.returnState=null!=t.returnState&&t.returnState,this.goBackwards=null!=t.goBackwards&&t.goBackwards,this._stateful=null!=t.stateful&&t.stateful,this.unroll=null!=t.unroll&&t.unroll,this.supportsMasking=!0,this.inputSpec=[new zg({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return Sm(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(t=>null)}return this.states_}setStates(t){this.states_=t}computeOutputShape(t){Ag(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);const n=e[0];let s;if(s=this.returnSequences?[t[0],t[1],n]:[t[0],n],this.returnState){const n=[];for(const s of e)n.push([t[0],s]);return[s].concat(n)}return s}computeMask(t,e){return Vi(()=>{Array.isArray(e)&&(e=e[0]);const t=this.returnSequences?e:null;if(this.returnState){const e=this.states.map(t=>null);return[t].concat(e)}return t})}get states(){if(null==this.states_){const t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let n=0;n<t;++n)e.push(null);return e}return this.states_}set states(t){this.states_=t}build(t){if(null!=this.numConstants)throw new $f("Constants support is not implemented in RNN yet.");Ag(t)&&(t=t[0]),t=t;const e=this.stateful?t[0]:null,n=t.slice(2);this.inputSpec[0]=new zg({shape:[e,null,...n]});const s=[t[0]].concat(t.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!rt(this.stateSpec.map(t=>t.shape[t.shape.length-1]),r))throw new Ef(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is `+this.cell.stateSize)}else this.stateSpec=r.map(t=>new zg({shape:[null,t]}));this.stateful&&this.resetStates()}resetStates(t,e=!1){Vi(()=>{if(!this.stateful)throw new Sf("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Ef("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>Bu([n,t])):this.states_=[Bu([n,this.cell.stateSize])];else if(null==t)Ui(this.states_),null!=this.keptStates&&(Ui(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>Bu([n,t])):this.states_[0]=Bu([n,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new Ef(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: `+t);!0===e?this.keptStates.push(this.states_.slice()):Ui(this.states_);for(let e=0;e<this.states_.length;++e){const s=t[e],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[e]:this.cell.stateSize,a=[n,r];if(!rt(s.shape,a))throw new Ef(`State ${e} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[e]=s}}this.states_=this.states_.map(t=>Gi(t.clone()))})}apply(t,e){let n=null==e?null:e.initialState,s=null==e?null:e.constants;null==e&&(e={});const r=fx(t,n,s,this.numConstants);t=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){e.initialState=n,a=a.concat(n),this.stateSpec=[];for(const t of n)this.stateSpec.push(new zg({shape:t.shape}));i=i.concat(this.stateSpec)}null!=s&&(e.constants=s,a=a.concat(s),this.numConstants=s.length);if(a[0]instanceof Bg){const n=[t].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,e);return this.inputSpec=r,o}return super.apply(t,e)}call(t,e){return Vi(()=>{const n=null==e?null:e.mask,s=null==e?null:e.training;let r=null==e?null:e.initialState;t=Dg(t),null==r&&(r=this.stateful?this.states_:this.getInitialState(t));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new Ef(`RNN Layer has ${a} state(s) but was passed `+r.length+" initial state(s).");this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=mx((t,e)=>{const n=this.cell.call([t].concat(e),i);return[n[0],n.slice(1)]},t,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h})}getInitialState(t){return Vi(()=>{let e=Bu(t.shape);return e=$u(e,[1,2]),e=Em(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(t=>t>1?_m(e,[1,t]):e):this.cell.stateSize>1?[_m(e,[1,this.cell.stateSize])]:[e]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){const t=super.getConfig(),e={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(e.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===gx.className&&(e.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,t,e)}static fromConfig(t,e,n={}){const s=sy(e.cell,n);return new t(Object.assign(e,{cell:s}))}}gx.className="RNN",ki(gx);class yx extends Ug{}class bx extends yx{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,jf(this.units,"units"),this.activation=Ob(null==t.activation?this.DEFAULT_ACTIVATION:t.activation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=cg(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=cg(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=cg(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Vb(t.kernelRegularizer),this.recurrentRegularizer=Vb(t.recurrentRegularizer),this.biasRegularizer=Vb(t.biasRegularizer),this.kernelConstraint=sm(t.kernelConstraint),this.recurrentConstraint=sm(t.recurrentConstraint),this.biasConstraint=sm(t.biasConstraint),this.dropout=Im([1,Cm([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=Im([1,Cm([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=Fg(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Vi(()=>{if(2!==(t=t).length)throw new Ef(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let n=t[1];t=t[0];const s=null!=e.training&&e.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Cx({ones:()=>Ju(t),rate:this.dropout,training:s})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Cx({ones:()=>Ju(n),rate:this.recurrentDropout,training:s}));const a=this.dropoutMask,i=this.recurrentDropoutMask;r=Mm(null!=a?ro(t,a):t,this.kernel.read()),null!=this.bias&&(r=Pm(r,this.bias.read())),null!=i&&(n=ro(n,i));let o=eo(r,Mm(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){const t=super.getConfig(),e={units:this.units,activation:Fb(this.activation),useBias:this.useBias,kernelInitializer:ug(this.kernelInitializer),recurrentInitializer:ug(this.recurrentInitializer),biasInitializer:ug(this.biasInitializer),kernelRegularizer:Pb(this.kernelRegularizer),recurrentRegularizer:Pb(this.recurrentRegularizer),biasRegularizer:Pb(this.biasRegularizer),activityRegularizer:Pb(this.activityRegularizer),kernelConstraint:em(this.kernelConstraint),recurrentConstraint:em(this.recurrentConstraint),biasConstraint:em(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},t,e)}}bx.className="SimpleRNNCell",ki(bx);class xx extends gx{constructor(t){t.cell=new bx(t),super(t)}call(t,e){return Vi(()=>{null!=this.cell.dropoutMask&&(Ui(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ui(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,s=null==e?null:e.training,r=null==e?null:e.initialState;return super.call(t,{mask:n,training:s,initialState:r})})}static fromConfig(t,e){return new t(e)}}xx.className="SimpleRNN",ki(xx);class wx extends yx{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new Ef("GRUCell does not support reset_after parameter set to true.");this.units=t.units,jf(this.units,"units"),this.activation=Ob(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Ob(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=cg(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=cg(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=cg(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Vb(t.kernelRegularizer),this.recurrentRegularizer=Vb(t.recurrentRegularizer),this.biasRegularizer=Vb(t.biasRegularizer),this.kernelConstraint=sm(t.kernelConstraint),this.recurrentConstraint=sm(t.recurrentConstraint),this.biasConstraint=sm(t.biasConstraint),this.dropout=Im([1,Cm([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=Im([1,Cm([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){const e=(t=Fg(t))[t.length-1];this.kernel=this.addWeight("kernel",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Vi(()=>{if(2!==(t=t).length)throw new Ef("GRUCell expects 2 input Tensors (inputs, h, c), got "+t.length+".");const n=null!=e.training&&e.training;let s=t[1];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Cx({ones:()=>Ju(t),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Cx({ones:()=>Ju(s),rate:this.recurrentDropout,training:n,count:3}));const r=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(t=ro(t,r[0]));let u=Mm(t,this.kernel.read());this.useBias&&(u=Pm(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=ro(s,a[0]));const c=this.recurrentKernel.read(),[h,p]=Uc(c,[2*this.units,this.units],c.rank-1),d=Mm(s,h),[f,m,g]=Uc(u,3,u.rank-1),[y,b]=Uc(d,2,d.rank-1);i=this.recurrentActivation.apply(eo(f,y)),o=this.recurrentActivation.apply(eo(m,b));const x=Mm(ro(o,s),p);l=this.activation.apply(eo(g,x));const w=eo(ro(i,s),ro(eo(1,Cu(i)),l));return[w,w]})}getConfig(){const t=super.getConfig(),e={units:this.units,activation:Fb(this.activation),recurrentActivation:Fb(this.recurrentActivation),useBias:this.useBias,kernelInitializer:ug(this.kernelInitializer),recurrentInitializer:ug(this.recurrentInitializer),biasInitializer:ug(this.biasInitializer),kernelRegularizer:Pb(this.kernelRegularizer),recurrentRegularizer:Pb(this.recurrentRegularizer),biasRegularizer:Pb(this.biasRegularizer),activityRegularizer:Pb(this.activityRegularizer),kernelConstraint:em(this.kernelConstraint),recurrentConstraint:em(this.recurrentConstraint),biasConstraint:em(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},t,e)}}wx.className="GRUCell",ki(wx);class vx extends gx{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new wx(t),super(t)}call(t,e){return Vi(()=>{null!=this.cell.dropoutMask&&(Ui(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ui(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,s=null==e?null:e.training,r=null==e?null:e.initialState;return super.call(t,{mask:n,training:s,initialState:r})})}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}vx.className="GRU",ki(vx);class kx extends yx{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,jf(this.units,"units"),this.activation=Ob(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Ob(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=cg(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=cg(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=cg(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=Vb(t.kernelRegularizer),this.recurrentRegularizer=Vb(t.recurrentRegularizer),this.biasRegularizer=Vb(t.biasRegularizer),this.kernelConstraint=sm(t.kernelConstraint),this.recurrentConstraint=sm(t.recurrentConstraint),this.biasConstraint=sm(t.biasConstraint),this.dropout=Im([1,Cm([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=Im([1,Cm([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;const n=(t=Fg(t))[t.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const t=this.biasInitializer,n=this.units;s=new((e=class extends Hm{apply(e,s){const r=t.apply([n]),a=(new qm).apply([n]),i=t.apply([2*n]);return Fm(Fm(r,a),i)}}).className="CustomInit",e)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return Vi(()=>{const n=null!=e.training&&e.training;if(3!==(t=t).length)throw new Ef("LSTMCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");let s=t[1];const r=t[2];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Cx({ones:()=>Ju(t),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Cx({ones:()=>Ju(s),rate:this.recurrentDropout,training:n,count:4}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(t=ro(t,a[0]));let h=Mm(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=ro(s,i[0])),h=eo(h,Mm(s,this.recurrentKernel.read())),this.useBias&&(h=Pm(h,this.bias.read()));const[p,d,f,m]=Uc(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=eo(ro(l,r),ro(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=ro(c,this.activation.apply(u));return[g,g,u]})}getConfig(){const t=super.getConfig(),e={units:this.units,activation:Fb(this.activation),recurrentActivation:Fb(this.recurrentActivation),useBias:this.useBias,kernelInitializer:ug(this.kernelInitializer),recurrentInitializer:ug(this.recurrentInitializer),biasInitializer:ug(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Pb(this.kernelRegularizer),recurrentRegularizer:Pb(this.recurrentRegularizer),biasRegularizer:Pb(this.biasRegularizer),activityRegularizer:Pb(this.activityRegularizer),kernelConstraint:em(this.kernelConstraint),recurrentConstraint:em(this.recurrentConstraint),biasConstraint:em(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},t,e)}}kx.className="LSTMCell",ki(kx);class Nx extends gx{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new kx(t),super(t)}call(t,e){return Vi(()=>{null!=this.cell.dropoutMask&&(Ui(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ui(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,s=null==e?null:e.training,r=null==e?null:e.initialState;return super.call(t,{mask:n,training:s,initialState:r})})}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}Nx.className="LSTM",ki(Nx);class Ix extends yx{constructor(t){super(t),this.cells=t.cells}get stateSize(){const t=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return Vi(()=>{let n=(t=t).slice(1);const s=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?s.push(n.splice(0,t.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],a=0===i?[t[0]].concat(n):[a[0]].concat(n),a=o.call(a,e),r.push(a.slice(1))}n=[];for(const t of r.slice().reverse())n.push(...t);return[a[0]].concat(n)})}build(t){let e;Ag(t)&&(t=t[0]),t=t,this.cells.forEach((n,s)=>{ym("RNNCell_"+s,()=>{n.build(t),e=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,t=[t[0],e]})}),this.built=!0}getConfig(){const t=super.getConfig(),e={cells:this.cells.map(t=>({className:t.getClassName(),config:t.getConfig()}))};return Object.assign({},t,e)}static fromConfig(t,e,n={}){const s=[];for(const t of e.cells)s.push(sy(t,n));return new t({cells:s})}get trainableWeights(){if(!this.trainable)return[];const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e.concat(t)}return t}getWeights(){const t=[];for(const e of this.cells)t.push(...e.weights);return Mg(t)}setWeights(t){const e=[];for(const n of this.cells){const s=n.weights.length,r=t.splice(s);for(let t=0;t<n.weights.length;++t)e.push([n.weights[t],r[t]])}Lg(e)}}function Cx(t){const{ones:e,rate:n,training:s=!1,count:r=1}=t,a=()=>Wm(e(),n),i=()=>Vm(a,e,s);if(!r||r<=1)return Gi(i().clone());return Array(r).fill(void 0).map(i).map(t=>Gi(t.clone()))}Ix.className="StackedRNNCells",ki(Ix);var Sx=function(t,e){var n={};for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&e.indexOf(s)<0&&(n[s]=t[s]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(t);r<s.length;r++)e.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(t,s[r])&&(n[s[r]]=t[s[r]])}return n};class Tx extends gx{constructor(t){if(t.unroll)throw new $f("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(t.cell))throw new $f("It is not possible at the moment to stack convolutional cells.");super(t),this.inputSpec=[new zg({ndim:5})]}call(t,e){return Vi(()=>{if(null!=this.cell.dropoutMask&&(Ui(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ui(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),e&&e.constants)throw new Ef("ConvRNN2D cell does not support constants");const n=null==e?null:e.mask,s=null==e?null:e.training,r=null==e?null:e.initialState;return super.call(t,{mask:n,training:s,initialState:r})})}computeOutputShape(t){let e=this.computeSingleOutputShape(t);return this.returnSequences||(e=[e[0],...e.slice(2)]),this.returnState&&(e=[e,...Array(2).fill([t[0],...e.slice(-3)])]),e}getInitialState(t){return Vi(()=>{const{stateSize:e}=this.cell,n=t.shape,s=this.computeSingleOutputShape(n),r=Bu([s[0],...s.slice(2)]);return Array.isArray(e)?Array(e.length).fill(r):[r]})}resetStates(t,e=!1){Vi(()=>{if(!this.stateful)throw new Sf("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new Ef("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>Bu(r)):this.states_=[Bu(r)];else if(null==t)Ui(this.states_),null!=this.keptStates&&(Ui(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>Bu(r)):this.states_[0]=Bu(r);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new Ef(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: `+t);e?this.keptStates.push(this.states_.slice()):Ui(this.states_);for(let e=0;e<this.states_.length;++e){const n=t[e],s=r;if(!rt(n.shape,s))throw new Ef(`State ${e} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[e]=n}}this.states_=this.states_.map(t=>Gi(t.clone()))})}computeSingleOutputShape(t){const{dataFormat:e,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===e,l=t[o?3:2],u=t[o?4:3],c=Yb(l,s[0],r,a[0],i[0]),h=Yb(u,s[1],r,a[1],i[1]);return[...t.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Tx.className="ConvRNN2D";class Ex extends kx{constructor(t){const{filters:e,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=t;super(Object.assign({},t,{units:e})),this.filters=e,jf(this.filters,"filters"),this.kernelSize=Xb(n,2,"kernelSize"),this.kernelSize.forEach(t=>jf(t,"kernelSize")),this.strides=Xb(s||1,2,"strides"),this.strides.forEach(t=>jf(t,"strides")),this.padding=r||"valid",fm(this.padding),this.dataFormat=a||"channelsLast",dm(this.dataFormat),this.dilationRate=Xb(i||1,2,"dilationRate"),this.dilationRate.forEach(t=>jf(t,"dilationRate"))}build(t){var e;t=Fg(t);const n="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[n])throw new Ef("The channel dimension of the input should be defined. Found "+t[n]);const s=t[n],r=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let t;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;t=new((e=class extends Hm{apply(t,e){return Dm([n.apply([s]),Pu([s]),n.apply([2*s])])}}).className="CustomInit",e)}else t=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,t,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(t,e){return Vi(()=>{if(3!==t.length)throw new Ef("ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");const n=e.training||!1,s=t[0],r=t[1],a=t[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Cx({ones:()=>Ju(s),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(t,e,n)=>e&&e[n]?ro(e[n],t):t;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Cx({ones:()=>Ju(r),rate:this.recurrentDropout,training:n,count:4}));const p=this.recurrentDropoutMask;let d=o(r,p,0),f=o(r,p,1),m=o(r,p,2),g=o(r,p,3);const[y,b,x,w]=Uc(this.kernel.read(),4,3),[v,k,N,I]=this.useBias?Uc(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,v,this.padding),u=this.inputConv(u,b,k,this.padding),c=this.inputConv(c,x,N,this.padding),h=this.inputConv(h,w,I,this.padding);const[C,S,T,E]=Uc(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,C),f=this.recurrentConv(f,S),m=this.recurrentConv(m,T),g=this.recurrentConv(g,E);const $=this.recurrentActivation.apply(eo(l,d)),A=this.recurrentActivation.apply(eo(u,f)),R=eo(ro(A,a),ro($,this.activation.apply(eo(c,m)))),D=ro(this.recurrentActivation.apply(eo(h,g)),this.activation.apply(R));return[D,D,R]})}getConfig(){const t=super.getConfig(),{units:e}=t,n=Sx(t,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,s)}inputConv(t,e,n,s){const r=_l(t,e,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Pm(r,n,this.dataFormat):r}recurrentConv(t,e){return _l(t,e,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Ex.className="ConvLSTM2DCell",ki(Ex);class $x extends Tx{constructor(t){const e=new Ex(t);super(Object.assign({},t,{cell:e}))}static fromConfig(t,e){return new t(e)}}$x.className="ConvLSTM2D",ki($x);class Ax extends Ug{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(null==this.noiseShape)return this.noiseShape;const e=t.shape,n=[];for(let t=0;t<this.noiseShape.length;++t)n.push(null==this.noiseShape[t]?e[t]:this.noiseShape[t]);return n}call(t,e){return Vi(()=>{this.invokeCallHook(t,e);const n=Dg(t);if(0<this.rate&&this.rate<1){const t=null!=e.training&&e.training,s=this.getNoiseShape(n);return Vm(()=>Wm(n,this.rate,s,this.seed),()=>n,t)}return t})}getConfig(){const t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}}Ax.className="Dropout",ki(Ax);class Rx extends Ax{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){const e=t.shape;return[e[0],1,e[2]]}}Rx.className="SpatialDropout1D",ki(Rx);class Dx extends Ug{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){let e=null;null!=t.batchSize&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,jf(this.units,"units"),this.activation=Ob(t.activation),null!=t.useBias&&(this.useBias=t.useBias),this.kernelInitializer=cg(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=cg(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=sm(t.kernelConstraint),this.biasConstraint=sm(t.biasConstraint),this.kernelRegularizer=Vb(t.kernelRegularizer),this.biasRegularizer=Vb(t.biasRegularizer),this.activityRegularizer=Vb(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){const e=(t=Fg(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){const e=(t=Fg(t)).slice();return e[e.length-1]=this.units,e}call(t,e){return Vi(()=>{this.invokeCallHook(t,e);const n=Dg(t),s=qf(this.activation.getClassName());let r;return null!=s?r=Mm(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=Mm(n,this.kernel.read()),null!=this.bias&&(r=Pm(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r})}getConfig(){const t={units:this.units,activation:Fb(this.activation),useBias:this.useBias,kernelInitializer:ug(this.kernelInitializer),biasInitializer:ug(this.biasInitializer),kernelRegularizer:Pb(this.kernelRegularizer),biasRegularizer:Pb(this.biasRegularizer),activityRegularizer:Pb(this.activityRegularizer),kernelConstraint:em(this.kernelConstraint),biasConstraint:em(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Dx.className="Dense",ki(Dx);class Fx extends Ug{constructor(t){super(t=t||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=Fg(t);for(const e of t.slice(1))if(null==e)throw new Ef(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],km(t,1)]}call(t,e){return Vi(()=>{this.invokeCallHook(t,e);let n=Dg(t);if("channelsFirst"===this.dataFormat&&n.rank>1){const t=[0];for(let e=2;e<n.rank;++e)t.push(e);t.push(1),n=n.transpose(t)}return function(t){if(t.rank<=1)throw new Ef(`batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`);const e=[t.shape[0],km(t.shape,1)];return t.reshape(e)}(n)})}getConfig(){const t={};null!=this.dataFormat&&(t.dataFormat=this.dataFormat);const e=super.getConfig();return Object.assign(t,e),t}}Fx.className="Flatten",ki(Fx);class _x extends Ug{constructor(t){super(t),this.supportsMasking=!0,this.activation=Ob(t.activation)}call(t,e){return Vi(()=>{this.invokeCallHook(t,e);const n=Dg(t);return this.activation.apply(n)})}getConfig(){const t={activation:Fb(this.activation)},e=super.getConfig();return Object.assign(t,e),t}}_x.className="Activation",ki(_x);class Ox extends Ug{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return Vi(()=>{return t=Dg(t),e=t,n=this.n,Vi(()=>{if(2!==e.shape.length)throw new Ef(`repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`);return _m(Em(e,1),[1,n,1])});var e,n})}getConfig(){const t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}}Ox.className="RepeatVector",ki(Ox);class Mx extends Ug{constructor(t){super(t),this.targetShape=t.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(t){return t<0||null==t}fixUnknownDimension(t,e){const n="Total size of new array must be unchanged.",s=e.slice();let r=1,a=null;for(let t=0;t<s.length;++t){const e=s[t];if(this.isUnknown(e)){if(null!==a)throw new Ef("Can only specifiy one unknown dimension.");a=t}else r*=e}const i=km(t);if(null!==a){if(0===r||i%r!=0)throw new Ef(n);s[a]=i/r}else if(i!==r)throw new Ef(n);return s}computeOutputShape(t){let e=!1;for(let n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return Vi(()=>{this.invokeCallHook(t,e);const n=Dg(t),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return n.reshape(r)})}getConfig(){const t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}}Mx.className="Reshape",ki(Mx);class Lx extends Ug{constructor(t){if(super(t),null==t.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+t.dims+" instead.");const e=Sm(1,t.dims.length+1);if(!rt(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new zg({ndim:this.dims.length+1})]}computeOutputShape(t){const e=(t=Fg(t)).slice();return this.dims.forEach((n,s)=>{e[s+1]=t[n]}),e}call(t,e){return Xa(Dg(t),this.dimsIncludingBatch)}getConfig(){const t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}}Lx.className="Permute",ki(Lx);class zx extends Ug{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,this.maskValue=null!=t?null==t.maskValue?0:t.maskValue:0}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){const n=Dg(t);return Ho(Xu(n,this.maskValue),-1)}call(t,e){return Vi(()=>{this.invokeCallHook(t,e);const n=Dg(t),s=Ho(Xu(n,this.maskValue),-1,!0);return n.mul(s.asType(n.dtype))})}}zx.className="Masking",ki(zx);class Bx extends Ug{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==t.batchInputShape&&null==t.inputShape){let e=null;null!=t.batchSize&&(e=t.batchSize),null==t.inputLength?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(Of(t.inputLength))}this.inputDim=t.inputDim,jf(this.inputDim,"inputDim"),this.outputDim=t.outputDim,jf(this.outputDim,"outputDim"),this.embeddingsInitializer=cg(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Vb(t.embeddingsRegularizer),this.activityRegularizer=Vb(t.activityRegularizer),this.embeddingsConstraint=sm(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return Vi(()=>this.maskZero?(t=Dg(t),Xu(t,oo(t))):null)}computeOutputShape(t){if(t=Fg(t),null==this.inputLength)return[...t,this.outputDim];const e=Of(this.inputLength);if(e.length!==t.length-1)throw new Ef(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);{let n=0;for(let s=0;s<e.length;++s){const r=e[s],a=t[s+1];if(null!=r&&null!=a&&r!==a)throw new Ef(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);null==r&&(e[n]=a),n++}}return[t[0],...e,this.outputDim]}call(t,e){return Vi(()=>{this.invokeCallHook(t,e);let n=Dg(t);"int32"!==n.dtype&&(n=Tm(n,"int32"));return Lm(this.embeddings.read(),n.as1D()).reshape(Fg(this.computeOutputShape(n.shape)))})}getConfig(){const t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:ug(this.embeddingsInitializer),embeddingsRegularizer:Pb(this.embeddingsRegularizer),activityRegularizer:Pb(this.activityRegularizer),embeddingsConstraint:em(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}}Bx.className="Embedding",ki(Bx);class Px extends Ug{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new $f}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const n=t.slice(0,t.length-e.length);for(let s=0;s<e.length;++s){const r=t[t.length-e.length+s],a=e[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new Ef("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));n.push(r)}}return n}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[Fg(t)]),(t=t).length<2)throw new Ef(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const n of t)null!=n&&null!==n[0]&&e.push(n[0]);if(e=Vf(e),e.length>1)throw new Ef(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let n=null==t[0]?null:t[0].slice(1);for(let e=1;e<t.length;++e){const s=null==t[e]?null:t[e].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=t.map(t=>t.length);-1===t.indexOf(null)&&1===Vf(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return Vi(()=>{if(t=t,this.reshapeRequired){const e=[],n=t.map(t=>t.rank);if(-1===n.indexOf(null)){const s=Cm(n);for(let n of t){const t=n.rank;for(let e=0;e<s-t;++e)n=Em(n,1);e.push(n)}return this.mergeFunction(e)}{let n=!1;for(const s of t){const t=s.rank;if(null==t){const t=s.shape,r=t[0],a=t.slice(1).concat([r]);let i=s.reshape([r].concat(km(t.slice(1))));i=Xa(i,[1,0]),i=i.reshape(a),e.push(i),n=!0}else if(t>1){const r=Sm(1,t).concat([0]);e.push(Xa(s,r)),n=!0}else e.push(s)}let s=this.mergeFunction(e);const r=s.rank;if(n)if(null==r){const t=s.shape,e=t[t.length-1],n=[e].concat(t.slice(0,t.length-1));s=Xa(s.reshape([-1,e]),[1,0]).reshape(n)}else if(r>1){const t=[r-1].concat(Sm(0,r-1));s=Xa(s,t)}return s}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==(t=t)[0]?null:t[0].slice(1);for(let n=1;n<t.length;++n){const s=null==t[n]?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,s)}let n=[];for(const e of t)null!=e&&null!==e[0]&&n.push(e[0]);return n=Vf(n),e=1===n.length?n.concat(e):[null].concat(e),e}computeMask(t,e){return Vi(()=>{if(null==e)return null;if(!Array.isArray(e))throw new Ef("`mask` should be an Array");if(!Array.isArray(t))throw new Ef("`inputs` should be an Array");if(e.length!==t.length)throw new Ef(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(t=>null==t))return null;let n=(e=e.map(t=>null==t?t:eu(t,0)))[0];for(let t=1;t<e.length-1;++t)n=Du(n,e[t]);return n})}}class Wx extends Px{constructor(t){super(t)}mergeFunction(t){return Vi(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=eo(e,t[n]);return e})}}Wx.className="Add",ki(Wx);class Vx extends Px{constructor(t){super(t)}mergeFunction(t){return Vi(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=ro(e,t[n]);return e})}}Vx.className="Multiply",ki(Vx);class Ux extends Px{constructor(t){super(t)}mergeFunction(t){return Vi(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=eo(e,t[n]);return ro(1/t.length,e)})}}Ux.className="Average",ki(Ux);class Gx extends Px{constructor(t){super(t)}mergeFunction(t){return Vi(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=Eo(e,t[n]);return e})}}Gx.className="Maximum",ki(Gx);class Hx extends Px{constructor(t){super(t)}mergeFunction(t){return Vi(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=Uu(e,t[n]);return e})}}Hx.className="Minimum",ki(Hx);class jx extends Px{constructor(t){super(t),this.DEFAULT_AXIS=-1,null==t&&(t={}),this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new Ef("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(const n of t)if(null!=n){e=!1;break}if(e)return;const n=[];for(let e=0;e<t.length;++e){const s=t[e].slice();s.splice(this.axis,1);let r=!1;for(const t of n)if(rt(t,s)){r=!0;break}r||n.push(s)}if(n.length>1)throw new Ef("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return Vi(()=>Dm(t,this.axis))}computeOutputShape(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new Ef("A `Concatenate` layer should be called on a list of inputs.");const e=t,n=e[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const t of e.slice(1)){if(null==n[s]||null==t[s]){n[s]=null;break}n[s]+=t[s]}return n}computeMask(t,e){if(null==e)return null;if(!Array.isArray(e))throw new Ef("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new Ef("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new Ef(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return Vi(()=>{let n=!0;if(e.forEach(t=>{null==t||(n=!1)}),n)return null;const s=[];for(let n=0;n<t.length;++n)null==e[n]?s.push(Ju(t[n]).asType("bool")):e[n].rank<t[n].rank?s.push(eu(e[n],-1)):s.push(e[n]);const r=gl(s,this.axis);return Go(r,-1,!1)})}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function qx(t,e){for(;t<0;)t+=e;return t}jx.className="Concatenate",ki(jx);class Kx extends Px{constructor(t){super(t),this.axes=t.axes,this.normalize=null!=t.normalize&&t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){Z(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0],n=t[1];if(e.length>3||n.length>3)throw new $f("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(e,n);if(e[s[0]]!==n[s[1]])throw new Ef(`Dimension incompatibility: ${e[s[0]]} !== ${n[s[1]]}`)}mergeFunction(t){if(2!==t.length)throw new Ef(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e,n=t[0],s=t[1];return e=Array.isArray(this.axes)?this.axes.map((e,n)=>qx(e,t[n].shape.length)):[qx(this.axes,n.shape.length),qx(this.axes,s.shape.length)],this.normalize&&(n=ry(n,e[0]),s=ry(s,e[1])),function(t,e,n){if(t.shape.length>3||e.shape.length>3)throw new $f("batchDot is not implemented for tensors of 4D or higher rank yet");if(Z(t.shape.length>=2,()=>"batchDot requires the rank of x to be >= 2, but got "+t.shape.length),Z(t.shape.length>=2,()=>"batchDot requires the rank of y to be >= 2, but got "+e.shape.length),"number"==typeof n&&(n=[n,n]),"complex64"===t.dtype||"complex64"===e.dtype)throw new $f("batchDot is not implemented for complex64-type Tensors yet.");const s=t.shape.length,r=e.shape.length;null==n&&(n=[s-1,r-2]);const a=n;return Vi(()=>{let n,i;if(s>r){n=s-r;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else if(r>s){n=r-s;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else n=0;if(2===t.shape.length&&2===e.shape.length)i=a[0]===a[1]?t.mul(e).sum(a[0]):t.transpose([1,0]).mul(e).sum(a[1]);else{const n=a[0]!==t.shape.length-1,s=a[1]===e.shape.length-1;i=t.matMul(e,n,s)}if(n>0){let t;t=s>r?s+r-3:s-1;const e=[];for(let s=t;s<t+n;++s)e.push(s);i=i.squeeze(e)}return 1===i.shape.length&&(i=i.expandDims(1)),i})}(n,s,e)}interpretAxes(t,e){let n;return n=Array.isArray(this.axes)?this.axes:[qx(this.axes,t.length),qx(this.axes,e.length)],n}computeOutputShape(t){Z(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0].slice(),n=t[1].slice();if(e.length>3||n.length>3)throw new $f("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(e,n);e.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=e.concat(n);return 1===r.length&&r.push(1),r}computeMask(t,e){return null}getConfig(){const t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}}Kx.className="Dot",ki(Kx);class Xx extends Ug{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return Vi(()=>{this.invokeCallHook(t,e);const n=Dg(t);return Vm(()=>Om(n.shape,0,this.stddev).add(n),()=>n,e.training||!1)})}}Xx.className="GaussianNoise",ki(Xx);class Yx extends Ug{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Vi(()=>{this.invokeCallHook(t,e);const n=Dg(t);if(this.rate>0&&this.rate<1){return Vm(()=>{const t=Math.sqrt(this.rate/(1-this.rate));return n.mul(Om(n.shape,1,t))},()=>n,e.training||!1)}return n})}}Yx.className="GaussianDropout",ki(Yx);class Jx extends Ug{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||Dg(t).shape}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Vi(()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(t);return Vm(()=>{const e=Dg(t),s=-1.7580993408473766;let r=du(mc(n),this.rate);r=Tm(r,"float32");const a=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-a*s*this.rate;return e.mul(r).add(r.add(-1).mul(s)).mul(a).add(i)},()=>Dg(t),e.training||!1)}return t})}}function Zx(t,e,n,s,r,a=.001){let i;if(2===t.rank)i=Il(t,e,n,s,r,a);else if(3===t.rank)i=Cl(t,e,n,s,r,a);else{if(4!==t.rank)throw new $f(`batchNormalization is not implemented for array of rank ${t.rank} yet`);i=Sl(t,e,n,s,r,a)}return i}function Qx(t,e,n,s,r=.001){return rt(s.slice().sort(),Sm(0,t.rank-1))?function(t,e,n,s,r=.001){return Vi(()=>{const a=ju(t,s),i=a.mean,o=a.variance;return[Zx(t,i,o,n,e,r),i,o]})}(t,e,n,s,r):function(t,e,n,s,r=.001){return Vi(()=>{const a=ju(t,s),i=a.mean,o=a.variance,l=[];for(const e of Sm(0,t.rank))-1!==s.indexOf(e)?l.push(1):l.push(t.shape[e]);const u=i.reshape(l),c=o.reshape(l),h=null==e?null:e.reshape(l),p=null==n?null:n.reshape(l);return[Zx(t,u,c,p,h,r),i,o]})}(t,e,n,s,r)}Jx.className="AlphaDropout",ki(Jx);class tw extends Ug{constructor(t){null==t&&(t={}),super(t),this.supportsMasking=!0,this.axis=null==t.axis?-1:t.axis,this.momentum=null==t.momentum?.99:t.momentum,this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=cg(t.betaInitializer||"zeros"),this.gammaInitializer=cg(t.gammaInitializer||"ones"),this.movingMeanInitializer=cg(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=cg(t.movingVarianceInitializer||"ones"),this.betaConstraint=sm(t.betaConstraint),this.gammaConstraint=sm(t.gammaConstraint),this.betaRegularizer=Vb(t.betaRegularizer),this.gammaRegularizer=Vb(t.gammaRegularizer)}build(t){t=Fg(t);const e=this.axis>=0?this.axis:this.axis+t.length,n=t[e];if(null==n)throw new Ef(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape `+JSON.stringify(t)+".");this.inputSpec=[new zg({ndim:t.length,axes:{[e]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return Vi(()=>{const n=null!=e.training&&e.training,s=Dg(t),r=s.shape,a=r.length,i=Sm(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=Rf(1,a);l[o]=r[o];const u=i.slice();u.sort();const c=!rt(u,Sm(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const t=this.movingMean.read().reshape(l),e=this.movingVariance.read().reshape(l),n=this.center?this.beta.read().reshape(l):null,r=this.scale?this.gamma.read().reshape(l):null;return Zx(s,t,e,n,r,this.epsilon)}return Zx(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=Qx(s,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(t,e,n)=>{Vi(()=>{const s=1-n,r=t.read(),a=r.sub(e).mul(s);t.write(r.sub(a))})};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h})}getConfig(){const t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:ug(this.betaInitializer),gammaInitializer:ug(this.gammaInitializer),movingMeanInitializer:ug(this.movingMeanInitializer),movingVarianceInitializer:ug(this.movingVarianceInitializer),betaRegularizer:Pb(this.betaRegularizer),gammaRegularizer:Pb(this.gammaRegularizer),betaConstraint:em(this.betaConstraint),gammaConstraint:em(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}}tw.className="BatchNormalization",ki(tw);class ew extends Ug{constructor(t){if(null==t&&(t={}),super(t),this.axis=null==t.axis?-1:t.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error("Expected axis to be an integer, but received "+this.axis)}else{if(!Array.isArray(this.axis))throw new Error("Expected axis to be an integer or an array of integers, but received "+JSON.stringify(this.axis));for(const t of this.axis)if(!Number.isInteger(t))throw new Error("Expected axis to be an array of integers, but received "+JSON.stringify(this.axis))}this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=cg(t.betaInitializer||"zeros"),this.gammaInitializer=cg(t.gammaInitializer||"ones"),this.betaRegularizer=Vb(t.betaRegularizer),this.gammaRegularizer=Vb(t.gammaRegularizer),this.supportsMasking=!0}build(t){const e=(t=Fg(t)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let t=0;t<this.axis.length;++t)this.axis[t]<0&&(this.axis[t]+=e);for(const t of this.axis)if(t<0||t>=e)throw new Error("Invalid axis: "+t);if(this.axis.length!==Vf(this.axis).length)throw new Error("Found duplicate axes in: "+this.axis);const n=this.axis.map(e=>t[e]);this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(t,e){const n=Dg(t),s=n.shape,r=s.length;return Vi(()=>{let{mean:t,variance:e}=ju(n,this.axis,!0);const a=Rf(1,r);for(const t of this.axis)a[t]=s[t];const i=t=>null!=t&&t.shape.length!==r&&this.axis!==[r-1]?t.reshape(a):t;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let t=0;t<r;++t)-1!==this.axis.indexOf(t)?(u.push(s[t]),c.push(1)):(u.push(1),c.push(s[t]));return t=t.tile(u),e=e.tile(u),o=o.tile(c),l=l.tile(c),Zx(n,t,e,l,o,this.epsilon)})}getConfig(){const t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:ug(this.betaInitializer),gammaInitializer:ug(this.gammaInitializer),betaRegularizer:Pb(this.betaRegularizer),gammaRegularizer:Pb(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}}ew.className="LayerNormalization",ki(ew);class nw extends Ug{constructor(t){if(null==t&&(t={}),super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,null==t.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof t.padding)this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,2!==t.padding.length)throw new Ef(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,n;if("number"==typeof t.padding[0])e=[t.padding[0],t.padding[0]],n=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,2!==t.padding[0].length)throw new Ef(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],2!==t.padding[1].length)throw new Ef(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);n=t.padding[1]}this.padding=[e,n]}this.inputSpec=[new zg({ndim:4})]}computeOutputShape(t){let e,n;return t=Fg(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])}call(t,e){return Vi(()=>{return e=Dg(t),n=this.padding,s=this.dataFormat,Vi(()=>{if(4!==e.rank)throw new Ef("temporalPadding expects input tensor to be 4-D, but received a "+e.rank+"-D tensor.");if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Ef("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new Ef(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let t;return t="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],Qu(e,t)});var e,n,s})}getConfig(){const t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}function sw(t,e,n,s,r,a){return Vi(()=>{let i;dm(r),mm(a),fm(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),t=Zb(t,r);const o="same"===s?"same":"valid";return i="max"===a?Mu(t,e,n,o):pl(t,e,n,o),"channelsFirst"===r&&(i=Xa(i,[0,3,1,2])),i})}function rw(t,e,n,s,r,a){return Vi(()=>{let i;dm(r),mm(a),fm(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),t=Qb(t,r);const o="same"===s?"same":"valid";return i="max"===a?Lu(t,e,n,o):dl(t,e,n,o),"channelsFirst"===r&&(i=Xa(i,[0,4,1,2,3])),i})}nw.className="ZeroPadding2D",ki(nw);class aw extends Ug{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new Ef("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.poolSize));this.poolSize=t.poolSize}if(jf(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new Ef("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.strides));this.strides=t.strides}jf(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,fm(this.padding),this.inputSpec=[new zg({ndim:3})]}computeOutputShape(t){const e=Yb((t=Fg(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return Vi(()=>{this.invokeCallHook(t,e),t=Em(Dg(t),2);const n=this.poolingFunction(Dg(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return jc(n,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}class iw extends aw{constructor(t){super(t)}poolingFunction(t,e,n,s,r){return dm(r),fm(s),sw(t,e,n,s,r,"max")}}iw.className="MaxPooling1D",ki(iw);class ow extends aw{constructor(t){super(t)}poolingFunction(t,e,n,s,r){return dm(r),fm(s),sw(t,e,n,s,r,"avg")}}ow.className="AveragePooling1D",ki(ow);class lw extends Ug{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new Ef("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides];jf(this.poolSize,"poolSize"),jf(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,dm(this.dataFormat),fm(this.padding),this.inputSpec=[new zg({ndim:4})]}computeOutputShape(t){t=Fg(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2];return e=Yb(e,this.poolSize[0],this.padding,this.strides[0]),n=Yb(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]}call(t,e){return Vi(()=>(this.invokeCallHook(t,e),this.poolingFunction(Dg(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class uw extends lw{constructor(t){super(t)}poolingFunction(t,e,n,s,r){return dm(r),fm(s),sw(t,e,n,s,r,"max")}}uw.className="MaxPooling2D",ki(uw);class cw extends lw{constructor(t){super(t)}poolingFunction(t,e,n,s,r){return dm(r),fm(s),sw(t,e,n,s,r,"avg")}}cw.className="AveragePooling2D",ki(cw);class hw extends Ug{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new Ef("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];jf(this.poolSize,"poolSize"),jf(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,dm(this.dataFormat),fm(this.padding),this.inputSpec=[new zg({ndim:5})]}computeOutputShape(t){t=Fg(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],s="channelsFirst"===this.dataFormat?t[4]:t[3];return e=Yb(e,this.poolSize[0],this.padding,this.strides[0]),n=Yb(n,this.poolSize[1],this.padding,this.strides[1]),s=Yb(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n,s]:[t[0],e,n,s,t[4]]}call(t,e){return Vi(()=>(this.invokeCallHook(t,e),this.poolingFunction(Dg(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class pw extends hw{constructor(t){super(t)}poolingFunction(t,e,n,s,r){return dm(r),fm(s),rw(t,e,n,s,r,"max")}}pw.className="MaxPooling3D",ki(pw);class dw extends hw{constructor(t){super(t)}poolingFunction(t,e,n,s,r){return dm(r),fm(s),rw(t,e,n,s,r,"avg")}}dw.className="AveragePooling3D",ki(dw);class fw extends Ug{constructor(t){super(t),this.inputSpec=[new zg({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new $f}}class mw extends fw{constructor(t){super(t||{})}call(t,e){return Vi(()=>{const e=Dg(t);return Wu(e,1)})}}mw.className="GlobalAveragePooling1D",ki(mw);class gw extends fw{constructor(t){super(t||{})}call(t,e){return Vi(()=>{const e=Dg(t);return Eu(e,1)})}}gw.className="GlobalMaxPooling1D",ki(gw);class yw extends Ug{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,dm(this.dataFormat),this.inputSpec=[new zg({ndim:4})]}computeOutputShape(t){return t=t,"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new $f}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class bw extends yw{call(t,e){return Vi(()=>{const e=Dg(t);return"channelsLast"===this.dataFormat?Wu(e,[1,2]):Wu(e,[2,3])})}}bw.className="GlobalAveragePooling2D",ki(bw);class xw extends yw{call(t,e){return Vi(()=>{const e=Dg(t);return"channelsLast"===this.dataFormat?Eu(e,[1,2]):Eu(e,[2,3])})}}xw.className="GlobalMaxPooling2D",ki(xw);class ww extends Ug{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,n={}){const s=sy(e.layer,n);delete e.layer;const r={layer:s};return Object.assign(r,e),new t(r)}}class vw extends ww{constructor(t){super(t),this.supportsMasking=!0}build(t){if((t=Fg(t)).length<3)throw new Ef("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(t));this.inputSpec=[{shape:t}];const e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){const e=[(t=Fg(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e),s=t[1];return[n[0],s].concat(n.slice(1))}call(t,e){return Vi(()=>mx((t,n)=>[Dg(this.layer.call(t,e)),[]],t=Dg(t),[],!1,null,null,!1,!0)[1])}}vw.className="TimeDistributed",ki(vw);class kw extends ww{constructor(t){super(t);const e=t.layer.getConfig(),n={};n.className=t.layer.getClassName(),n.config=e,this.forwardLayer=sy(n),e.goBackwards=!0!==e.goBackwards;const s={};var r;if(s.className=t.layer.getClassName(),s.config=e,this.backwardLayer=sy(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===t.mergeMode?"concat":t.mergeMode,r=this.mergeMode,Gf(hm,"BidirectionalMergeMode",r),t.weights)throw new $f("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){const e=t.length,n=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,n)),this.backwardLayer.setWeights(t.slice(n))}computeOutputShape(t){let e,n,s,r=this.forwardLayer.computeOutputShape(t);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),r=r,this.returnState?(s=r.slice(1),e=r[0]):e=r[0],e=e,"concat"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[e].concat(s).concat(s.slice()):_f(n)}apply(t,e){let n=null==e?null:e.initialState,s=null==e?null:e.constants;null==e&&(e={});const r=fx(t,n,s,this.numConstants);if(t=r.inputs,n=r.initialState,s=r.constants,Array.isArray(t)&&(n=t.slice(1),t=t[0]),(null==n||0===n.length)&&null==s)return super.apply(t,e);const a=[],i=[];if(null!=n){const t=n.length;if(t%2>0)throw new Ef("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=n,a.push(...n);const s=n.map(t=>new zg({shape:t.shape}));this.forwardLayer.stateSpec=s.slice(0,t/2),this.backwardLayer.stateSpec=s.slice(t/2),i.push(...s)}if(null!=s)throw new $f("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof Bg;for(const t of a)if(t instanceof Bg!==o)throw new Ef("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[t].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,e);return this.inputSpec=r,o}return super.apply(t,e)}call(t,e){return Vi(()=>{const n=e.initialState;let s,r,a,i;if(null==n)s=this.forwardLayer.call(t,e),r=this.backwardLayer.call(t,e);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(t,Object.assign(e,{initialState:a})),r=this.backwardLayer.call(t,Object.assign(e,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=vc(r,1)),"concat"===this.mergeMode?i=Dm([s,r]):"sum"===this.mergeMode?i=eo(s,r):"ave"===this.mergeMode?i=ro(.5,eo(s,r)):"mul"===this.mergeMode?i=ro(s,r):null==this.mergeMode&&(i=[s,r]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i})}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){ym(this.forwardLayer.name,()=>{this.forwardLayer.build(t)}),ym(this.backwardLayer.name,()=>{this.backwardLayer.build(t)}),this.built=!0}computeMask(t,e){let n;if(Array.isArray(e)&&(e=e[0]),n=this.returnSequences?null==this.mergeMode?[e,e]:e:null==this.mergeMode?[null,null]:null,this.returnState){const t=this.forwardLayer.states.map(t=>null);return Array.isArray(n)?n.concat(t).concat(t):[n].concat(t).concat(t)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(t),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){const t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){const n=sy(e.layer);if(delete e.layer,null!=e.numConstants)throw new $f("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=e;return s.layer=n,new t(s)}}function Nw(t){return new Gg(t)}function Iw(t){return new jb(t)}function Cw(t){return new Ub(t)}function Sw(t){return new Gb(t)}function Tw(t){return new Hb(t)}function Ew(t){return new Kb(t)}function $w(t){return new qb(t)}function Aw(t){return new cx(t)}function Rw(t){return new ax(t)}function Dw(t){return new ox(t)}function Fw(t){return new ix(t)}function _w(t){return new ux(t)}function Ow(t){return new hx(t)}function Mw(t){return new px(t)}function Lw(t){return new dx(t)}function zw(t){return new _x(t)}function Bw(t){return new Dx(t)}function Pw(t){return new Ax(t)}function Ww(t){return new Rx(t)}function Vw(t){return new Fx(t)}function Uw(t){return new Ox(t)}function Gw(t){return new Mx(t)}function Hw(t){return new Lx(t)}function jw(t){return new Bx(t)}function qw(t){return new Wx(t)}function Kw(t){return new Ux(t)}function Xw(t){return new jx(t)}function Yw(t){return new Gx(t)}function Jw(t){return new Hx(t)}function Zw(t){return new Vx(t)}function Qw(t){return new Kx(t)}function tv(t){return new tw(t)}function ev(t){return new ew(t)}function nv(t){return new nw(t)}function sv(t){return new ow(t)}function rv(t){return sv(t)}function av(t){return sv(t)}function iv(t){return new cw(t)}function ov(t){return iv(t)}function lv(t){return iv(t)}function uv(t){return new dw(t)}function cv(t){return uv(t)}function hv(t){return uv(t)}function pv(t){return new mw(t)}function dv(t){return new bw(t)}function fv(t){return new gw(t)}function mv(t){return new xw(t)}function gv(t){return new iw(t)}function yv(t){return new uw(t)}function bv(t){return new pw(t)}function xv(t){return new vx(t)}function wv(t){return new wx(t)}function vv(t){return new Nx(t)}function kv(t){return new kx(t)}function Nv(t){return new xx(t)}function Iv(t){return new bx(t)}function Cv(t){return new $x(t)}function Sv(t){return new Ex(t)}function Tv(t){return new gx(t)}function Ev(t){return new Ix(t)}function $v(t){return new kw(t)}function Av(t){return new vw(t)}kw.className="Bidirectional",ki(kw);const Rv=fv,Dv=mv,Fv=gv,_v=yv;function Ov(t){return new Xx(t)}function Mv(t){return new Yx(t)}function Lv(t){return new Jx(t)}function zv(t){return new zx(t)}function Bv(t,e){return gy(t,e)}function Pv(t,e){return vy(t,e)}function Wv(t,e){return ky(t,e)}function Vv(t,e){return yy(t,e)}function Uv(t,e){return Ny(t,e)}function Gv(t,e){return xy(t,e)}function Hv(t,e){return wy(t,e)}function jv(t,e){return dy(t,e)}function qv(t,e){return iy(t,e)}function Kv(t,e){return oy(t,e)}function Xv(t,e){return oy(t,e)}function Yv(t,e){return oy(t,e)}function Jv(t,e){return ay(t,e)}function Zv(t,e){return ay(t,e)}function Qv(t,e){return ay(t,e)}function tk(t){return new zb(t)}function ek(t){return Mb(e=t),new zb({l1:null!=e?e.l1:null,l2:0});var e}function nk(t){return Mb(e=t),new zb({l2:null!=e?e.l2:null,l1:0});var e}class sk extends Xg{constructor(){super(...arguments),this.model=null}setModel(t){if(!(t instanceof ub))throw new Error("model must be a LayersModel, not some other Container");this.model=t}}function rk(t,e){return t<e}function ak(t,e){return t>e}class ik extends sk{constructor(t){if(super(),null==t&&(t={}),t.restoreBestWeights)throw new $f("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=t.monitor||"val_loss",this.minDelta=Math.abs(t.minDelta||0),this.patience=t.patience||0,this.verbose=t.verbose||0,this.mode=t.mode||"auto",this.baseline=t.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=rk:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=ak:this.monitorFunc=rk,this.monitorFunc===rk&&(this.minDelta*=-1)}async onTrainBegin(t){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===rk?1/0:-1/0}async onEpochEnd(t,e){await jg(e);const n=this.getMonitorValue(e);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=t,this.model.stopTraining=!0)))}async onTrainEnd(t){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(t){null==t&&(t={});const e=t[this.monitor];return null==e&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: `+Object.keys(t)),e}}const ok={earlyStopping:function(t){return new ik(t)}};var lk,uk;!function(t){t[t.DT_INVALID=0]="DT_INVALID",t[t.DT_FLOAT=1]="DT_FLOAT",t[t.DT_DOUBLE=2]="DT_DOUBLE",t[t.DT_INT32=3]="DT_INT32",t[t.DT_UINT8=4]="DT_UINT8",t[t.DT_INT16=5]="DT_INT16",t[t.DT_INT8=6]="DT_INT8",t[t.DT_STRING=7]="DT_STRING",t[t.DT_COMPLEX64=8]="DT_COMPLEX64",t[t.DT_INT64=9]="DT_INT64",t[t.DT_BOOL=10]="DT_BOOL",t[t.DT_QINT8=11]="DT_QINT8",t[t.DT_QUINT8=12]="DT_QUINT8",t[t.DT_QINT32=13]="DT_QINT32",t[t.DT_BFLOAT16=14]="DT_BFLOAT16",t[t.DT_FLOAT_REF=101]="DT_FLOAT_REF",t[t.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",t[t.DT_INT32_REF=103]="DT_INT32_REF",t[t.DT_UINT8_REF=104]="DT_UINT8_REF",t[t.DT_INT16_REF=105]="DT_INT16_REF",t[t.DT_INT8_REF=106]="DT_INT8_REF",t[t.DT_STRING_REF=107]="DT_STRING_REF",t[t.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",t[t.DT_INT64_REF=109]="DT_INT64_REF",t[t.DT_BOOL_REF=110]="DT_BOOL_REF",t[t.DT_QINT8_REF=111]="DT_QINT8_REF",t[t.DT_QUINT8_REF=112]="DT_QUINT8_REF",t[t.DT_QINT32_REF=113]="DT_QINT32_REF",t[t.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(lk||(lk={})),function(t){let e;!function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}(uk||(uk={}));const ck={};function hk(t,e){const n={tfOpName:t,category:"custom",inputs:[],attrs:[],customExecutor:e};ck[t]=n}function pk(t){return ck[t]}function dk(t){delete ck[t]}function fk(t,e,n,s,r){const a=e.inputParams[t];if(a&&void 0!==a.inputIndexStart){const t=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?t+1:a.inputIndexEnd;if("tensor"===a.type)return mk(e.inputNames[a.inputIndexStart],n,s,r);if("tensors"===a.type){return e.inputNames.slice(t,i).map(t=>mk(t,n,s,r))}const o=mk(e.inputNames.slice(t)[0],n,s,r),l=o.dataSync();return"number"===a.type?l[0]:$t(o.shape,l)}const i=e.attrParams[t];return i&&i.value}function mk(t,e,n,s){const[r,a]=bk(t);if(null!=s){const t=s.getHashTableHandleByName(r);if(null!=t)return t}const i=n.currentContextIds.find(t=>!!e[yk(r,t)]);return void 0!==i?e[yk(r,i)][a]:void 0}function gk(t,e){const[n,s]=bk(t);return[yk(n,e&&e.currentContextId),s]}function yk(t,e){return e?`${t}-${e}`:t}function bk(t){const e=t.split(":");if(1===e.length)return[t,0];return[e[0],Number(e[e.length-1])]}function xk(t,e,n){let s=fk("pad",t,e,n);if("explicit"===s){s=fk("explicitPaddings",t,e,n);const r=[[0,0],[0,0],[0,0],[0,0]];for(let t=0;t<4;t++)r[t][0]=s[2*t],r[t][1]=s[2*t+1];return r}return s}function wk(t){return t.kept?t:Ta(t)}const vk=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],kk=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Nk=[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],Ik=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],Ck=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],Sk=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Tk=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],Ek=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],$k=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]}],Ak=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],Rk=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Dk=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Fk=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],_k=[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],Ok=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],Mk=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Lk=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];class zk{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const t=[].concat(...[I,C,S,T,E,$,A,_,F,R,O,M,L,z,B,P,D].map(t=>t.json));this.opMappers=t.reduce((t,e)=>(t[e.tfOpName]=e,t),{})}transformGraph(t,e={}){const n=t.node,s=[],r=[],a=[],i=n.reduce((t,e)=>(t[e.name]=this.mapNode(e),e.op.startsWith("Placeholder")?s.push(t[e.name]):"Const"===e.op?r.push(t[e.name]):null!=e.input&&0!==e.input.length||a.push(t[e.name]),t),{});let o=[];const l=[];let u={},c={};null!=e&&(u=this.mapSignatureEntries(e.inputs),c=this.mapSignatureEntries(e.outputs));const h=Object.keys(i);h.forEach(t=>{const e=i[t];e.inputNames.forEach(t=>{const[n]=gk(t);e.inputs.push(i[n]),i[n].children.push(e)})}),0===Object.keys(c).length?h.forEach(t=>{const e=i[t];0===e.children.length&&l.push(e)}):Object.keys(c).forEach(t=>{const[e]=gk(t),n=i[e];null!=n&&(n.signatureKey=c[t],l.push(n))}),Object.keys(u).length>0?Object.keys(u).forEach(t=>{const[e]=gk(t),n=i[e];n&&(n.signatureKey=u[t],o.push(n))}):o=s;let p={};null!=t.library&&null!=t.library.function&&(p=t.library.function.reduce((t,e)=>(t[e.signature.name]=this.mapFunction(e),t),{}));const d={nodes:i,inputs:o,outputs:l,weights:r,placeholders:s,signature:e,functions:p};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,n)=>(e[t[n].name]=n,e),{})}mapNode(t){const e=pk(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(t=>t.startsWith("^")?t.substr(1):t),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr};return null!=e.inputs&&(n.inputParams=e.inputs.reduce((t,e)=>(t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce((e,n)=>{const s=n.type;let r=void 0;switch(n.type){case"string":r=Pk(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Pk(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":r=Yk(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Yk(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":r=Vk(t.attr,n.tfName,n.defaultValue||0),void 0===r&&n.tfDeprecatedName&&(r=Vk(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":r=Xk(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Xk(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":r=Wk(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Wk(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":r=Zk(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Zk(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":r=Kk(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Kk(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":r=Jk(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Jk(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":r=Hk(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Hk(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":r=jk(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=jk(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":r=Gk(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Gk(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${t.op}`)}return e[n.name]={value:r,type:s},e},{})),n}mapFunction(t){const e=t.nodeDef,n=[];let s={};null!=e&&(s=e.reduce((t,e)=>(t[e.name]=this.mapNode(e),"Const"===e.op&&n.push(t[e.name]),t),{}));const r=[],a=[];t.signature.inputArg.forEach(t=>{const[e]=gk(t.name),n={name:e,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Uk(t.type),type:"dtype"}},children:[]};n.signatureKey=t.name,r.push(n),s[e]=n});Object.keys(s).forEach(t=>{const e=s[t];e.inputNames.forEach(t=>{const[n]=gk(t);e.inputs.push(s[n]),s[n].children.push(e)})});const i=t.ret;t.signature.outputArg.forEach(t=>{const[e,n]=gk(i[t.name]),r=s[e];null!=r&&(r.defaultOutput=n,a.push(r))});const o=this.mapArgsToSignature(t);return{nodes:s,inputs:r,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((t,e)=>(t[e.name]=this.mapArgToTensorInfo(e),t),{}),outputs:t.signature.outputArg.reduce((e,n)=>(e[n.name]=this.mapArgToTensorInfo(n,t.ret),e),{})}}mapArgToTensorInfo(t,e){let n=t.name;return null!=e&&(n=e[n]),{name:n,dtype:t.type}}}function Bk(t,e){const n=Array.isArray(t)?String.fromCharCode.apply(null,t):function(t){const e=zt().global;if(void 0!==e.atob)return e.atob(t);if("undefined"!=typeof Buffer)return new Buffer(t,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(t);return e?n:n.toLowerCase()}function Pk(t,e,n,s=!1){const r=t[e];return null!=r?Bk(r.s,s):n}function Wk(t,e,n){const s=t[e];return s?s.b:n}function Vk(t,e,n){const s=t[e]||{},r=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof r?r:parseInt(r,10)}function Uk(t){switch("string"==typeof t&&(t=lk[t]),t){case lk.DT_FLOAT:return"float32";case lk.DT_INT32:case lk.DT_INT64:case lk.DT_INT8:case lk.DT_UINT8:return"int32";case lk.DT_BOOL:return"bool";case lk.DT_DOUBLE:return"float32";case lk.DT_STRING:return"string";default:return null}}function Gk(t,e,n){const s=t[e];return s&&s.func?s.func.name:n}function Hk(t,e,n){const s=t[e];return s&&s.type?Uk(s.type):n}function jk(t,e,n){const s=t[e];return s&&s.list&&s.list.type?s.list.type.map(t=>Uk(t)):n}function qk(t){if(!t.unknownRank)return null!=t.dim?t.dim.map(t=>"number"==typeof t.size?t.size:parseInt(t.size,10)):[]}function Kk(t,e,n){const s=t[e];return s&&s.shape?qk(s.shape):n}function Xk(t,e,n){const s=t[e];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map(t=>"number"==typeof t?t:parseInt(t,10)):n}function Yk(t,e,n,s=!1){const r=t[e];return r&&r.list&&r.list.s?r.list.s.map(t=>Bk(t,s)):n}function Jk(t,e,n){const s=t[e];return s&&s.list&&s.list.shape?s.list.shape.map(t=>qk(t)):n}function Zk(t,e,n){const s=t[e];return s&&s.list&&s.list.b?s.list.b:n}class Qk{constructor(t,e,n){this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(t=>this.getInput(t)),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((t,e)=>(t[e]=this.getAttr(e),t),{}))}getInput(t){return mk(t,this.tensorMap,this.context)}getAttr(t,e){const n=this.node.rawAttrs[t];if(null!=n.tensor)return mk(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Vk(this.node.rawAttrs,t,e);if(null!=n.s)return Pk(this.node.rawAttrs,t,e);if(null!=n.b)return Wk(this.node.rawAttrs,t,e);if(null!=n.shape)return Kk(this.node.rawAttrs,t,e);if(null!=n.type)return Hk(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Xk(this.node.rawAttrs,t,e);if(null!=n.list.s)return Yk(this.node.rawAttrs,t,e);if(null!=n.list.shape)return Jk(this.node.rawAttrs,t,e);if(null!=n.list.b)return Zk(this.node.rawAttrs,t,e);if(null!=n.list.type)return jk(this.node.rawAttrs,t,e)}return e}}function tN(t,e,n=""){Z(function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(-1!==t[n]&&-1!==e[n]&&t[n]!==e[n])return!1;return!0}(t,e),()=>n+` Shapes ${t} and ${e} must match`)}class eN{constructor(t,e,n,s,r,a,i){this.name=t,this.dtype=e,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=r,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=go(0),Gi(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach(e=>{null!=t&&t.has(e.tensor.id)||e.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(t=>this.read(t))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),tN(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);n.tensor=e,Gi(e),n.written=!0,this.tensors[t]=n}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((t,n)=>this.write(t,e[n]))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let e=0;e<this.size();e++)t.push(e)}if(0===t.length)return Mr([],[0].concat(this.elementShape));const n=this.readMany(t);return tN(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),qc(n,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return Mr([],[0].concat(this.elementShape));const e=[];for(let t=0;t<this.size();t++)e.push(t);const n=this.readMany(e);return tN(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),gl(n,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const n=Math.max(...t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(t,ah(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let n=0;const s=t.map(t=>(n+=t,n));if(n!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:e.size/n,a=[];Vi(()=>{e=ja(e,[1,n,r]);for(let n=0;n<t.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,t[n],r];a[n]=ja(bl(e,i,o),this.elementShape)}return a});const i=[];for(let e=0;e<t.length;e++)i[e]=e;this.writeMany(i,a)}}class nN{constructor(t,e,n,s=-1){this.tensors=t,this.elementShape=e,this.elementDtype=n,null!=t&&t.forEach(t=>{if(n!==t.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${t.dtype}`);tN(e,t.shape,"TensorList shape mismatch: "),Gi(t)}),this.idTensor=go(0),this.maxNumElements=s,Gi(this.idTensor)}get id(){return this.idTensor.id}copy(){return new nN([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach(e=>{null!=t&&t.has(e.id)||e.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,n=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);return tN(t,this.elementShape,"TensorList shape mismatch: "),Vi(()=>{const e=this.tensors.map(e=>ja(e,t));return qc(e,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return tN(n.shape,t,"TensorList shape mismatch: "),ja(n,t)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(tN(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Gi(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error("TensorListResize expects size to be non-negative. Got: "+t);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=t}getItem(t,e,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);return tN(this.tensors[t].shape,e,"TensorList shape mismatch: "),this.tensors[t]}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);tN(this.elementShape,e.shape,"TensorList shape mismatch: "),Gi(e),this.tensors[t]=e}gather(t,e,n){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);return tN(this.elementShape,n,"TensorList shape mismatch: "),0===(t=t.slice(0,this.size())).length?Mr([],[0].concat(this.elementShape)):Vi(()=>{const e=t.map(t=>ja(this.tensors[t],n));return qc(e,0)})}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);return tN(this.elementShape,e,"TensorList shape mismatch: "),0===this.size()?Mr([],[0].concat(this.elementShape)):Vi(()=>{const t=this.tensors.map(t=>ja(t,e));return gl(t,0)})}}const sN=async(t,e,n)=>{switch(t.op){case"If":case"StatelessIf":{const s=fk("thenBranch",t,e,n),r=fk("elseBranch",t,e,n),a=fk("cond",t,e,n),i=fk("args",t,e,n);return(await a.data())[0]?n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=fk("body",t,e,n),r=fk("cond",t,e,n),a=fk("args",t,e,n),i=await n.functionMap[r].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map(t=>t.id);let l=await i[0].data();i.forEach(t=>{t.kept||-1!==o.indexOf(t.id)||t.dispose()});let u=a;for(;l[0];){const t=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const e=u.map(t=>t.id);t.forEach(t=>{t.kept||-1!==o.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()});const a=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach(t=>{t.kept||-1!==o.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()})}return u}case"LoopCond":return[wk(fk("pred",t,e,n))];case"Switch":{const s=fk("pred",t,e,n);let r=fk("data",t,e,n);return r.kept||(r=wk(r)),(await s.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{const s=t.inputNames.find(t=>void 0!==mk(t,e,n));if(s){return[wk(mk(s,e,n))]}return}case"Enter":{const s=fk("frameName",t,e,n),r=fk("tensor",t,e,n);return n.enterFrame(s),[wk(r)]}case"Exit":{const s=fk("tensor",t,e,n);return n.exitFrame(),[wk(s)]}case"NextIteration":{const s=fk("tensor",t,e,n);return n.nextIteration(),[wk(s)]}case"TensorArrayV3":{const s=fk("size",t,e,n),r=fk("dtype",t,e,n),a=fk("elementShape",t,e,n),i=fk("dynamicSize",t,e,n),o=fk("clearAfterRead",t,e,n),l=fk("identicalElementShapes",t,e,n),u=fk("name",t,e,n),c=new eN(u,r,s,a,l,i,o);return n.addTensorArray(c),[c.idTensor,go(1)]}case"TensorArrayWriteV3":{const s=fk("tensorArrayId",t,e,n),r=fk("index",t,e,n),a=fk("tensor",t,e,n),i=n.getTensorArray(s.id);return i.write(r,a),[i.idTensor]}case"TensorArrayReadV3":{const s=fk("tensorArrayId",t,e,n),r=fk("index",t,e,n);return[n.getTensorArray(s.id).read(r)]}case"TensorArrayGatherV3":{const s=fk("tensorArrayId",t,e,n),r=fk("indices",t,e,n),a=fk("dtype",t,e,n);return[n.getTensorArray(s.id).gather(r,a)]}case"TensorArrayScatterV3":{const s=fk("tensorArrayId",t,e,n),r=fk("indices",t,e,n),a=fk("tensor",t,e,n),i=n.getTensorArray(s.id);return i.scatter(r,a),[i.idTensor]}case"TensorArrayConcatV3":{const s=fk("tensorArrayId",t,e,n),r=n.getTensorArray(s.id),a=fk("dtype",t,e,n);return[r.concat(a)]}case"TensorArraySplitV3":{const s=fk("tensorArrayId",t,e,n),r=fk("tensor",t,e,n),a=fk("lengths",t,e,n),i=n.getTensorArray(s.id);return i.split(a,r),[i.idTensor]}case"TensorArraySizeV3":{const s=fk("tensorArrayId",t,e,n);return[go(n.getTensorArray(s.id).size(),"int32")]}case"TensorArrayCloseV3":{const s=fk("tensorArrayId",t,e,n),r=n.getTensorArray(s.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{const s=fk("tensorListId",t,e,n),r=fk("index",t,e,n),a=fk("tensor",t,e,n),i=n.getTensorList(s.id);return i.setItem(r,a),[i.idTensor]}case"TensorListGetItem":{const s=fk("tensorListId",t,e,n),r=fk("index",t,e,n),a=fk("elementShape",t,e,n),i=fk("elementDType",t,e,n);return[n.getTensorList(s.id).getItem(r,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=fk("indices",t,e,n),r=function(t,e,n,s){if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const r=Math.max(...e);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const a=new nN([],n,t.dtype,s),i=ah(t,0);return e.forEach((t,e)=>{a.setItem(t,i[e])}),a}(fk("tensor",t,e,n),s,fk("elementShape",t,e,n),fk("numElements",t,e,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":{const s=function(t,e,n){return new nN([],t,e,n)}(fk("elementShape",t,e,n),fk("elementDType",t,e,n),fk("numElements",t,e,n));return n.addTensorList(s),[s.idTensor]}case"TensorListGather":{const s=fk("tensorListId",t,e,n),r=fk("indices",t,e,n),a=fk("elementShape",t,e,n),i=fk("elementDType",t,e,n);return[n.getTensorList(s.id).gather(r,i,a)]}case"TensorListStack":{const s=fk("tensorListId",t,e,n),r=fk("elementShape",t,e,n),a=fk("elementDType",t,e,n),i=fk("numElements",t,e,n);return[n.getTensorList(s.id).stack(r,a,i)]}case"TensorListFromTensor":{const s=function(t,e,n){const s=t.dtype;if(t.shape.length<1)throw new Error("Tensor must be at least a vector, but saw shape: "+t.shape);if(t.dtype!==n)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${n}`);tN(t.shape.slice(1),e,"TensorList shape mismatch: ");const r=ah(t);return new nN(r,e,s)}(fk("tensor",t,e,n),fk("elementShape",t,e,n),fk("elementDType",t,e,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":{const s=fk("tensorListId",t,e,n),r=n.getTensorList(s.id),a=fk("dtype",t,e,n),i=fk("elementShape",t,e,n);return[r.concat(a,i)]}case"TensorListPushBack":{const s=fk("tensorListId",t,e,n),r=fk("tensor",t,e,n),a=n.getTensorList(s.id);return a.pushBack(r),[a.idTensor]}case"TensorListPopBack":{const s=fk("tensorListId",t,e,n),r=fk("elementShape",t,e,n),a=fk("elementDType",t,e,n);return[n.getTensorList(s.id).popBack(r,a)]}case"TensorListSplit":{const s=fk("tensor",t,e,n),r=fk("elementShape",t,e,n),a=function(t,e,n){let s=0;const r=e.map(t=>(s+=t,s));if(s!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${t.shape}`);const a=0===s?0:t.size/s,i=Vi(()=>{const i=[];t=ja(t,[1,s,a]);for(let s=0;s<e.length;++s){const o=[0,0===s?0:r[s-1],0],l=[1,e[s],a];i[s]=ja(bl(t,o,l),n)}return t.dispose(),i}),o=new nN([],n,t.dtype,e.length);for(let t=0;t<i.length;t++)o.setItem(t,i[t]);return o}(s,fk("lengths",t,e,n),r);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}};function rN(t,e,n){const[s,r]=fk("fusedOps",t,e,n),a="biasadd"===s,i="prelu"===r,o="fusedbatchnorm"===s,l=fk("numArgs",t,e,n);if(a){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const u=fk("strides",t,e,n),c=xk(t,e,n),h=fk("dataFormat",t,e,n).toUpperCase(),p=fk("dilations",t,e,n),[d,f]=fk("args",t,e,n);return{stride:u,pad:c,dataFormat:h,dilations:p,biasArg:d,preluArg:f,activationFunc:r}}function aN(t,e,n){return{boxes:fk("boxes",t,e,n),scores:fk("scores",t,e,n),maxOutputSize:fk("maxOutputSize",t,e,n),iouThreshold:fk("iouThreshold",t,e,n),scoreThreshold:fk("scoreThreshold",t,e,n),softNmsSigma:fk("softNmsSigma",t,e,n)}}class iN{constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=go(0),this.tensorMap=new Map,Gi(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach(t=>t.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}async import(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return this.tensorMap.forEach(t=>t.dispose()),this.tensorMap.clear(),Vi(()=>{const t=ah(e),s=n.length,r=t.length;Z(s===r,()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${r} elements.`);for(let e=0;e<s;e++){const s=n[e],r=t[e];Gi(r),this.tensorMap.set(s,r)}return this.handle})}async find(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return Vi(()=>{const t=[];for(let s=0;s<n.length;s++){const r=n[s],a=this.findWithDefault(r,e);t.push(a)}return qc(t)})}findWithDefault(t,e){const n=this.tensorMap.get(t);return null!=n?n:e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got `+t.dtype);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got `+e.dtype)}}function oN(t,e,n,s){const r=((t,e,n)=>{switch(t.category){case"arithmetic":return Vi(()=>((t,e,n)=>{switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[eo(fk("a",t,e,n),fk("b",t,e,n))];case"AddN":return[Oo(fk("tensors",t,e,n))];case"FloorMod":case"Mod":return[Hu(fk("a",t,e,n),fk("b",t,e,n))];case"Mul":return[ro(fk("a",t,e,n),fk("b",t,e,n))];case"RealDiv":case"Div":return[so(fk("a",t,e,n),fk("b",t,e,n))];case"DivNoNan":return[Yl(fk("a",t,e,n),fk("b",t,e,n))];case"FloorDiv":return[no(fk("a",t,e,n),fk("b",t,e,n))];case"Sub":return[ko(fk("a",t,e,n),fk("b",t,e,n))];case"Minimum":return[Uu(fk("a",t,e,n),fk("b",t,e,n))];case"Maximum":return[Eo(fk("a",t,e,n),fk("b",t,e,n))];case"Pow":return[vo(fk("a",t,e,n),fk("b",t,e,n))];case"SquaredDifference":return[Hc(fk("a",t,e,n),fk("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"basic_math":return Vi(()=>((t,e,n)=>{switch(t.op){case"Abs":case"ComplexAbs":return[Io(fk("x",t,e,n))];case"Acos":return[Fo(fk("x",t,e,n))];case"Acosh":return[_o(fk("x",t,e,n))];case"Asin":return[Ko(fk("x",t,e,n))];case"Asinh":return[Xo(fk("x",t,e,n))];case"Atan":return[Yo(fk("x",t,e,n))];case"Atan2":return[Jo(fk("x",t,e,n),fk("y",t,e,n))];case"Atanh":return[Zo(fk("x",t,e,n))];case"Ceil":return[El(fk("x",t,e,n))];case"Complex":return[_r(fk("real",t,e,n),fk("imag",t,e,n))];case"Cos":return[Wl(fk("x",t,e,n))];case"Cosh":return[Vl(fk("x",t,e,n))];case"Elu":return[Zl(fk("x",t,e,n))];case"Erf":return[Ql(fk("x",t,e,n))];case"Exp":return[tu(fk("x",t,e,n))];case"Expm1":return[nu(fk("x",t,e,n))];case"Floor":return[au(fk("x",t,e,n))];case"Log":return[Nu(fk("x",t,e,n))];case"Log1p":return[Iu(fk("x",t,e,n))];case"Imag":return[fu(fk("x",t,e,n))];case"Neg":return[Cu(fk("x",t,e,n))];case"Reciprocal":return[bc(fk("x",t,e,n))];case"Real":return[Yu(fk("x",t,e,n))];case"Relu":return[xc(fk("x",t,e,n))];case"Round":return[Sc(fk("x",t,e,n))];case"Selu":return[Ec(fk("x",t,e,n))];case"Sigmoid":return[yl(fk("x",t,e,n))];case"Sin":return[Dc(fk("x",t,e,n))];case"Sign":return[Rc(fk("x",t,e,n))];case"Sinh":return[Fc(fk("x",t,e,n))];case"Softplus":return[Su(fk("x",t,e,n))];case"Sqrt":return[ao(fk("x",t,e,n))];case"Square":return[io(fk("x",t,e,n))];case"Tanh":return[xl(fk("x",t,e,n))];case"Tan":return[Yc(fk("x",t,e,n))];case"Relu6":case"ClipByValue":return[$l(fk("x",t,e,n),fk("clipValueMin",t,e,n),fk("clipValueMax",t,e,n))];case"Rsqrt":return[Tc(mk(t.inputNames[0],e,n))];case"Prod":return[oc(fk("x",t,e,n),fk("axes",t,e,n))];case"LeakyRelu":return[bu(fk("x",t,e,n),fk("alpha",t,e,n))];case"Prelu":return[ic(fk("x",t,e,n),fk("alpha",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"control":return sN(t,e,n);case"convolution":return Vi(()=>((t,e,n)=>{switch(t.op){case"Conv1D":{const s=fk("stride",t,e,n),r=fk("pad",t,e,n),a=fk("dataFormat",t,e,n).toUpperCase(),i=fk("dilation",t,e,n);return[Ol(fk("x",t,e,n),fk("filter",t,e,n),s,r,a,i)]}case"Conv2D":{const s=fk("strides",t,e,n),r=xk(t,e,n),a=fk("dataFormat",t,e,n).toUpperCase(),i=fk("dilations",t,e,n);return[_l(fk("x",t,e,n),fk("filter",t,e,n),[s[1],s[2]],r,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u}=rN(t,e,n);return[Bh({x:fk("x",t,e,n),filter:fk("filter",t,e,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u}=rN(t,e,n);return[Vh({x:fk("x",t,e,n),filter:fk("filter",t,e,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=fk("outputShape",t,e,n),r=fk("strides",t,e,n),a=xk(t,e,n);return[Ll(fk("x",t,e,n),fk("filter",t,e,n),s,[r[1],r[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=fk("strides",t,e,n),r=xk(t,e,n),a=fk("dilations",t,e,n),i=fk("dataFormat",t,e,n).toUpperCase();return[Hl(fk("input",t,e,n),fk("filter",t,e,n),[s[1],s[2]],r,i,[a[1],a[2]])]}case"Conv3D":{const s=fk("strides",t,e,n),r=fk("pad",t,e,n),a=fk("dataFormat",t,e,n).toUpperCase(),i=fk("dilations",t,e,n);return[zl(fk("x",t,e,n),fk("filter",t,e,n),[s[1],s[2],s[3]],r,a,[i[1],i[2],i[3]])]}case"AvgPool":{const s=fk("strides",t,e,n),r=fk("pad",t,e,n),a=fk("kernelSize",t,e,n);return[pl(fk("x",t,e,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPool":{const s=fk("strides",t,e,n),r=fk("pad",t,e,n),a=fk("kernelSize",t,e,n);return[Mu(fk("x",t,e,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPoolWithArgmax":{const s=fk("strides",t,e,n),r=fk("pad",t,e,n),a=fk("kernelSize",t,e,n),i=fk("includeBatchInIndex",t,e,n),{result:o,indexes:l}=zu(fk("x",t,e,n),[a[1],a[2]],[s[1],s[2]],r,i);return[o,l]}case"AvgPool3D":{const s=fk("strides",t,e,n),r=fk("pad",t,e,n),a=fk("kernelSize",t,e,n);return[dl(fk("x",t,e,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"MaxPool3D":{const s=fk("strides",t,e,n),r=fk("pad",t,e,n),a=fk("kernelSize",t,e,n);return[Lu(fk("x",t,e,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"Dilation2D":{const s=fk("strides",t,e,n),r=fk("pad",t,e,n),a=fk("dilations",t,e,n),i=s[1],o=s[2],l=a[1],u=a[2];return[ql(fk("x",t,e,n),fk("filter",t,e,n),[i,o],r,[l,u],"NHWC")]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"creation":return Vi(()=>((t,e,n)=>{switch(t.op){case"Fill":{const s=fk("shape",t,e,n),r=fk("dtype",t,e,n);return[xo(s,fk("value",t,e,n),r)]}case"LinSpace":return[vu(fk("start",t,e,n),fk("stop",t,e,n),fk("num",t,e,n))];case"Multinomial":{const s=fk("logits",t,e,n),r=fk("numSamples",t,e,n),a=fk("seed",t,e,n);return[Ku(s,r,a)]}case"OneHot":{const s=fk("indices",t,e,n),r=fk("depth",t,e,n),a=fk("onValue",t,e,n),i=fk("offValue",t,e,n);return[Ka(s,r,a,i)]}case"Ones":return[Pu(fk("shape",t,e,n),fk("dtype",t,e,n))];case"OnesLike":return[Ju(fk("x",t,e,n))];case"RandomUniform":return[mc(fk("shape",t,e,n),fk("minval",t,e,n),fk("maxval",t,e,n),fk("dtype",t,e,n))];case"Range":return[yc(fk("start",t,e,n),fk("stop",t,e,n),fk("step",t,e,n),fk("dtype",t,e,n))];case"TruncatedNormal":{const s=fk("shape",t,e,n),r=fk("mean",t,e,n),a=fk("stdDev",t,e,n),i=fk("seed",t,e,n);return[nh(s,r,a,fk("dtype",t,e,n),i)]}case"Zeros":return[Bu(fk("shape",t,e,n),fk("dtype",t,e,n))];case"ZerosLike":return[oo(fk("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"dynamic":return(async(t,e,n)=>{switch(t.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=aN(t,e,n),u=await Rp.nonMaxSuppressionWithScoreAsync(s,r,a,i,o,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=aN(t,e,n),l=fk("padToMaxOutputSize",t,e,n),u=await Rp.nonMaxSuppressionPaddedAsync(s,r,a,i,o,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=aN(t,e,n);return[await Rp.nonMaxSuppressionAsync(s,r,a,i,o)]}case"Where":{const s=Sa(fk("condition",t,e,n),"bool"),r=[await lh(s)];return s.dispose(),r}case"ListDiff":return Ac(fk("x",t,e,n),fk("y",t,e,n));default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n);case"evaluation":return Vi(()=>((t,e,n)=>{switch(t.op){case"TopKV2":{const s=fk("x",t,e,n),r=fk("k",t,e,n),a=fk("sorted",t,e,n),i=eh(s,r,a);return[i.values,i.indices]}case"Unique":{const s=fk("x",t,e,n),r=sh(s);return[r.values,r.indices]}case"UniqueV2":{const s=fk("x",t,e,n),r=fk("axis",t,e,n),a=sh(s,r);return[a.values,a.indices]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"image":return Vi(()=>((t,e,n)=>{switch(t.op){case"ResizeBilinear":{const s=fk("images",t,e,n),r=fk("size",t,e,n),a=fk("alignCorners",t,e,n);return[Rp.resizeBilinear(s,[r[0],r[1]],a)]}case"ResizeNearestNeighbor":{const s=fk("images",t,e,n),r=fk("size",t,e,n),a=fk("alignCorners",t,e,n);return[Rp.resizeNearestNeighbor(s,[r[0],r[1]],a)]}case"CropAndResize":{const s=fk("image",t,e,n),r=fk("boxes",t,e,n),a=fk("boxInd",t,e,n),i=fk("cropSize",t,e,n),o=fk("method",t,e,n),l=fk("extrapolationValue",t,e,n);return[Rp.cropAndResize(s,r,a,i,o,l)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"graph":return Vi(()=>((t,e,n)=>{switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":const s=fk("default",t,e,n);return[mk(t.name,e,n)||s];case"Placeholder":return[mk(t.name,e,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[wk(fk("x",t,e,n))];case"IdentityN":return fk("x",t,e,n).map(t=>wk(t));case"Snapshot":return[wk(fk("x",t,e,n))];case"Shape":return[gc(fk("x",t,e,n).shape,"int32")];case"ShapeN":return fk("x",t,e,n).map(t=>gc(t.shape));case"Size":return[go(fk("x",t,e,n).size,"int32")];case"Rank":return[go(fk("x",t,e,n).rank,"int32")];case"NoOp":return[go(1)];case"Print":const r=fk("x",t,e,n),a=fk("data",t,e,n),i=fk("message",t,e,n),o=fk("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let t=0;t<a.length;t++)console.log(Array.prototype.slice.call(a[t].dataSync()).slice(0,o));return[r];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"logical":return Vi(()=>((t,e,n)=>{switch(t.op){case"Equal":return[Kl(fk("a",t,e,n),fk("b",t,e,n))];case"NotEqual":return[Xu(fk("a",t,e,n),fk("b",t,e,n))];case"Greater":return[pu(fk("a",t,e,n),fk("b",t,e,n))];case"GreaterEqual":return[du(fk("a",t,e,n),fk("b",t,e,n))];case"Less":return[xu(fk("a",t,e,n),fk("b",t,e,n))];case"LessEqual":return[wu(fk("a",t,e,n),fk("b",t,e,n))];case"LogicalAnd":return[Du(fk("a",t,e,n),fk("b",t,e,n))];case"LogicalNot":return[Fu(fk("a",t,e,n))];case"LogicalOr":return[_u(fk("a",t,e,n),fk("b",t,e,n))];case"Select":case"SelectV2":return[Xl(fk("condition",t,e,n),fk("a",t,e,n),fk("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"matrices":return Vi(()=>((t,e,n)=>{switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[qa(fk("a",t,e,n),fk("b",t,e,n),fk("transposeA",t,e,n),fk("transposeB",t,e,n))];case"Transpose":return[Xa(fk("x",t,e,n),fk("perm",t,e,n))];case"_FusedMatMul":const[s,r]=fk("fusedOps",t,e,n),a="biasadd"===s,i="prelu"===r,o=fk("numArgs",t,e,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[l,u]=fk("args",t,e,n);return[Uh({a:fk("a",t,e,n),b:fk("b",t,e,n),transposeA:fk("transposeA",t,e,n),transposeB:fk("transposeB",t,e,n),bias:l,activation:r,preluActivationWeights:u})];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"normalization":return Vi(()=>((t,e,n)=>{switch(t.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[Nl(fk("x",t,e,n),fk("mean",t,e,n),fk("variance",t,e,n),fk("offset",t,e,n),fk("scale",t,e,n),fk("epsilon",t,e,n))];case"LRN":return[ku(fk("x",t,e,n),fk("radius",t,e,n),fk("bias",t,e,n),fk("alpha",t,e,n),fk("beta",t,e,n))];case"Softmax":return[zc(fk("x",t,e,n))];case"LogSoftmax":return[Au(fk("x",t,e,n))];case"SparseToDense":return[Eh(fk("sparseIndices",t,e,n),fk("outputShape",t,e,n),fk("sparseValues",t,e,n),fk("defaultValue",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"reduction":return Vi(()=>((t,e,n)=>{switch(t.op){case"Max":{const s=fk("axis",t,e,n),r=fk("keepDims",t,e,n);return[Eu(fk("x",t,e,n),s,r)]}case"Mean":{const s=fk("axis",t,e,n),r=fk("keepDims",t,e,n);return[Wu(fk("x",t,e,n),s,r)]}case"Min":{const s=fk("axis",t,e,n),r=fk("keepDims",t,e,n);return[Vu(fk("x",t,e,n),s,r)]}case"Sum":{const s=fk("axis",t,e,n),r=fk("keepDims",t,e,n);return[$u(fk("x",t,e,n),s,r)]}case"All":{const s=fk("axis",t,e,n),r=fk("keepDims",t,e,n);return[Go(fk("x",t,e,n),s,r)]}case"Any":{const s=fk("axis",t,e,n),r=fk("keepDims",t,e,n);return[Ho(fk("x",t,e,n),s,r)]}case"ArgMax":{const s=fk("axis",t,e,n);return[jo(fk("x",t,e,n),s)]}case"ArgMin":{const s=fk("axis",t,e,n);return[qo(fk("x",t,e,n),s)]}case"Prod":{const s=fk("axis",t,e,n),r=fk("keepDims",t,e,n);return[oc(fk("x",t,e,n),s,r)]}case"Cumsum":{const s=fk("axis",t,e,n),r=fk("exclusive",t,e,n),a=fk("reverse",t,e,n);return[Ul(fk("x",t,e,n),s,r,a)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"slice_join":return Vi(()=>((t,e,n)=>{switch(t.op){case"ConcatV2":case"Concat":{const s=fk("n",t,e,n),r=fk("axis",t,e,n);let a=fk("tensors",t,e,n);return a=a.slice(0,s),[gl(a,r)]}case"GatherV2":case"Gather":{const s=fk("axis",t,e,n),r=fk("x",t,e,n),a=fk("indices",t,e,n);return[hu(r,Sa(a,"int32"),s)]}case"ReverseV2":case"Reverse":{const s=fk("axis",t,e,n),r=fk("x",t,e,n);return[vc(r,s)]}case"Slice":{const s=fk("begin",t,e,n),r=fk("size",t,e,n);return[bl(fk("x",t,e,n),s,r)]}case"StridedSlice":{const s=fk("begin",t,e,n),r=fk("end",t,e,n),a=fk("strides",t,e,n),i=fk("beginMask",t,e,n),o=fk("endMask",t,e,n),l=fk("ellipsisMask",t,e,n),u=fk("newAxisMask",t,e,n),c=fk("shrinkAxisMask",t,e,n),h=fk("x",t,e,n);return[Xc(h,s,r,a,i,o,l,u,c)]}case"Pack":return Vi(()=>{const s=fk("axis",t,e,n),r=fk("tensors",t,e,n),a=r[0].shape,i=jc(r[0]).shape,o=r.map(t=>{const e=rt(t.shape,a);if(!e&&!rt(jc(t).shape,i))throw new Error("the input tensors shape does not match");return e?t:ja(t,a)});return[qc(o,s)]});case"Unpack":{const s=fk("axis",t,e,n),r=fk("tensor",t,e,n);return ah(r,s)}case"Tile":{const s=fk("reps",t,e,n);return[su(fk("x",t,e,n),s)]}case"Split":case"SplitV":{const s=fk("axis",t,e,n),r=fk("numOrSizeSplits",t,e,n),a=fk("x",t,e,n);return Uc(a,r,s)}case"ScatterNd":{const s=fk("indices",t,e,n),r=fk("values",t,e,n),a=fk("shape",t,e,n);return[Th(s,r,a)]}case"GatherNd":{const s=fk("x",t,e,n),r=fk("indices",t,e,n);return[$h(s,r)]}case"SparseToDense":{const s=fk("sparseIndices",t,e,n),r=fk("outputShape",t,e,n),a=fk("sparseValues",t,e,n),i=fk("defaultValue",t,e,n);return[Eh(s,a,r,a.dtype===i.dtype?i:Sa(i,a.dtype))]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"spectral":return Vi(()=>((t,e,n)=>{switch(t.op){case"FFT":return[Bc(fk("x",t,e,n))];case"IFFT":return[Pc(fk("x",t,e,n))];case"RFFT":return[Gc(fk("x",t,e,n))];case"IRFFT":return[Wc(fk("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"transformation":return Vi(()=>((t,e,n)=>{switch(t.op){case"Cast":return[Sa(fk("x",t,e,n),fk("dtype",t,e,n))];case"ExpandDims":{const s=fk("axis",t,e,n);return[eu(fk("x",t,e,n),s)]}case"Squeeze":{const s=fk("axis",t,e,n);return[jc(fk("x",t,e,n),s)]}case"Reshape":return[ja(fk("x",t,e,n),fk("shape",t,e,n))];case"MirrorPad":return[Gu(fk("x",t,e,n),fk("padding",t,e,n),fk("mode",t,e,n))];case"PadV2":case"Pad":return[Qu(fk("x",t,e,n),fk("padding",t,e,n),fk("constantValue",t,e,n))];case"SpaceToBatchND":{const s=fk("blockShape",t,e,n),r=fk("paddings",t,e,n);return[rc(fk("x",t,e,n),s,r)]}case"BatchToSpaceND":{const s=fk("blockShape",t,e,n),r=fk("crops",t,e,n);return[vl(fk("x",t,e,n),s,r)]}case"DepthToSpace":{const s=fk("blockSize",t,e,n),r=fk("dataFormat",t,e,n).toUpperCase();return[Gl(fk("x",t,e,n),s,r)]}case"BroadcastTo":return[Tl(fk("x",t,e,n),fk("shape",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"hash_table":return(async(t,e,n,s)=>{switch(t.op){case"HashTable":case"HashTableV2":{const r=fk("keyDType",t,e,n),a=fk("valueDType",t,e,n),i=new iN(r,a);return s.addHashTable(t.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const r=fk("tableHandle",t,e,n,s),a=fk("keys",t,e,n),i=fk("values",t,e,n),o=s.getHashTableById(r.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const r=fk("tableHandle",t,e,n,s),a=fk("keys",t,e,n),i=fk("defaultValue",t,e,n),o=s.getHashTableById(r.id);return[await o.find(a,i)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n,s);case"custom":const r=pk(t.op);if(r&&r.customExecutor)return r.customExecutor(new Qk(t,e,n));throw TypeError(`Custom op ${t.op} is not registered.`);default:throw TypeError(`Unknown op '${t.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(t,e,n);return Mt(r)?r.then(t=>[].concat(t)):[].concat(r)}class lN{constructor(t={},e={},n={},s={}){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=n,this.functionMap=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(t=>0===t.id&&0===t.iterationId?"":`${t.frameName}-${t.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function uN(t,e,n,s){const r=new Set,a=[];let i=null,o=null;const l=new Set,u=Object.keys(t).map(t=>bk(t)[0]);let c=[];null!=s&&(c=s.map(t=>bk(t.name)[0]));const h=[...e];for(;h.length>0;){const t=h.pop();(dN(t)||fN(t)||mN(t))&&null==i&&(i=t,o=i.children.map(t=>t.name).filter(t=>r.has(t))),r.add(t.name),null==n[t.name]&&(-1===u.indexOf(t.name)&&-1===c.indexOf(t.name)&&(0!==t.inputs.length?t.inputs.forEach(t=>{l.has(t.name)||(l.add(t.name),h.push(t))}):a.push(t.name)))}return{inputs:t,outputs:e,usedNodes:r,missingInputs:a,dynamicNode:i,syncInputs:o}}const cN=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],hN=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],pN=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2"];function dN(t){return cN.indexOf(t.op)>=0}function fN(t){return hN.indexOf(t.op)>=0}function mN(t){return pN.indexOf(t.op)>=0}class gN{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach(e=>{this._functionExecutorMap[e]=new gN(t.functions[e],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map(e=>t[e].map(t=>t.id));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}getCompilationKey(t,e){const n=t.map(t=>t.name).sort(),s=e.map(t=>t.name).sort();return n.join(this.SEPERATOR)+"--"+s.join(this.SEPERATOR)}compile(t,e){const n=uN(t,e,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:r,syncInputs:a}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(s.length>0){const n=e.map(t=>t.name),r=Object.keys(t);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${s}]`)}return function(t,e,n){const{usedNodes:s,inputs:r}=n,a=[],i=Object.keys(r).map(t=>bk(t)[0]).map(e=>t.nodes[e]),o=t.initNodes;i.forEach(t=>{s.has(t.name)&&a.push(t)}),t.weights.forEach(t=>{s.has(t.name)&&a.push(t)}),null!=o&&o.forEach(t=>{s.has(t.name)&&a.push(t)});const l=new Set,u=[];for(;a.length>0;){const t=a.pop();l.add(t.name),e[t.name]||u.push(t),t.children.forEach(t=>{!l.has(t.name)&&s.has(t.name)&&t.inputs.every(t=>l.has(t.name))&&a.push(t)})}return u}(this.graph,this.weightMap,n)}execute(t,e){t=this.mapInputs(t);const n=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const s=n.map(t=>this.graph.nodes[bk(t)[0]]),r=e.map(t=>bk(t)[0]);let a=r.map(t=>this.graph.nodes[t]);0===a.length&&(a=this._outputs);const i=this.getCompilationKey(s,a);let o=this.compiledMap.get(i);null==o&&(o=this.compile(t,a),this.compiledMap.set(i,o));const l={},u={};return Vi(()=>{const n=new lN(this.weightMap,l,u,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(t).forEach(e=>{const[n,r]=bk(e),a=[];a[r]=t[e],s[n]=a});const a=this.getFrozenTensorIds(s),i={};for(let t=0;t<o.length;t++){const e=o[t];if(!s[e.name]){const t=oN(e,s,n,this._resourceManager);if(Mt(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);s[e.name]=t,this.checkTensorForDisposal(e.name,e,s,n,a,r,i)}}return null==this.parent&&n.dispose(a),e.map(t=>mk(t,s,n))})}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map(e=>t[e]).map(t=>t.map(t=>t.id)));return new Set(e)}checkTensorForDisposal(t,e,n,s,r,a,i){"control"!==e.category&&-1===a.indexOf(t)&&(n[t].forEach(t=>{null!=t&&(i[t.id]=(i[t.id]||0)+e.children.length)}),e.inputs.forEach(t=>{if("control"!==t.category){const e=function(t,e,n){return e[yk(t,n.currentContextId)]}(t.name,n,s);null!=e&&e.forEach(t=>{if(t&&!r.has(t.id)){const e=i[t.id];1===e?(t.dispose(),delete i[t.id]):null!=e&&i[t.id]--}})}}))}async executeAsync(t,e){return this._executeAsync(t,e)}async _executeAsync(t,e,n=!1,s={},r={}){n||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e));const a=new lN(this.weightMap,s,r,this.functionExecutorMap),i=await this.executeWithControlFlow(t,a,e,n),o=e.map(t=>mk(t,i,a)),l=o.map(t=>t.id),u=Object.keys(t).map(e=>t[e].id),c=new Set([...l,...u,...this.weightIds]);return Object.keys(i).forEach(t=>{i[t].forEach(t=>{!t||t.isDisposed||c.has(t.id)||t.dispose()})}),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(t,e,n){const s=t.reduce((t,e,n)=>(t[this.inputs[n].name]=e,t),{});return this._executeAsync(s,this.outputNodes,!0,e,n)}async executeWithControlFlow(t,e,n,s){const r=Object.keys(t),a=r.map(t=>this.graph.nodes[bk(t)[0]]),i=n.map(t=>bk(t)[0]);let o=i.map(t=>this.graph.nodes[t]);0===o.length&&(o=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:h}=uN(t,o,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map(t=>({node:t,contexts:e.currentContext})),d=Object.assign({},this.weightMap);Object.keys(t).forEach(e=>{const[n,s]=bk(e),r=[];r[s]=t[e],d[n]=r});const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const t=this.processStack(a,p,e,d,g,m,i,f,l);await Promise.all(t)}null!=c||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter(t=>!dN(t)&&!mk(t.name,d,e)).map(t=>t.name);if(y.length>0){let t="";throw null!=c&&(t=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${r}]. Consider providing the following inputs: [${u}]. ${t}`)}return d}processStack(t,e,n,s,r,a,i,o,l){const u=[];for(;e.length>0;){const t=e.pop();n.currentContext=t.contexts;let c="";if("Enter"===t.node.op&&fk("isConstant",t.node,s,n)&&([c]=gk(t.node.name,n)),null==s[t.node.name]){const h=oN(t.node,s,n,this._resourceManager);c||([c]=gk(t.node.name,n));const p=n.currentContext;Mt(h)?u.push(h.then(u=>(s[c]=u,n.currentContext=p,this.checkTensorForDisposal(c,t.node,s,n,a,i,o),this.processChildNodes(t.node,e,n,s,r,l),u))):(s[c]=h,this.checkTensorForDisposal(c,t.node,s,n,a,i,o),this.processChildNodes(t.node,e,n,s,r,l))}else this.processChildNodes(t.node,e,n,s,r,l)}return u}processChildNodes(t,e,n,s,r,a){t.children.forEach(t=>{const[i]=gk(t.name,n);!r[i]&&a.has(t.name)&&("Merge"===t.op?t.inputNames.some(t=>!!mk(t,s,n))&&(r[i]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every(t=>!!mk(t,s,n))&&(r[i]=!0,e.push({contexts:n.currentContext,node:t})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(t=>t.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{const n=t[e],[s]=bk(e),r=this.graph.nodes[s];if(r.attrParams.shape&&r.attrParams.shape.value){const t=r.attrParams.shape.value;Z(t.length===n.shape.length&&n.shape.every((e,n)=>-1===t[n]||t[n]===e),()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${t}], but was [${n.shape}]`)}r.attrParams.dtype&&r.attrParams.dtype.value&&Z(n.dtype===r.attrParams.dtype.value,()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`)})}mapInputs(t){const e={};for(const n in t)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){e[this._signature.inputs[n].name]=t[n]}else e[n]=t[n];return e}checkInputs(t){const e=Object.keys(t).filter(t=>{const[e]=bk(t);return null==this.graph.nodes[e]});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(t=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[t]){return this._signature.outputs[t].name}return t},{})}checkOutputs(t){t.forEach(t=>{const[e]=bk(t);if(!this.graph.nodes[e])throw new Error(`The output '${t}' is not found in the graph`)})}}class yN{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(const t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(const t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}class bN{constructor(t,e={}){this.modelUrl=t,this.loadOptions=e,this.version="n/a",null==e&&(this.loadOptions={}),this.resourceManager=new yN}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=Wa(t,this.loadOptions);else{const e=Jr(t,this.loadOptions);if(0===e.length)e.push(Wa(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=await this.handler.load();return this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let n={};null!=this.artifacts.userDefinedMetadata&&(n=this.artifacts.userDefinedMetadata.signature),this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const s=Br(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new gN(zk.Instance.transformGraph(e,n)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=t.modelInitializer){const e=zk.Instance.transformGraph(t.modelInitializer);this.initializer=new gN(e),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(t,e){if("string"==typeof t){const e=Yr(t);if(0===e.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Error(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}predict(t,e){return this.execute(t,this.outputNodes)}normalizeInputs(t){if(!(t instanceof ir||Array.isArray(t)))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce((e,n,s)=>(e[n]=t[s],e),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=this.executor.execute(t,e);return n.length>1?n:n[0]}async executeAsync(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=await this.executor.executeAsync(t,e);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,n)=>(e[n]=[t[n]],e),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function xN(t,e={}){if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==e&&(e={}),e.fromTFHub&&null==t.load&&(t.endsWith("/")||(t+="/"),t+="model.json?tfjs-format=file");const n=new bN(t,e);return await n.load(),n}const wN="2.7.0";function vN(t,e,n=new Map,s=new Set){if(null==t)return null;if(s.has(t))throw new Error("Circular references are not supported.");if(n.has(t))return n.get(t);const r=e(t);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(CN(t)){const r=Array.isArray(t)?[]:{};s.add(t);for(const a in t){const i=vN(t[a],e,n,s);r[a]=i}return s.delete(t),r}throw new Error("Can't recurse into non-iterable type: "+t)}return n.set(t,r.value),r.value}function kN(t,e=NN){return function t(e,n,s=new Set){const r=e[0];if(s.has(r))throw new Error("Circular references are not supported.");const a=n(e);if(a.recurse&&null!==a.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(a.recurse){if(CN(r)){const a=Array.isArray(r)?[]:{};s.add(r);for(const i in r){const r=e.map(t=>t[i]),o=t(r,n,s);a[i]=o}return s.delete(r),a}throw new Error("Can't recurse into non-iterable type: "+r)}return a.value}(t,e)}function NN(t){return null===t?null:CN(t[0])?{value:null,recurse:!0}:{value:t,recurse:!1}}async function IN(t,e){const n=new Map;vN(t,e,n);for(const t of Array.from(n.keys())){const e=n.get(t);if(Mt(e)){const s=await e;n.set(t,s)}}return vN(t,e,n)}function CN(t){return null!=t&&!ArrayBuffer.isView(t)&&(Array.isArray(t)||"object"==typeof t&&!(t instanceof ir))}function SN(t){return function(t,e){return vN(t,e)}(t,TN)}function TN(t){return t instanceof ir?{value:t.clone(),recurse:!1}:CN(t)?{value:null,recurse:!0}:{value:t,recurse:!1}}class EN{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,null==t)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(const e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.wrap(this.begin+t),n=this.get(e);return this.set(e,this.pop()),n}}class $N extends EN{constructor(){super($N.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){const t=2*this.capacity,e=new Array(t),n=this.length();for(let t=0;t<n;t++)e[t]=this.get(this.wrap(this.begin+t));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function AN(t){return new _N(t)}function RN(t){return new ON(t)}function DN(t,e){return new jN(t,e)}$N.INITIAL_CAPACITY=32;class FN{async toArray(){const t=[];let e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){const t=this.prefetch(100),e=[];let n=await t.next();for(;!n.done;)e.push(n.value),n=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),n=t(e.value);for(;!e.done&&n;)e=await this.next(),n=t(e.value)}handleErrors(t){return new VN(this,t)}filter(t){return new PN(this,t)}map(t){return new WN(this,t)}mapAsync(t){return new UN(this,t)}serialMapAsync(t){return new UN(this,t).serial()}flatmap(t){return new HN(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile(t=>!0===t)}rowMajorBatch(t,e=!0){return new BN(this,t,e)}columnMajorBatch(t,e=!0,n=NN){return this.rowMajorBatch(t,e).map(t=>kN(t,n))}concatenate(t,e){return new jN(AN([this,t]),e)}take(t){return t<0||null==t?this:new zN(this,t)}skip(t){return t<0||null==t?this:new LN(this,t)}prefetch(t){return new XN(this,t)}shuffle(t,e){return new YN(this,t,e)}serial(){return new MN(this)}}class _N extends FN{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const t=this.items[this.trav];return this.trav++,{value:SN(t),done:!1}}}class ON extends FN{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(t){throw t.message="Error thrown while iterating through a dataset: "+t.message,t}}}class MN extends FN{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Serial"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class LN extends FN{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Skip"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const t=await this.upstream.next();if(t.done)return t;Ui(t.value)}return this.upstream.next()}}class zN extends FN{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return this.upstream.summary()+" -> Take"}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class BN extends FN{constructor(t,e,n=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> RowMajorBatch"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){const t=[];for(;t.length<this.batchSize;){const e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}}class PN extends FN{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Filter"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){const t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;Ui(t.value)}}}class WN extends FN{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> Map"}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=xr(t.value),n=this.transform(t.value),s=xr(n);for(const t of e)br(t,s)||t.dispose();return{value:n,done:!1}}}class VN extends FN{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> handleErrors"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}}class UN extends FN{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> AsyncMap"}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=xr(t.value),n=await this.transform(t.value),s=xr(n);for(const t of e)br(t,s)||t.dispose();return{value:n,done:!1}}}class GN extends FN{constructor(){super(),this.outputQueue=new $N,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class HN extends GN{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> Flatmap"}async pump(){const t=await this.upstream.next();if(t.done)return!1;const e=xr(t.value),n=this.transform(t.value),s=xr(n);this.outputQueue.pushAll(n);for(const t of e)br(t,s)||t.dispose();return!0}}class jN extends FN{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,null==this.iterator){const t=await this.moreIterators.next();if(t.done)return{value:null,done:!0};this.iterator=t.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}}var qN;!function(t){t[t.FAIL=0]="FAIL",t[t.SHORTEST=1]="SHORTEST",t[t.LONGEST=2]="LONGEST"}(qN||(qN={}));class KN extends FN{constructor(t,e=qN.FAIL){super(),this.iterators=t,this.mismatchMode=e,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(t){await t;let e=0,n=0;const s=await IN(this.iterators,(function(t){if(t instanceof FN){return{value:t.next().then(t=>(e++,t.done&&n++,t.value)),recurse:!1}}return{value:null,recurse:!0}}));if(e===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case qN.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case qN.SHORTEST:return{value:null,done:!0};case qN.LONGEST:}return this.count++,{value:s,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class XN extends FN{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new EN(e)}summary(){return this.upstream.summary()+" -> Prefetch"}refill(){for(;!this.buffer.isFull();){const t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}}class YN extends XN{constructor(t,e,n){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=uc.alea(n||Zs().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(!e.done)return this.refill(),e;this.upstreamExhausted=!0}return{value:null,done:!0}}}class JN{constructor(){this.size=null}batch(t,e=!0){const n=this;let s;return Z(t>0,()=>"batchSize needs to be positive, but it is\n      "+t),s=this.size===1/0||null==this.size?this.size:e?Math.ceil(this.size/t):Math.floor(this.size/t),ZN(async()=>(await n.iterator()).columnMajorBatch(t,e,eI),s)}concatenate(t){const e=this;let n;return n=this.size===1/0||t.size===1/0?1/0:null!=this.size&&null!=t.size?this.size+t.size:null,ZN(async()=>(await e.iterator()).concatenate(await t.iterator()),n)}filter(t){const e=this;let n;return n=this.size===1/0?1/0:null,ZN(async()=>(await e.iterator()).filter(e=>Vi(()=>t(e))),n)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}map(t){const e=this;return ZN(async()=>(await e.iterator()).map(e=>Vi(()=>t(e))),this.size)}mapAsync(t){const e=this;return ZN(async()=>(await e.iterator()).mapAsync(t),this.size)}prefetch(t){if(null==t)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const e=this;return ZN(async()=>(await e.iterator()).prefetch(t),this.size)}repeat(t){const e=this;let n;return n=null!=this.size&&t>0?this.size*t:0===t?0:null!=this.size&&(void 0===t||t<0)?1/0:null,ZN(async()=>DN(RN(async()=>({value:await e.iterator(),done:!1})).take(t)),n)}skip(t){const e=this;let n;return n=null!=this.size&&t>=0&&this.size>=t?this.size-t:null!=this.size&&(this.size<t||void 0===t||t<0)?0:null,ZN(async()=>(await e.iterator()).skip(t),n)}shuffle(t,e,n=!0){if(null==t||t<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,r=uc.alea(e||Zs().toString());return ZN(async()=>{let e=r.int32();return n&&(e+=r.int32()),(await s.iterator()).shuffle(t,e.toString())},this.size)}take(t){const e=this;let n;return n=null!=this.size&&this.size>t?t:null!=this.size&&this.size<=t?this.size:null,ZN(async()=>(await e.iterator()).take(t),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function ZN(t,e=null){return new class extends JN{constructor(){super(...arguments),this.size=e}async iterator(){return t()}}}function QN(t){return ZN(async()=>AN(t),t.length)}function tI(t){if(!CN(t))throw new Error("The argument to zip() must be an object or array.");let e;if(Array.isArray(t))for(let n=0;n<t.length;n++)e=null==e?t[n].size:Math.min(e,t[n].size);else if(t instanceof Object)for(const n in t)e=null==e?t[n].size:Math.min(e,t[n].size);return ZN(async()=>function(t,e=qN.FAIL){return new KN(t,e)}(await IN(t,t=>{if(t instanceof JN)return{value:t.iterator(),recurse:!1};if(CN(t))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")}),qN.SHORTEST),e)}function eI(t){if(null===t)return null;const e=t[0];if(null==(n=e)||null===(s=n)||"object"!=typeof s&&"function"!=typeof s||Array.isArray(n)||"object"==typeof n&&n instanceof ir||xt(n)){return{value:function(t){if(0===t.length)throw new Error("Can't make a batch of zero elements.");return t[0]instanceof ir?qc(t):Mr(t)}(t),recurse:!1}}var n,s;return{value:null,recurse:!0}}JN.MAX_BUFFER_SIZE=1e4;class nI extends JN{constructor(t){super(),this.input=t}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map(t=>(t.endsWith("\r")&&(t=t.slice(0,-1)),t))}}const sI=Symbol("out"),rI=Symbol("field"),aI=Symbol("quote"),iI=Symbol("quoteafterquote"),oI=Symbol("quoteinquote");class lI extends JN{constructor(t,e){super(),this.input=t,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new nI(t),e||(e={}),this.hasHeader=!1!==e.hasHeader,this.fullColumnNames=e.columnNames,this.columnConfigs=e.columnConfigs,this.configuredColumnsOnly=e.configuredColumnsOnly,e.delimWhitespace?(Z(null==e.delimiter,()=>"Delimiter should not be provided when delimWhitespace is true."),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=e.delimiter?e.delimiter:","}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const t=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!t)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&t&&Z(t.length===this.fullColumnNames.length,()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+t.length.toString()+")."),this.fullColumnNames||(this.fullColumnNames=t);const e=this.fullColumnNames.reduce((t,e)=>(t[e]=t[e]+1||1,t),{}),n=Object.keys(e).filter(t=>e[t]>1);if(Z(0===n.length,()=>"Duplicate column names found: "+n.toString()),this.columnConfigs)for(const t of Object.keys(this.columnConfigs)){if(-1===this.fullColumnNames.indexOf(t))throw new Error('The key "'+t+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").")}this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const t=await this.base.iterator(),e=await t.next();if(e.done)throw new Error("No data was found for CSV parsing.");const n=e.value;return this.parseRow(n,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let t=await this.base.iterator();return this.hasHeader&&(t=t.skip(1)),t.map(t=>this.makeDataElement(t))}makeDataElement(t){const e=this.parseRow(t),n={},s={};for(let r=0;r<this.fullColumnNames.length;r++){const a=this.fullColumnNames[r],i=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||i){const o=e[r];let l=null;if(""===o)if(i&&void 0!==i.default)l=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${a} is empty in this line: ${t}`);l=void 0}else{const t=Number(o);if(isNaN(t))l=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":l=t;break;case"int32":l=Math.floor(t);break;case"bool":l=this.getBoolean(o);break;default:l=t}else l=t}i&&i.isLabel?s[a]=l:n[a]=l}}return 0===Object.keys(s).length?n:{xs:n,ys:s}}getBoolean(t){return"1"===t||"true"===t.toLowerCase()?1:0}parseRow(t,e=!0){const n=[];let s=0;const r=t.length;let a=sI;for(let e=0;e<r;e++)switch(a){case sI:switch(t.charAt(e)){case'"':s=e+1,a=aI;break;case this.delimiter:if(s=e+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=sI;break;default:a=rI,s=e}break;case rI:switch(t.charAt(e)){case this.delimiter:n.push(t.substring(s,e)),a=sI,s=e+1}break;case aI:switch(t.charAt(e)){case'"':a=iI}break;case iI:switch(t.charAt(e)){case this.delimiter:n.push(t.substring(s,e-1)),a=sI,s=e+1;break;case'"':a=aI;break;default:a=oI}break;case oI:switch(t.charAt(e)){case'"':a=aI}}if(a===iI?n.push(t.substring(s,r-1)):n.push(t.substring(s)),e&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class uI extends FN{constructor(t){super(),this.microphoneConfig=t,this.isClosed=!1,this.fftSize=t.fftSize||1024;const e=Math.log2(this.fftSize);if(this.fftSize<0||e<4||e>14||!Number.isInteger(e))throw new Error("Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got "+this.fftSize);if(this.numFrames=t.numFramesPerSpectrogram||43,this.sampleRateHz=t.sampleRateHz,this.columnTruncateLength=t.columnTruncateLength||this.fftSize,this.audioTrackConstraints=t.audioTrackConstraints,this.smoothingTimeConstant=t.smoothingTimeConstant||0,this.includeSpectrogram=!1!==t.includeSpectrogram,this.includeWaveform=!0===t.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(t={}){if(zt().get("IS_NODE"))throw new Error("microphone API is only supported in browser environment.");const e=new uI(t);return await e.start(),e}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(t){throw new Error("Error thrown while initializing video stream: "+t.message)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const t=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new t,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: `+this.audioContext.sampleRate)}else this.sampleRateHz=this.audioContext.sampleRate;const e=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,e.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let t,e;const n=await this.getAudioData();if(this.includeSpectrogram){const e=this.flattenQueue(n.freqDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const t=this.flattenQueue(n.timeDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:t,waveform:e},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const t=[],e=[];let n=0;return new Promise(s=>{const r=setInterval(()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&s({freqDataQueue:t,timeDataQueue:e}),t.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),e.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(r),s({freqDataQueue:t,timeDataQueue:e}))},this.fftSize/this.sampleRateHz*1e3)})}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(t){const e=t[0].length,n=new Float32Array(t.length*e);return t.forEach((t,s)=>n.set(t,s*e)),n}getTensorFromAudioDataArray(t,e){const n=new Float32Array(nt(e));return n.set(t,n.length-t.length),Mr(n,e)}}class cI extends FN{constructor(t,e){if(super(),this.webcamVideoElement=t,this.webcamConfig=e,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=gc([0],"int32"),this.webcamConfig.centerCrop){const t=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,e=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-t)/2,s=(1-e)/2,r=n+t,a=e+s;this.cropBox=Jc([s,n,a,r],[1,4])}else this.cropBox=Jc([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(t,e={}){if(zt().get("IS_NODE"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!t){if(t=document.createElement("video"),!e.resizeWidth||!e.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");t.width=e.resizeWidth,t.height=e.resizeHeight}const n=new cI(t,e);return await n.start(),n}async start(){this.webcamConfig.facingMode&&Z("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(t){throw t.message="Error thrown while initializing video stream: "+t.message,t}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(t){console.log(t),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise(t=>{this.webcamVideoElement.onloadedmetadata=()=>{t()}})}async next(){if(this.isClosed)return{value:null,done:!0};let t;try{t=ti(this.webcamVideoElement)}catch(t){throw new Error("Error thrown converting video to pixels: "+JSON.stringify(t))}if(!this.resize)return{value:t,done:!1};try{return{value:this.cropAndResizeFrame(t),done:!1}}catch(t){throw new Error("Error thrown cropping the video: "+t.message)}finally{t.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(t){return Vi(()=>{const e=t.toFloat().expandDims(0);let n;n=Rp.cropAndResize(e,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const s=n.shape;return n.reshape(s.slice(1))})}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach(t=>t.stop());try{this.webcamVideoElement.srcObject=null}catch(t){console.log(t),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class hI{}class pI extends FN{split(t){return new dI(this,t)}}class dI extends pI{constructor(t,e){super(),this.upstream=t,this.impl=new fI(t,e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class fI extends GN{constructor(t,e){super(),this.upstream=t,this.separator=e,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const t=await this.upstream.next();if(t.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const e=t.value.split(this.separator);e[0]=this.carryover+e[0];for(const t of e.slice(0,-1))this.outputQueue.push(t);return this.carryover=e[e.length-1],!0}}class mI extends FN{decodeUTF8(){return new gI(this)}}class gI extends pI{constructor(t){super(),this.upstream=t,this.impl=new yI(t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class yI extends GN{constructor(t){if(super(),this.upstream=t,zt().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:t}=n(589);this.decoder=new t("utf8")}}summary(){return this.upstream.summary()+" -> Utf8"}async pump(){const t=await this.upstream.next();let e,n;return!t.done&&(e=t.value,n=zt().get("IS_BROWSER")?this.decoder.decode(e,{stream:!0}):this.decoder.write(Buffer.from(e.buffer)),this.outputQueue.push(n),!0)}}class bI extends mI{constructor(t,e={}){super(),this.file=t,this.options=e,Z(t instanceof Uint8Array||!!zt().get("IS_BROWSER")&&(t instanceof File||t instanceof Blob),()=>"FileChunkIterator only supports File, Blob and Uint8Array right now."),this.offset=e.offset||0,this.chunkSize=e.chunkSize||1048576}summary(){return"FileChunks "+this.file}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const t=new Promise((t,e)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)t(new Uint8Array(this.file.slice(this.offset,n)));else{const s=new FileReader;s.onload=n=>{let r=s.result;if(r instanceof ArrayBuffer&&(r=new Uint8Array(r)),!(r instanceof Uint8Array))return e(new TypeError("FileReader returned unknown type."));t(r)},s.onabort=t=>e(new Error("Aborted")),s.onerror=t=>e(new Error(t.type));const r=this.file.slice(this.offset,n);s.readAsArrayBuffer(r)}this.offset=n});return{value:await t,done:!1}}}const xI=t=>({method:t.method,headers:t.headers,body:t.body,mode:t.mode,credentials:t.credentials,cache:t.cache,redirect:t.redirect,referrer:t.referrer,integrity:t.integrity});function wI(t){return"string"==typeof t&&"file://"===t.substr(0,7)}class vI extends hI{constructor(t,e={}){super(),this.input=t,this.options=e}async iterator(){if(wI(this.input)&&zt().get("IS_NODE")){const t=n(993);this.input=t.readFileSync(this.input.substr(7))}return new bI(this.input,this.options)}}class kI extends hI{constructor(t,e={}){super(),this.url=t,this.fileOptions=e}async iterator(){return wI(this.url)?new vI(this.url,this.fileOptions).iterator():async function(t,e={}){let n,s;"string"==typeof t?n=t:(n=t.url,s=xI(t));const r=await Qs(n,s);if(r.ok){const t=new Uint8Array(await r.arrayBuffer());return new bI(t,e)}throw new Error(r.statusText)}(this.url,this.fileOptions)}}function NI(t,e={}){return new lI(new kI(t),e)}function II(t){const e=RN(t);return ZN(async()=>e)}function CI(t){return ZN(async()=>{const e=await t();return RN(()=>e.next())})}async function SI(t,e){return cI.create(t,e)}async function TI(t){return uI.create(t)}const EI="2.7.0";function $I(t,e){Array.isArray(t)||(t=[t]),t.forEach(t=>{null!=t&&Z("complex64"!==t.dtype,()=>e+" does not support complex64 tensors in the CPU backend.")})}const AI=ep,RI=hd,DI=pd,FI=dd,_I=oh;class OI extends G{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new U(this,Bi())}write(t,e,n){this.firstUse&&(this.firstUse=!1,zt().get("IS_NODE")&&Zp("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const s={};return this.data.set(s,{values:t,dtype:n,refCount:1}),s}makeTensorInfo(t,e,n){let s;if("string"===e&&null!=n&&n.length>0&&kt(n[0])){const r=n.map(t=>tr(t));s=this.write(r,t,e)}else s=this.write(n,t,e);return{dataId:s,shape:t,dtype:e}}incRef(t){this.data.get(t).refCount++}decRef(t){if(this.data.has(t)){this.data.get(t).refCount--}}move(t,e,n,s){this.data.set(t,{values:e,dtype:s,refCount:1})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){const{dtype:e,complexTensorInfos:n}=this.data.get(t);if("complex64"===e){return td(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(t).values}bufferSync(t){const e=this.readSync(t.dataId);let n=e;if("string"===t.dtype)try{n=e.map(t=>er(t))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return Ca(t.shape,t.dtype,n)}makeOutput(t,e,n){const s=this.write(t,e,n);return Bi().makeTensorFromDataId(s,e,n,this)}disposeData(t){if(this.data.has(t)){const{complexTensorInfos:e}=this.data.get(t);null!=e&&(this.disposeData(e.real.dataId),this.disposeData(e.imag.dataId)),this.data.delete(t)}}disposeIntermediateTensorInfo(t){const e=t.dataId;if(this.data.has(e)){const t=this.data.get(e);t.refCount--,t.refCount<1&&this.disposeData(e)}}async time(t){const e=Zs();t();return{kernelMs:Zs()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}stridedSlice(t,e,n,s){$I(t,"stridedSlice");const r=oi(e,n,s);if(r.some(t=>0===t))return Mr([],r);const a=Ca(r,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;t++){const n=a.indexToLoc(t),r=new Array(n.length);for(let t=0;t<r.length;t++)r[t]=n[t]*s[t]+e[t];a.set(i.get(...r),...n)}return a.toTensor()}diag(t){const e=this.readSync(t.dataId),n=Ca([t.size,t.size],t.dtype),s=n.values;for(let n=0;n<e.length;n++)s[n*t.size+n]=e[n];return n.toTensor()}unstack(t,e){const n=t.shape[e],s=new Array(t.rank-1);let r=0;for(let n=0;n<t.rank;n++)n!==e&&(s[r++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=bl(t,a,i).reshape(s);return o}reverse(t,e){$I(t,"reverse");const n=Ca(t.shape,t.dtype),s=this.bufferSync(t);for(let r=0;r<n.size;r++){const a=n.indexToLoc(r),i=a.slice();e.forEach(e=>i[e]=t.shape[e]-1-i[e]),n.set(s.get(...i),...a)}return n.toTensor()}neg(t){return $I(t,"neg"),ro(go(-1),t)}addN(t){$I(t,"addN");const e=t.map(t=>this.readSync(t.dataId)),n=Ca(t[0].shape,t[0].dtype),s=n.values;for(let n=0;n<t.length;n++){const t=e[n];for(let e=0;e<s.length;e++)s[e]+=t[e]}return n.toTensor()}softmax(t,e){const n=pt([e],t.shape),s=Eu(t,n),r=Bo(s.shape,n),a=ko(t,s.reshape(r)),i=tu(a),o=this.sum(i,n).reshape(r);return so(i,o)}pow(t,e){return $I([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.pow(t,e))}floorDiv(t,e){$I([t,e],"floorDiv");return this.broadcastedBinaryOp(t,e,"int32",(t,e)=>Math.floor(t/e))}sum(t,e){$I(t,"sum"),Po("sum",e,t.rank);const[n,s]=zo(t.shape,e),r=Bu(n,fr(t.dtype,"int32")),a=nt(s),i=this.readSync(r.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=0;for(let t=0;t<a;++t)n+=o[e+t];i[t]=n}return r}prod(t,e){$I(t,"sum");const[n,s]=zo(t.shape,e),r=Bu(n,fr(t.dtype,"int32")),a=nt(s),i=this.readSync(r.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=1;for(let t=0;t<a;++t)n*=o[e+t];i[t]=n}return r}unsortedSegmentSum(t,e,n){$I(t,"unsortedSegmentSum");const s=[],r=t.rank-e.rank;for(let t=0;t<r;++t)e=e.expandDims(t+1);for(let r=0;r<n;++r){const n=go(r,"int32"),a=Kl(n,e).asType("float32").mul(t).sum(0);s.push(a)}return qc(s)}argMin(t,e){$I(t,"argMin");const n=[e];Po("argMin",n,t.rank);const[s,r]=zo(t.shape,n),a=Bu(s,"int32"),i=nt(r),o=this.readSync(a.dataId),l=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=l[e],s=0;for(let t=0;t<i;++t){const r=l[e+t];r<n&&(n=r,s=t)}o[t]=s}return a}argMax(t,e){$I(t,"argMax");const n=[e];Po("argMax",n,t.rank);const[s,r]=zo(t.shape,n),a=Bu(s,"int32"),i=nt(r),o=this.readSync(a.dataId),l=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=l[e],s=0;for(let t=0;t<i;++t){const r=l[e+t];r>n&&(n=r,s=t)}o[t]=s}return a}cumsum(t,e,n,s){if($I(t,"cumsum"),e!==t.rank-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${t.rank-1} but got axis=`+e);const r=fr(t.dtype,"int32"),a=Bu(t.shape,r),i=this.readSync(a.dataId),o=this.readSync(t.dataId),l=t.shape[t.rank-1],u=s?(t,e)=>t+l-e-1:(t,e)=>t+e;for(let t=0;t<o.length;t+=l)for(let e=0;e<l;e++){const s=u(t,e);if(0===e)i[s]=n?0:o[s];else{const r=u(t,e-1);i[s]=n?o[r]+i[r]:o[s]+i[r]}}return a}equal(t,e){return $I([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t===e?1:0)}notEqual(t,e){return $I([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t!==e?1:0)}less(t,e){return $I([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<e?1:0)}lessEqual(t,e){return $I([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<=e?1:0)}greater(t,e){return $I([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>e?1:0)}greaterEqual(t,e){return $I([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>=e?1:0)}logicalAnd(t,e){return $I([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t&&e)}logicalOr(t,e){return $I([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t||e)}select(t,e,n){$I([t,e,n],"select");const s=this.readSync(t.dataId),r=this.readSync(e.dataId),a=this.readSync(n.dataId),i=Bu(e.shape,fr(e.dtype,n.dtype)),o=this.readSync(i.dataId);let l=0;const u=0===t.rank||t.rank>1||1===e.rank?1:nt(e.shape.slice(1));for(let t=0;t<s.length;t++)for(let e=0;e<u;e++)1===s[t]?o[l++]=r[t]:o[l++]=a[t];return i}where(t){$I([t],"where");const e=this.readSync(t.dataId);return _I(t.shape,e)}topk(t,e,n){$I(t,"topk");const s=this.readSync(t.dataId);return FI(s,t.shape,t.dtype,e,n)}min(t,e){$I(t,"min"),Po("min",e,t.rank);const[n,s]=zo(t.shape,e),r=Bu(n,t.dtype),a=nt(s),i=this.readSync(r.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const s=o[e+t];s<n&&(n=s)}i[t]=n}return r}minimum(t,e){return $I([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.min(t,e))}mod(t,e){return $I([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e})}maximum(t,e){return $I([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.max(t,e))}all(t,e){$I(t,"all"),Po("all",e,t.rank);const[n,s]=zo(t.shape,e),r=Bu(n,t.dtype),a=nt(s),i=this.readSync(r.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const s=o[e+t];n=n&&s}i[t]=n}return r}any(t,e){$I(t,"any"),Po("any",e,t.rank);const[n,s]=zo(t.shape,e),r=Bu(n,t.dtype),a=nt(s),i=this.readSync(r.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const s=o[e+t];n=n||s}i[t]=n}return r}squaredDifference(t,e){return $I([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t-e;return n*n})}eluDer(t,e){$I([t,e],"eluDer");const n=new Float32Array(e.size),s=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let t=0;t<s.length;++t){const e=s[t];n[t]=e>=1?r[t]:r[t]*(e+1)}return this.makeOutput(n,e.shape,"float32")}atan2(t,e){return $I([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.atan2(t,e))}tile(t,e){return $I(t,"tile"),DI(this.bufferSync(t),e)}gather(t,e,n){$I([t,e],"gather");const s=t.shape.slice(),r=this.readSync(e.dataId);s[n]=r.length;const a=Ca(s,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;++t){const e=a.indexToLoc(t),s=e.slice();s[n]=r[e[n]];const o=i.locToIndex(s);a.values[t]=i.values[o]}return a.toTensor()}batchToSpaceND(t,e,n){$I([t],"batchToSpaceND");const s=e.reduce((t,e)=>t*e),r=Bp(t.shape,e,s),a=Pp(r.length,e.length),i=Wp(t.shape,e,s),o=Vp(n,e.length),l=Up(i,n,e.length);return Xa(t.reshape(r),a).reshape(i).slice(o,l)}pool3d(t,e,n){$I(t,"pool3d");const s=e.strideDepth,r=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.front,d=e.padInfo.top,f=e.padInfo.left,m="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(t.dataId),y=Ca(e.outShape,t.dtype),b=y.values,x=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[2]*e.outShape[3]*e.outShape[4],v=e.outShape[3]*e.outShape[4],k=e.outShape[4];for(let y=0;y<e.batchSize;++y){const N=y*x,I=y*t.strides[0];for(let y=0;y<e.inChannels;++y)for(let x=0;x<e.outDepth;++x){const C=x*s-p;let S=C;for(;S<0;)S+=i;const T=Math.min(e.inDepth,u+C),E=N+x*w;for(let s=0;s<e.outHeight;++s){const u=s*r-d;let p=u;for(;p<0;)p+=o;const x=Math.min(e.inHeight,c+u),w=E+s*v;for(let s=0;s<e.outWidth;++s){const r=s*a-f;let u=r;for(;u<0;)u+=l;const c=Math.min(e.inWidth,h+r),d=w+s*k;let v=m,N=0,C=0;for(let e=S;e<T;e+=i){const s=I+e*t.strides[1];for(let e=p;e<x;e+=o){const r=s+e*t.strides[2];for(let e=u;e<c;e+=l){const s=g[r+e*t.strides[3]+y];if("max"===n&&s>v?v=s:"avg"===n&&(N+=s,C++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}b[d+y]="avg"===n?N/C:v}}}}return y.toTensor()}avgPool3d(t,e){return $I(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()}avgPool3dBackprop(t,e,n){$I([t,e],"avgPool3dBackprop");const s=n.strideDepth,r=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,l=n.filterWidth,u=n.dilationDepth,c=n.dilationHeight,h=n.dilationWidth,p=n.effectiveFilterDepth,d=n.effectiveFilterHeight,f=n.effectiveFilterWidth,m=p-1-n.padInfo.front,g=f-1-n.padInfo.left,y=d-1-n.padInfo.top,b=Ca(e.shape,"float32"),x=1/(i*o*l),w=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let i=0;i<n.inDepth;++i)for(let o=0;o<n.inHeight;++o)for(let l=0;l<n.inWidth;++l){const v=i-m,k=o-y,N=l-g;let I=0;for(let i=0;i<p;i+=u){const o=(v+i)/s;if(!(o<0||o>=n.outDepth||Math.floor(o)!==o))for(let s=0;s<d;s+=c){const i=(k+s)/r;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let s=0;s<f;s+=h){const r=(N+s)/a;if(r<0||r>=n.outWidth||Math.floor(r)!==r)continue;I+=w.get(t,o,i,r,e)}}}b.set(I*x,t,i,o,l,e)}return b.toTensor()}maxPool3d(t,e){return $I(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()}maxPool3dPositions(t,e){const n=Ca(e.outShape,"int32"),s=e.strideDepth,r=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.front,d=e.padInfo.top,f=e.padInfo.left,m=this.bufferSync(t);for(let t=0;t<e.batchSize;++t)for(let g=0;g<e.inChannels;++g)for(let y=0;y<e.outDepth;++y){const b=y*s-p;let x=b;for(;x<0;)x+=i;const w=Math.min(e.inDepth,u+b);for(let s=0;s<e.outHeight;++s){const u=s*r-d;let p=u;for(;p<0;)p+=o;const v=Math.min(e.inHeight,c+u);for(let r=0;r<e.outWidth;++r){const d=r*a-f;let k=d;for(;k<0;)k+=l;const N=Math.min(e.inWidth,h+d);let I=Number.NEGATIVE_INFINITY,C=-1;for(let e=x;e<w;e+=i){const n=e-b;for(let s=p;s<v;s+=o){const r=s-u;for(let a=k;a<N;a+=l){const i=a-d,o=m.get(t,e,s,a,g);o>=I&&(I=o,C=n*c*h+r*c+i)}}}n.set(C,t,y,s,r,g)}}}return n.toTensor()}maxPool3dBackprop(t,e,n,s){$I([e,n],"maxPool3dBackprop");const r=this.maxPool3dPositions(e,s),a=s.strideDepth,i=s.strideHeight,o=s.strideWidth,l=s.dilationDepth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterDepth,p=s.effectiveFilterHeight,d=s.effectiveFilterWidth,f=h-1-s.padInfo.front,m=d-1-s.padInfo.left,g=p-1-s.padInfo.top,y=Ca(e.shape,"float32"),b=this.bufferSync(r),x=this.bufferSync(t);for(let t=0;t<s.batchSize;++t)for(let e=0;e<s.inChannels;++e)for(let n=0;n<s.inDepth;++n)for(let r=0;r<s.inHeight;++r)for(let w=0;w<s.inWidth;++w){const v=n-f,k=r-g,N=w-m;let I=0;for(let n=0;n<h;n+=l){const r=(v+n)/a;if(!(r<0||r>=s.outDepth||Math.floor(r)!==r))for(let a=0;a<p;a+=u){const l=(k+a)/i;if(!(l<0||l>=s.outHeight||Math.floor(l)!==l))for(let i=0;i<d;i+=c){const u=(N+i)/o;if(u<0||u>=s.outWidth||Math.floor(u)!==u)continue;const c=h*p*d-1-b.get(t,r,l,u,e)===n*p*d+a*d+i?1:0;if(0===c)continue;I+=x.get(t,r,l,u,e)*c}}}y.set(I,t,n,r,w,e)}return y.toTensor()}resizeBilinear(t,e,n,s){$I(t,"resizeBilinear");const[r,a,i,o]=t.shape,l=this.readSync(t.dataId),u=new Float32Array(nt([r,e,n,o])),c=[s&&e>1?a-1:a,s&&n>1?i-1:i],h=[s&&e>1?e-1:e,s&&n>1?n-1:n];let p=0;const d=c[0]/h[0],f=c[1]/h[1];for(let s=0;s<r;s++)for(let r=0;r<e;r++){const e=d*r,c=Math.floor(e),h=e-c,m=Math.min(a-1,Math.ceil(e)),g=s*t.strides[0]+c*t.strides[1],y=s*t.strides[0]+m*t.strides[1];for(let e=0;e<n;e++){const n=f*e,s=Math.floor(n),r=n-s,a=Math.min(i-1,Math.ceil(n)),c=g+s*t.strides[2],d=y+s*t.strides[2],m=g+a*t.strides[2],b=y+a*t.strides[2];for(let t=0;t<o;t++){const e=l[c+t],n=l[d+t],s=e+(l[m+t]-e)*r,a=s+(n+(l[b+t]-n)*r-s)*h;u[p++]=a}}}return Mr(u,[r,e,n,o])}resizeBilinearBackprop(t,e,n){$I([t,e],"resizeBilinearBackprop");const[s,r,a,i]=e.shape,[,o,l]=t.shape,u=new Float32Array(s*r*a*i),c=[n&&o>1?r-1:r,n&&l>1?a-1:a],h=[n&&o>1?o-1:o,n&&l>1?l-1:l],p=c[0]/h[0],d=c[1]/h[1],f=this.readSync(t.dataId);let m=0;for(let t=0;t<s;t++){const n=t*e.strides[0];for(let t=0;t<o;t++){const s=t*p,o=Math.floor(s),c=Math.min(Math.ceil(s),r-1),h=n+o*e.strides[1],g=n+c*e.strides[1],y=s-o,b=1-y;for(let t=0;t<l;t++){const n=t*d,s=Math.floor(n),r=Math.min(Math.ceil(n),a-1),o=n-s,l=1-o,c=h+s*e.strides[2],p=h+r*e.strides[2],x=g+s*e.strides[2],w=g+r*e.strides[2],v=b*l,k=b*o,N=y*l,I=y*o;for(let t=0;t<i;t++){const e=f[m++];u[c+t]+=e*v,u[p+t]+=e*k,u[x+t]+=e*N,u[w+t]+=e*I}}}}return Zc(u,[s,a,r,i],e.dtype)}resizeNearestNeighbor(t,e,n,s){$I(t,"resizeNearestNeighbor");const[r,a,i,o]=t.shape,l=this.readSync(t.dataId),u=new Float32Array(r*e*n*o),c=[s&&e>1?a-1:a,s&&n>1?i-1:i],h=[s&&e>1?e-1:e,s&&n>1?n-1:n],p=c[0]/h[0],d=c[1]/h[1];let f=0;for(let c=0;c<r;c++){const r=c*t.strides[0];for(let c=0;c<e;c++){const e=p*c,h=r+Math.min(a-1,s?Math.round(e):Math.floor(e))*t.strides[1];for(let e=0;e<n;e++){const n=d*e,r=h+Math.min(i-1,s?Math.round(n):Math.floor(n))*t.strides[2];for(let t=0;t<o;t++){const e=l[r+t];u[f++]=e}}}}return Mr(u,[r,e,n,o],t.dtype)}resizeNearestNeighborBackprop(t,e,n){$I([t,e],"resizeNearestNeighborBackprop");const[s,r,a,i]=e.shape,[,o,l]=t.shape,u=new Float32Array(s*r*a*i),c=this.readSync(t.dataId),h=[n&&o>1?r-1:r,n&&l>1?a-1:a],p=[n&&o>1?o-1:o,n&&l>1?l-1:l],d=h[0]/p[0],f=h[1]/p[1],m=1/d,g=1/f,y=2*Math.ceil(m)+2,b=2*Math.ceil(g)+2;for(let h=0;h<s;h++){const s=h*e.strides[0];for(let h=0;h<r;h++){const p=s+h*e.strides[1],x=Math.floor(h*m),w=Math.floor(x-y/2);for(let m=0;m<a;m++){const x=p+m*e.strides[2],v=Math.floor(m*g),k=Math.floor(v-b/2);for(let e=0;e<i;e++){let i=0;for(let u=0;u<y;u++){const p=u+w;if(p<0||p>=o)continue;const g=s+p*t.strides[1],y=p*d;if(h===Math.min(r-1,n?Math.round(y):Math.floor(y)))for(let s=0;s<b;s++){const r=s+k;if(r<0||r>=l)continue;const o=g+r*t.strides[2],u=r*f;m===Math.min(a-1,n?Math.round(u):Math.floor(u))&&(i+=c[o+e])}}u[x+e]=i}}}}return Zc(u,e.shape,e.dtype)}localResponseNormalization4D(t,e,n,s,r){$I(t,"localResponseNormalization4D");const a=t.shape[3],i=a-1,o=this.readSync(t.dataId),l=t.size,u=new Float32Array(l);function c(t){const n=t%a;let s=t-n+Math.max(0,n-e);const r=t-n+Math.min(n+e,i);let l=0;for(;s<=r;s++){const t=o[s];l+=t*t}return l}for(let t=0;t<l;t++){const e=c(t),a=o[t]*Math.pow(n+s*e,-r);u[t]=a}return Zc(u,t.shape)}LRNGrad(t,e,n,s,r,a,i){$I(t,"LRNGrad");const o=t.shape[3],l=this.readSync(t.dataId),u=this.readSync(e.dataId),c=this.readSync(n.dataId),h=new Float32Array(t.size),p=t.size;for(let t=0;t<p;t++){const e=t%o,n=t-e+Math.max(0,e-s),p=t-e+Math.min(o,e+s+1);let d=0;for(let t=n;t<p;t++)d+=Math.pow(u[t],2);d=a*d+r;for(let e=n;e<p;e++){let n=-2*a*i*u[e]*c[t]/d;t===e&&(n+=Math.pow(d,-i)),n*=l[t],h[e]+=n}}return Zc(h,t.shape)}multinomial(t,e,n,s){$I(t,"multinomial");const r=e?t:zc(t),a=r.shape[0],i=r.shape[1],o=Bu([a,n],"int32"),l=this.readSync(o.dataId),u=this.readSync(r.dataId);for(let t=0;t<a;++t){const e=t*i,r=new Float32Array(i-1);r[0]=u[e];for(let t=1;t<r.length;++t)r[t]=r[t-1]+u[e+t];const a=uc.alea(s.toString()),o=t*n;for(let t=0;t<n;++t){const e=a();l[o+t]=r.length;for(let n=0;n<r.length;n++)if(e<r[n]){l[o+t]=n;break}}}return o}oneHot(t,e,n,s){$I(t,"oneHot");const r=new Float32Array(t.size*e);r.fill(s);const a=this.readSync(t.dataId);for(let s=0;s<t.size;++s)a[s]>=0&&a[s]<e&&(r[s*e+a[s]]=n);return Jc(r,[t.size,e],"int32")}nonMaxSuppression(t,e,n,s,r){$I(t,"nonMaxSuppression");const a=this.readSync(t.dataId),i=this.readSync(e.dataId);return AI(a,i,n,s,r)}depthToSpace(t,e,n){Z("NHWC"===n,()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n),Z(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const s=t.shape[0],r=t.shape[1],a=t.shape[2],i=t.shape[3],o=r*e,l=a*e,u=i/(e*e),c=this.readSync(t.dataId),h=new Float32Array(s*o*l*u);let p=0;for(let t=0;t<s;++t)for(let n=0;n<o;++n){const s=Math.floor(n/e),o=n%e;for(let n=0;n<l;++n){const l=Math.floor(n/e),d=(o*e+n%e)*u;for(let e=0;e<u;++e){const n=e+d+i*(l+a*(s+r*t));h[p++]=c[n]}}}return Zc(h,[s,o,l,u])}broadcastedBinaryOp(t,e,n,s){const r=To(t.shape,e.shape),a=Ca(r,n),i=this.readSync(t.dataId),o=this.readSync(e.dataId),l=Co(t.shape,r),u=Co(e.shape,r),c=a.values;if(l.length+u.length===0)for(let t=0;t<c.length;++t)c[t]=s(i[t%i.length],o[t%o.length]);else{const n=this.bufferSync(t),r=this.bufferSync(e);for(let h=0;h<c.length;++h){const p=a.indexToLoc(h),d=p.slice(-t.rank);l.forEach(t=>d[t]=0);const f=n.locToIndex(d),m=p.slice(-e.rank);u.forEach(t=>m[t]=0);const g=r.locToIndex(m);c[h]=s(i[f],o[g])}}return a.toTensor()}split(t,e,n){return RI(t,e,n)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}cropAndResize(t,e,n,s,r,a){const[i,o,l,u]=t.shape,c=e.shape[0],[h,p]=s,d=Ca([c,h,p,u],"float32"),f=this.readSync(e.dataId),m=this.readSync(n.dataId),g=this.readSync(t.dataId),y=t.strides,b=d.strides;for(let t=0;t<c;t++){const e=4*t,n=f[e],s=f[e+1],c=f[e+2],x=f[e+3],w=m[t];if(w>=i)continue;const v=h>1?(c-n)*(o-1)/(h-1):0,k=p>1?(x-s)*(l-1)/(p-1):0;for(let e=0;e<h;e++){const i=h>1?n*(o-1)+e*v:.5*(n+c)*(o-1);if(i<0||i>o-1)for(let n=0;n<p;n++)for(let s=0;s<u;s++){const r=s+n*b[2]+e*b[1]+t*b[0];d.values[r]=a}else if("bilinear"===r){const n=Math.floor(i),r=Math.ceil(i),o=i-n;for(let i=0;i<p;i++){const c=p>1?s*(l-1)+i*k:.5*(s+x)*(l-1);if(c<0||c>l-1){for(let n=0;n<u;n++){const s=n+i*b[2]+e*b[1]+t*b[0];d.values[s]=a}continue}const h=Math.floor(c),f=Math.ceil(c),m=c-h;for(let s=0;s<u;s++){let a=s+h*y[2]+n*y[1]+w*y[0];const l=g[a];a=s+f*y[2]+n*y[1]+w*y[0];const u=g[a];a=s+h*y[2]+r*y[1]+w*y[0];const c=g[a];a=s+f*y[2]+r*y[1]+w*y[0];const p=l+(u-l)*m,x=c+(g[a]-c)*m;a=s+i*b[2]+e*b[1]+t*b[0],d.values[a]=p+(x-p)*o}}}else for(let n=0;n<p;++n){const r=p>1?s*(l-1)+n*k:.5*(s+x)*(l-1);if(r<0||r>l-1){for(let s=0;s<u;s++){const r=s+n*b[2]+e*b[1]+t*b[0];d.values[r]=a}continue}const o=Math.round(r),c=Math.round(i);for(let s=0;s<u;s++){const r=s+o*y[2]+c*y[1]+w*y[0],a=s+n*b[2]+e*b[1]+t*b[0];d.values[a]=g[r]}}}}return d.toTensor()}sparseToDense(t,e,n,s){const{sliceRank:r,numUpdates:a,sliceSize:i,strides:o,outputSize:l}=ri(0,t,n);return this.scatter(t,e,n,l,i,a,r,o,s,!1)}gatherND(t,e){const n=e.shape,s=n[n.length-1],[r,a,i,o]=ei(t,e);if(0===a)return Mr([],r,t.dtype);const l=new nr([a,i],t.dtype),u=this.readSync(e.dataId),c=this.readSync(t.dataId);for(let e=0;e<a;e++){const n=[];let r=0;for(let t=0;t<s;t++){const a=u[e*s+t];r+=a*o[t],n.push(a)}if(r<0||r>=t.size/i)throw new Error(`Invalid indices: ${n} does not index into ${t.shape}`);for(let t=0;t<i;t++)l.values[e*i+t]=c[r*i+t]}return l.toTensor().reshape(r)}scatterND(t,e,n){const{sliceRank:s,numUpdates:r,sliceSize:a,strides:i,outputSize:o}=ri(0,t,n),l=go(0);return this.scatter(t,e,n,o,a,r,s,i,l,!0)}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return xo(t.shape,1,t.dtype)}zerosLike(t){const e=mt(t.dtype,nt(t.shape));return this.makeOutput(e,t.shape,t.dtype)}linspace(t,e,n){return cd(t,e,n)}scatter(t,e,n,s,r,a,i,o,l,u){const c=[s/r,r],h=this.readSync(t.dataId),p=this.readSync(e.dataId);if(0===s)return Mr([],n,e.dtype);const d=new nr(c,e.dtype);d.values.fill(this.readSync(l.dataId)[0]);for(let t=0;t<a;t++){const a=[];let l=0;for(let e=0;e<i;e++){const n=h[t*i+e];a.push(n),l+=n*o[e]}if(l<0||l>=s/r)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<r;n++)u?d.values[l*r+n]+=p[t*r+n]:d.values[l*r+n]=0===e.rank?p[0]:p[t*r+n]}return d.toTensor().reshape(n)}}function MI(t,e,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if($I(i,t),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=nt(i.shape),c=n||i.dtype,h=mt(c,u);for(let t=0;t<u;++t)h[t]=e(l[t],r);return o.makeTensorInfo(i.shape,c,h)}}function LI(t,e,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if($I(i,t),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=n||i.dtype,c=e(l,u,r);return o.makeTensorInfo(i.shape,u,c)}}Zi("cpu",()=>new OI,1);const zI=MI(_e,t=>t>=0?t:Math.exp(t)-1),BI={kernelName:_e,backendName:"cpu",kernelFunc:zI};function PI(t){const{inputs:e,backend:n}=t,{x:s}=e;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const WI={kernelName:Ye,backendName:"cpu",kernelFunc:PI};function VI(t){return(e,n,s,r,a)=>{const i=To(e,n),o=i.length,l=Et(i),u=ft(a,nt(i)),c=e.length,h=n.length,p=Et(e),d=Et(n),f=Co(e,i),m=Co(n,i);if(f.length+m.length===0)for(let e=0;e<u.length;++e)u[e]=t(s[e%s.length],r[e%r.length]);else for(let e=0;e<u.length;++e){const n=Ot(e,o,l),a=n.slice(-c);f.forEach(t=>a[t]=0);const i=_t(a,c,p),g=n.slice(-h);m.forEach(t=>g[t]=0);const y=_t(g,h,d);u[e]=t(s[i],r[y])}return[u,i]}}const UI=VI((t,e)=>t<0?e*t:t);function GI(t){const{inputs:e,backend:n}=t,{x:s,alpha:r}=e;$I([s,r],"prelu");const a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,[o,l]=UI(s.shape,r.shape,a,i,s.dtype);return n.makeTensorInfo(l,s.dtype,o)}const HI={kernelName:Ln,backendName:"cpu",kernelFunc:GI},jI=MI(Vn,t=>Math.max(0,t)),qI={kernelName:Vn,backendName:"cpu",kernelFunc:jI},KI=MI(Kn,t=>Math.min(Math.max(0,t),6)),XI={kernelName:Kn,backendName:"cpu",kernelFunc:KI};function YI(t,e,n,s){if("linear"===n)return PI({inputs:{x:e},backend:t});if("relu"===n)return jI({inputs:{x:e},backend:t});if("elu"===n)return zI({inputs:{x:e},backend:t});if("relu6"===n)return KI({inputs:{x:e},backend:t});if("prelu"===n)return GI({inputs:{x:e,alpha:s},backend:t});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function JI(t){const{inputs:e,backend:n}=t,{real:s,imag:r}=e,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const ZI={kernelName:de,backendName:"cpu",kernelFunc:JI};function QI(t){const{inputs:e,backend:n}=t,{input:s}=e,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const tC={kernelName:Pn,backendName:"cpu",kernelFunc:QI};function eC(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return PI({inputs:{x:r},backend:n});const t=Bu(r.shape),e=eC({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=JI({inputs:{real:e,imag:t},backend:n});return t.dispose(),n.disposeIntermediateTensorInfo(e),s}if("complex64"===r.dtype){const t=QI({inputs:{input:r},backend:n}),e=eC({inputs:{x:t},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(t),e}if(!bt(r.dtype,a)){const t=PI({inputs:{x:r},backend:n});return{dataId:t.dataId,shape:t.shape,dtype:a}}if("int32"===a){const t=n.data.get(r.dataId).values,e=Int32Array.from(t);return n.makeTensorInfo(r.shape,"int32",e)}if("bool"===a){const t=n.data.get(r.dataId).values,e=Js([0],r.dtype),[s,a]=VI((t,e)=>t!==e?1:0)(r.shape,[],t,e,"bool");return n.makeTensorInfo(a,"bool",s)}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`)}const nC={kernelName:ce,backendName:"cpu",kernelFunc:eC};function sC(t,e,n,s){return null==n?({inputs:n,backend:r})=>{const{a:a,b:i}=n,o=r;$I([a,i],t);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c=s||a.dtype,[h,p]=e(a.shape,i.shape,l,u,c);return o.makeTensorInfo(p,c,h)}:({inputs:t,backend:r})=>{const{a:a,b:i}=t,o=r;if("complex64"===a.dtype||"complex64"===i.dtype){const t=eC({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),e=o.data.get(t.dataId),s=e.complexTensorInfos.real,r=e.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(r.dataId).values,c=eC({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(a.shape,i.shape,l,u,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),v=JI({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(t),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),v}{const t=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,r=s||a.dtype,[l,u]=e(a.shape,i.shape,t,n,r);return o.makeTensorInfo(u,r,l)}}}function rC(t){return(e,n,s,r,a,i)=>{const o=To(e,n),l=nt(o),u=o.length,c=Et(o),h=ft("float32",l),p=ft("float32",l),d=Co(e,o),f=Co(n,o),m=td(s,r),g=td(a,i),y=e.length,b=Et(e),x=n.length,w=Et(n);if(d.length+f.length===0)for(let e=0;e<h.length;e++){const n=e%m.length,s=e%g.length,r=t(m[2*n],m[2*n+1],g[2*s],g[2*s+1]);h[e]=r.real,p[e]=r.imag}else for(let e=0;e<h.length;e++){const n=Ot(e,u,c),s=n.slice(-y);d.forEach(t=>s[t]=0);const r=_t(s,y,b),a=n.slice(-x);f.forEach(t=>a[t]=0);const i=_t(a,x,w),o=t(m[2*r],m[2*r+1],g[2*i],g[2*i+1]);h[e]=o.real,p[e]=o.imag}return[h,p,o]}}const aC=VI((t,e)=>t+e),iC=rC((t,e,n,s)=>({real:t+n,imag:e+s})),oC=sC(jt,aC,iC),lC={kernelName:jt,backendName:"cpu",kernelFunc:oC};function uC(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e,{shape:a}=s,i=nt(r.shape),o=ht(a,i),l=nt(o);Z(i===l,()=>`The new shape (${o}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),n.incRef(r.dataId);const u=n.data.get(r.dataId);if(null!=u.complexTensorInfos){const t=u.complexTensorInfos.real,e=u.complexTensorInfos.imag;t.shape=o,e.shape=o}return{dataId:r.dataId,shape:o,dtype:r.dtype}}const cC={kernelName:Un,backendName:"cpu",kernelFunc:uC};function hC(t){const{inputs:e,backend:n,attrs:s}=t,{a:r,b:a}=e,{transposeA:i,transposeB:o}=s;$I([r,a],"matMul");const l=r.shape.length,u=a.shape.length,c=i?r.shape[l-2]:r.shape[l-1],h=o?a.shape[u-1]:a.shape[u-2],p=i?r.shape[l-1]:r.shape[l-2],d=o?a.shape[u-2]:a.shape[u-1],f=r.shape.slice(0,-2),m=a.shape.slice(0,-2),g=nt(f),y=nt(m);Z(l>=2&&u>=2&&(g===y||1===g||1===y),()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${f}) and (${m}).`);const b=(g>y?r.shape.slice(0,-2):a.shape.slice(0,-2)).concat([p,d]);Z(c===h,()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`);const x=o?[y,d,h]:[y,h,d],w=uC({inputs:{x:r},backend:n,attrs:{shape:i?[g,c,p]:[g,p,c]}}),v=uC({inputs:{x:a},backend:n,attrs:{shape:x}}),k=i?w.shape[1]:w.shape[2],N=i?w.shape[2]:w.shape[1],I=o?v.shape[1]:v.shape[2],C=Math.max(g,y),S=n.data.get(w.dataId).values,T=n.data.get(v.dataId).values,E=Et(w.shape),$=Et(v.shape),[A,R,D]=i?[E[0],1,E[1]]:[E[0],E[1],1],[F,_,O]=o?[1,$[1],$[0]]:[$[1],1,$[0]],M=N*I,L=Ca([C,N,I],w.dtype),z=L.values,B=n.blockSize;for(let t=0;t<C;t++)for(let e=0;e<N;e+=B)for(let n=0;n<I;n+=B)for(let s=0;s<k;s+=B){const r=Math.min(e+B,N),a=Math.min(n+B,I),i=Math.min(s+B,k);for(let o=e;o<r;o++)for(let e=n;e<a;e++){let n=0;for(let r=s;r<i;r++){const s=Math.min(t,g-1)*A,a=Math.min(t,y-1)*O;n+=S[s+o*R+r*D]*T[r*F+e*_+a]}z[t*M+(o*I+e)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(v),n.makeTensorInfo(b,L.dtype,L.values)}const pC={kernelName:oe,backendName:"cpu",kernelFunc:hC};const dC={kernelName:$s,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{a:r,b:a,bias:i,preluActivationWeights:o}=e,{transposeA:l,transposeB:u,activation:c}=s;let h,p,d;const f=[];h=hC({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(p=oC({inputs:{a:h,b:i},backend:n}),f.push(h),h=p),c&&(d=YI(n,h,c,o),f.push(h),h=d);for(const t of f)n.disposeIntermediateTensorInfo(t);return h}};function fC(t){const e=new Float32Array(t.length);for(let n=0;n<t.length;++n)e[n]=Math.abs(t[n]);return e}const mC={kernelName:Ut,backendName:"cpu",kernelFunc:t=>{const{x:e}=t.inputs,n=t.backend;let s=new Float32Array(nt(e.shape));if("complex64"!==e.dtype){s=fC(n.data.get(e.dataId).values)}else{const t=n.data.get(e.dataId),r=t.complexTensorInfos.real,a=t.complexTensorInfos.imag,i=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values;for(let t=0;t<i.length;t++){const e=i[t],n=o[t];s[t]=Math.hypot(e,n)}}return n.makeOutput(s,e.shape,"float32")}},gC=MI(Gt,t=>Math.acos(t)),yC={kernelName:Gt,backendName:"cpu",kernelFunc:gC},bC=MI(Ht,t=>Math.acosh(t)),xC={kernelName:Ht,backendName:"cpu",kernelFunc:bC},wC=MI(Zt,t=>Math.asin(t)),vC={kernelName:Zt,backendName:"cpu",kernelFunc:wC},kC=MI(Qt,t=>Math.asinh(t)),NC={kernelName:Qt,backendName:"cpu",kernelFunc:kC},IC=MI(te,t=>Math.atan(t)),CC={kernelName:te,backendName:"cpu",kernelFunc:IC},SC=MI(ee,t=>Math.atanh(t)),TC={kernelName:ee,backendName:"cpu",kernelFunc:SC};function EC(t,e,n,s,r,a){const i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=r.padInfo.top,d=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Ca(r.outShape,n),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let e=0;e<r.batchSize;++e){const n=e*y,m=e*s[0];for(let e=0;e<r.inChannels;++e)for(let y=0;y<r.outHeight;++y){const w=y*i-p,v=Math.max(0,w),k=Math.min(r.inHeight,c+w),N=n+y*b;for(let n=0;n<r.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(r.inWidth,h+i);let y=f,b=0,w=0;for(let n=v;n<k;n+=l){const r=m+n*s[1];for(let n=c;n<p;n+=u){const i=t[r+n*s[2]+e];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[N+n*x+e]="avg"===a?b/w:y}}}return m}function $C(t,e,n,s,r=!1,a=!1){const i=Ca(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,p=s.effectiveFilterWidth,d=s.padInfo.top,f=s.padInfo.left,m=Ca(e,n,t);for(let t=0;t<s.batchSize;++t)for(let e=0;e<s.inChannels;++e)for(let n=0;n<s.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=u;const b=Math.min(s.inHeight,h+g);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(s.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=d;o<x;o+=c){const l=o-h,u=m.get(t,n,o,e);u>w&&(w=u,v=r?a?((t*s.inHeight+n)*s.inWidth+o)*s.inChannels+e:(n*s.inWidth+o)*s.inChannels+e:i*p+l)}}i.set(v,t,n,o,e)}}return i}const AC={kernelName:se,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e;$I(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Z(cl(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=tl(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&rt(u.inShape,u.outShape))c=PI({inputs:{x:r},backend:n});else{const t=n.data.get(r.dataId).values,e=Et(r.shape),s=EC(t,r.shape,r.dtype,e,u,"avg");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}};const RC={kernelName:re,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{dy:r,input:a}=e,i=a;$I([r,a],"avgPoolBackprop");const{filterSize:o,strides:l,pad:u}=s,c=tl(i.shape,o,l,1,u),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,v=Ca(i.shape,"float32"),k=1/(d*f),N=n.data.get(r.dataId).values,I=Ca(r.shape,"float32",N);for(let t=0;t<c.batchSize;++t)for(let e=0;e<c.inChannels;++e)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=n-w,a=s-x;let i=0;for(let n=0;n<y;n+=m){const s=(r+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<b;n+=g){const r=(a+n)/p;if(r<0||r>=c.outWidth||Math.floor(r)!==r)continue;i+=I.get(t,s,r,e)}}v.set(i*k,t,n,s,e)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}};const DC={kernelName:He,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r,scale:a,offset:i,mean:o,variance:l}=e;Z(o.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),Z(null==i||o.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),Z(null==a||o.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),$I([r,o,l,a,i],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(r.dataId).values,h=n.data.get(o.dataId).values,p=n.data.get(l.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=p.length,x=h.length;let w=0,v=0,k=0,N=0;for(let t=0;t<c.length;++t)m[t]=f[w++]+(c[t]-h[v++])*d[k++]/Math.sqrt(p[N++]+u),w>=g&&(w=0),v>=x&&(v=0),k>=y&&(k=0),N>=b&&(N=0);return n.makeTensorInfo(r.shape,r.dtype,m)}};function FC(t){return(e,n,s)=>{const r=ft(n,e.length);for(let n=0;n<e.length;++n)r[n]=t(e[n],s);return r}}const _C=FC(t=>Math.ceil(t)),OC=LI(he,_C),MC={kernelName:he,backendName:"cpu",kernelFunc:OC},LC=MI(pe,(t,e)=>{const n=e;return t>n.clipValueMax?n.clipValueMax:t<n.clipValueMin?n.clipValueMin:t}),zC={kernelName:pe,backendName:"cpu",kernelFunc:LC};function BC(t){const{inputs:e,backend:n}=t,{input:s}=e,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const PC={kernelName:Ze,backendName:"cpu",kernelFunc:BC};function WC(t){const{inputs:e,backend:n,attrs:s}=t,{axis:r}=s,a=pt(r,e[0].shape)[0];let i=ml(e.map(t=>t.shape),a);if(0===nt(i))return n.makeTensorInfo(i,e[0].dtype,[]);const o=e.filter(t=>nt(t.shape)>0);if(1===o.length)return o[0];if(fl(o.map(t=>t.shape),a),"complex64"===o[0].dtype){const t=o.map(t=>QI({inputs:{input:t},backend:n})),e=o.map(t=>BC({inputs:{input:t},backend:n})),s=WC({inputs:t,backend:n,attrs:{axis:a}}),r=WC({inputs:e,backend:n,attrs:{axis:a}}),i=JI({inputs:{real:s,imag:r},backend:n});return t.forEach(t=>n.disposeIntermediateTensorInfo(t)),e.forEach(t=>n.disposeIntermediateTensorInfo(t)),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),i}const l=o.map(t=>{const e=nt(t.shape.slice(a));return uC({inputs:{x:t},backend:n,attrs:{shape:[-1,e]}})});i=ml(l.map(t=>t.shape),1);const u=ft(o[0].dtype,nt(i));if(1===l[0].shape[0]){let t=0;l.forEach(e=>{const s=n.data.get(e.dataId).values,r=nt(e.shape);u.set(s,t),t+=r})}else{let t=0;l.forEach(e=>{const s=n.data.get(e.dataId).values;let r=0;for(let n=0;n<e.shape[0];++n){const a=n*i[1]+t;for(let t=0;t<e.shape[1];++t)u[a+t]=s[r++]}t+=e.shape[1]})}const c=ml(o.map(t=>t.shape),a),h=n.makeTensorInfo(c,e[0].dtype,u);return l.forEach(t=>n.disposeIntermediateTensorInfo(t)),h}const VC={kernelName:fe,backendName:"cpu",kernelFunc:WC};function UC(t){const{inputs:e,backend:n,attrs:s}=t,{x:r,filter:a}=e,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;$I([r,a],"conv2d");const h=hl(l),p=nl(r.shape,a.shape,i,u,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,w=new nr(p.outShape,r.dtype),v=Et(r.shape),k=Et(a.shape),N=v[0],I=x?v[1]:v[2],C=x?v[2]:1,S=x?1:v[1],T=w.strides[0],E=x?w.strides[1]:w.strides[2],$=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(r.dataId).values,D=n.data.get(a.dataId).values,F=w.values;for(let t=0;t<p.batchSize;++t){const e=t*N,n=t*T;for(let t=0;t<p.outHeight;++t){const s=n+t*E,r=t*p.strideHeight-b;for(let t=0;t<d;++t){const n=r+t*m;if(n<0||n>=p.inHeight)continue;const a=t*k[0],i=e+n*I;for(let t=0;t<p.outWidth;++t){const e=s+t*$,n=t*p.strideWidth-y;for(let t=0;t<f;++t){const s=n+t*g;if(s<0||s>=p.inWidth)continue;const r=i+s*C;let o=a+t*k[1];for(let t=0;t<p.inChannels;++t){const n=R[r+t*S];for(let t=0;t<p.outChannels;++t)F[e+t*A]+=n*D[o+t];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,F)}const GC={kernelName:me,backendName:"cpu",kernelFunc:UC};const HC={kernelName:ge,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r,dy:a}=e,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;$I([r,a],"conv2dBackpropFilter");const h=hl(l),p=nl(r.shape,c,i,1,o,u,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new nr(p.filterShape,"float32"),x=p.padInfo.left,w=p.padInfo.top,v=n.data.get(r.dataId).values,k=n.data.get(a.dataId).values,N=new nr(r.shape,r.dtype,v),I=new nr(a.shape,a.dtype,k);for(let t=0;t<m;++t){const e=Math.max(0,Math.ceil((w-t)/d)),n=Math.min(p.outHeight,(p.inHeight+w-t)/d);for(let s=0;s<g;++s){const r=Math.max(0,Math.ceil((x-s)/f)),a=Math.min(p.outWidth,(p.inWidth+x-s)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let l=0;for(let u=0;u<p.batchSize;++u)for(let c=e;c<n;++c){const e=t+c*d-w;for(let t=r;t<a;++t){const n=s+t*f-x;l+=y?N.get(u,e,n,i)*I.get(u,c,t,o):N.get(u,i,e,n)*I.get(u,o,c,t)}}b.set(l,t,s,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const jC={kernelName:ye,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{dy:r,filter:a}=e,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;$I([r,a],"conv2dBackpropInput");const h=Et(a.shape),p=Et(r.shape);let d=hl(u);const f=nl(i,a.shape,o,1,l,c,!1,d),m=new nr(f.inShape,"float32"),g=m.values,y=n.data.get(r.dataId).values,b=n.data.get(a.dataId).values,[x,w,v]=h,{batchSize:k,filterHeight:N,filterWidth:I,inChannels:C,inHeight:S,inWidth:T,outChannels:E,outHeight:$,outWidth:A,strideHeight:R,strideWidth:D}=f;d=f.dataFormat;const F=N-1-f.padInfo.top,_=I-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,B=O?1:m.strides[1],P=p[0],W=O?p[1]:p[2],V=O?p[2]:1,U=O?1:p[1];for(let t=0;t<k;++t)for(let e=0;e<C;++e)for(let n=0;n<S;++n){const s=n-F,r=Math.max(0,Math.ceil(s/R)),a=Math.min($,(N+s)/R);for(let i=0;i<T;++i){const o=i-_,l=Math.max(0,Math.ceil(o/D)),u=Math.min(A,(I+o)/D);let c=0;for(let n=r;n<a;++n){const r=n*R-s;for(let s=l;s<u;++s){const a=P*t+W*n+V*s,i=x*(N-1-r)+w*(I-1-(s*D-o))+v*e;for(let t=0;t<E;++t){c+=y[a+U*t]*b[i+t]}}}g[M*t+L*n+z*i+B*e]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const qC={kernelName:be,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r,filter:a}=e,{strides:i,pad:o,dilations:l}=s;$I([r,a],"conv3d");const u=sl(r.shape,a.shape,i,l,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,w=new nr(u.outShape,r.dtype),v=n.data.get(r.dataId).values,k=n.data.get(a.dataId).values,N=w.values,I=Et(r.shape),C=Et(a.shape);for(let t=0;t<u.batchSize;++t){const e=t*I[0],n=t*w.strides[0];for(let t=0;t<u.outDepth;++t){const s=n+t*w.strides[1],r=t*u.strideDepth-y;for(let t=0;t<c;++t){const n=r+t*d;if(n<0||n>=u.inDepth)continue;const a=t*C[0],i=e+n*I[1];for(let t=0;t<u.outHeight;++t){const e=s+t*w.strides[2],n=t*u.strideHeight-x;for(let t=0;t<h;++t){const s=n+t*f;if(s<0||s>=u.inHeight)continue;const r=a+t*C[1],o=i+s*I[2];for(let t=0;t<u.outWidth;++t){const n=e+t*u.outChannels,s=t*u.strideWidth-b;for(let t=0;t<p;++t){const e=s+t*m;if(e<0||e>=u.inWidth)continue;const a=r+t*C[2],i=o+e*u.inChannels;let l=a;for(let t=0;t<u.inChannels;++t){const e=v[i+t];for(let t=0;t<u.outChannels;++t)N[n+t]+=e*k[l+t];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const KC={kernelName:xe,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r,dy:a}=e,{strides:i,pad:o,filterShape:l}=s;$I([r,a],"conv3dBackpropFilterV2");const u=Et(r.shape),c=Et(a.shape),h=sl(r.shape,l,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new nr(h.filterShape,"float32"),x=b.values,[w,v,k,N]=b.strides,I=n.data.get(a.dataId).values,[C,S,T,E]=c,$=n.data.get(r.dataId).values,[A,R,D,F]=u,_=h.padInfo.front,O=h.padInfo.left,M=h.padInfo.top;for(let t=0;t<m;++t){const e=Math.max(0,Math.ceil((_-t)/p)),n=Math.min(h.outDepth,(h.inDepth+_-t)/p),s=t*w;for(let r=0;r<g;++r){const a=Math.max(0,Math.ceil((M-r)/d)),i=Math.min(h.outHeight,(h.inHeight+M-r)/d),o=r*v+s;for(let s=0;s<y;++s){const l=Math.max(0,Math.ceil((O-s)/f)),u=Math.min(h.outWidth,(h.inWidth+O-s)/f),c=s*k+o;for(let o=0;o<h.inChannels;++o){const m=o*N+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*A,y=m*C;for(let m=e;m<n;++m){const e=(t+m*p-_)*R+h,n=m*S+y;for(let t=a;t<i;++t){const a=(r+t*d-M)*D+e,i=t*T+n;for(let t=l;t<u;++t){const e=t*E+i;g+=$[(s+t*f-O)*F+a+o]*I[e+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const XC={kernelName:we,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{dy:r,filter:a}=e,{pad:i,strides:o,inputShape:l}=s;$I([r],"conv3dBackpropInputV2");const u=Et(r.shape),c=Et(a.shape),h=sl(l,a.shape,o,1,i),p=new nr(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(r.dataId).values,[x,w,v,k]=u,N=n.data.get(a.dataId).values,[I,C,S,T]=c,{batchSize:E,filterDepth:$,filterHeight:A,filterWidth:R,inChannels:D,inDepth:F,inHeight:_,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:B,strideDepth:P,strideHeight:W,strideWidth:V}=h,U=$-1-h.padInfo.front,G=A-1-h.padInfo.top,H=R-1-h.padInfo.left;for(let t=0;t<E;++t)for(let e=0;e<D;++e)for(let n=0;n<F;++n){const s=n-U,r=Math.max(0,Math.ceil(s/P)),a=Math.min(L,($+s)/P);for(let i=0;i<_;++i){const o=i-G,l=Math.max(0,Math.ceil(o/W)),u=Math.min(z,(A+o)/W);for(let c=0;c<O;++c){const h=c-H,p=Math.max(0,Math.ceil(h/V)),E=Math.min(B,(R+h)/V);let D=0;for(let n=r;n<a;++n){const r=n*P-s;for(let s=l;s<u;++s){const a=s*W-o;for(let i=p;i<E;++i){const o=x*t+w*n+v*s+k*i,l=I*($-1-r)+C*(A-1-a)+S*(R-1-(i*V-h))+T*e;for(let t=0;t<M;++t){D+=b[o+t]*N[l+t]}}}}d[f*t+m*n+g*i+y*c+e]=D}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},YC=MI(ve,t=>Math.cos(t)),JC={kernelName:ve,backendName:"cpu",kernelFunc:YC},ZC=MI(ke,t=>Math.cosh(t)),QC={kernelName:ke,backendName:"cpu",kernelFunc:ZC};function tS(t){const{inputs:e,backend:n,attrs:s}=t,{x:r,filter:a}=e,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;$I([r,a],"depthwiseConv2DNative");const c=Et(r.shape),h=Et(a.shape);let p=l;null==p&&(p=[1,1]),Z(cl(i,p),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`);const d=nl(r.shape,a.shape,i,p,o,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,v=d.outChannels/d.inChannels,k=new nr(d.outShape,r.dtype),N=n.data.get(r.dataId).values,I=n.data.get(a.dataId).values,C=k.values;for(let t=0;t<d.batchSize;++t){const e=t*c[0],n=t*k.strides[0];for(let t=0;t<d.outHeight;++t){const s=n+t*k.strides[1],r=t*d.strideHeight-x;for(let t=0;t<f;++t){const n=r+t*g;if(n<0||n>=d.inHeight)continue;const a=t*h[0],i=e+n*c[1];for(let t=0;t<d.outWidth;++t){const e=s+t*k.strides[2],n=t*d.strideWidth-w;for(let t=0;t<m;++t){const s=n+t*y;if(s<0||s>=d.inWidth)continue;const r=a+t*h[1],o=i+s*d.inChannels;let l=e,u=r;for(let t=0;t<d.inChannels;++t){const e=N[o+t];for(let t=0;t<v;++t)C[l+t]+=e*I[u+t];l+=v,u+=v}}}}}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}const eS={kernelName:Se,backendName:"cpu",kernelFunc:tS};const nS={kernelName:Te,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r,dy:a}=e,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;$I([r,a],"depthwiseConv2dNativeBackpropFilter");const h=nl(r.shape,c,i,o,l,u,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new nr(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(r.dataId).values,v=new nr(r.shape,r.dtype,w),k=n.data.get(a.dataId).values,N=new nr(a.shape,a.dtype,k);for(let t=0;t<f;++t){const e=Math.max(0,Math.ceil((b-t)/p)),n=Math.min(h.outHeight,(h.inHeight+b-t)/p);for(let s=0;s<m;++s){const r=Math.max(0,Math.ceil((y-s)/d)),a=Math.min(h.outWidth,(h.inWidth+y-s)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),l=i%x;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=e;c<n;++c){const e=t+c*p-b;for(let t=r;t<a;++t){const n=s+t*d-y;u+=v.get(l,e,n,o)*N.get(l,c,t,i)}}g.set(u,t,s,o,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const sS={kernelName:Ee,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{dy:r,filter:a}=e,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;$I([r,a],"depthwiseConv2DNativeBackpropInput");const h=Et(r.shape),p=Et(a.shape),d=nl(c,a.shape,i,o,l,u,!0),f=new nr(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(r.dataId).values,[w,v,k]=h,N=n.data.get(a.dataId).values,[I,C,S]=p,{batchSize:T,filterHeight:E,filterWidth:$,inChannels:A,inHeight:R,inWidth:D,outChannels:F,outHeight:_,outWidth:O,strideHeight:M,strideWidth:L}=d,z=E-1-d.padInfo.top,B=$-1-d.padInfo.left,P=F/A;for(let t=0;t<T;++t)for(let e=0;e<A;++e)for(let n=0;n<R;++n){const s=n-z,r=Math.max(0,Math.ceil(s/M)),a=Math.min(_,(E+s)/M);for(let i=0;i<D;++i){const o=i-B,l=Math.max(0,Math.ceil(o/L)),u=Math.min(O,($+o)/L);let c=0;for(let n=r;n<a;++n){const r=n*M-s;for(let s=l;s<u;++s){const a=w*t+v*n+k*s,i=I*(E-1-r)+C*($-1-(s*L-o))+S*e;for(let t=0;t<P;++t){c+=x[a+(e*P+t)]*N[i+t]}}}m[g*t+y*n+b*i+e]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},rS={kernelName:Ae,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:s,filter:r}=t,{strides:a,pad:i,dilations:o}=n,l=e,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,p=r.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:N,dilationHeight:I,dilationWidth:C,outShape:S}=Qo(s.shape,r.shape,a,i,"NHWC",o),T=nt(S),E=S.length,$=mt(s.dtype,T);for(let t=0;t<d;++t)for(let e=0;e<y;++e){const n=e*w-x.top;for(let a=0;a<b;++a){const i=a*v-x.left;for(let o=0;o<g;++o){let l=Number.MIN_SAFE_INTEGER;for(let e=0;e<k;++e){const a=n+e*I;if(a>=0&&a<f)for(let n=0;n<N;++n){const d=i+n*C;if(d>=0&&d<m){const i=_t([t,a,d,o],c,Et(s.shape)),f=_t([e,n,o],p,Et(r.shape)),m=u[i]+h[f];m>l&&(l=m)}}}$[_t([t,e,a,o],E,Et(S))]=l}}}return{dataId:l.write(Js($,s.dtype),S,s.dtype),shape:S,dtype:s.dtype}}},aS={kernelName:De,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:s,filter:r,dy:a}=t,{strides:i,pad:o,dilations:l}=n,u=e,c=$t(s.shape,u.data.get(s.dataId).values),h=$t(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:N,dilationWidth:I,outShape:C}=Qo(s.shape,r.shape,i,o,"NHWC",l);Z(a.rank===C.length,()=>`Error in ${De}, dy must have the same rank as output ${C.length}, but got `+a.rank);const S=$t(C,u.data.get(a.dataId).values),T=Dt(r.shape,r.dtype);for(let t=0;t<p;++t)for(let e=0;e<g;++e){const n=e*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let e=0;e<v;++e){const s=n+e*N;if(s>=0&&s<d)for(let n=0;n<k;++n){const u=r+n*I;if(u>=0&&u<f){const r=c[t][s][u][a]+h[e][n][a];r>i&&(i=r,o=e,l=n)}}}T[o][l][a]+=S[t][e][s][a]}}}return{dataId:u.write(Js(T,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},iS={kernelName:Re,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:s,filter:r,dy:a}=t,{strides:i,pad:o,dilations:l}=n,u=e,c=$t(s.shape,u.data.get(s.dataId).values),h=$t(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:N,dilationWidth:I,outShape:C}=Qo(s.shape,r.shape,i,o,"NHWC",l);Z(a.rank===C.length,()=>`Error in ${Re}, dy must have the same rank as output ${C.length}, but got `+a.rank);const S=$t(C,u.data.get(a.dataId).values),T=Dt(s.shape,s.dtype);for(let t=0;t<p;++t)for(let e=0;e<g;++e){const n=e*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=r<0?0:r;for(let e=0;e<v;++e){const s=n+e*N;if(s>=0&&s<d)for(let n=0;n<k;++n){const u=r+n*I;if(u>=0&&u<f){const r=c[t][s][u][a]+h[e][n][a];r>i&&(i=r,o=s,l=u)}}}T[t][o][l][a]+=S[t][e][s][a]}}}return{dataId:u.write(Js(T,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},oS=VI((t,e)=>t/e),lS=sC(Fe,oS),uS={kernelName:Fe,backendName:"cpu",kernelFunc:lS},cS=jp,hS=qp,pS=Kp,dS=Xp,fS=Yp,mS=Jp,gS=MI(Me,t=>{const e=Math.sign(t),n=Math.abs(t),s=1/(1+cS*n);return e*(1-((((mS*s+fS)*s+dS)*s+pS)*s+hS)*s*Math.exp(-n*n))}),yS={kernelName:Me,backendName:"cpu",kernelFunc:gS},bS=FC(t=>Math.exp(t)),xS=LI(ze,bS),wS={kernelName:ze,backendName:"cpu",kernelFunc:xS},vS=FC(t=>Math.expm1(t)),kS=LI(Be,vS),NS={kernelName:Be,backendName:"cpu",kernelFunc:kS},IS=VI((t,e)=>t*e),CS=rC((t,e,n,s)=>({real:t*n-e*s,imag:t*s+e*n})),SS=sC(Sn,IS,CS),TS={kernelName:Sn,backendName:"cpu",kernelFunc:SS};function ES(t,e,n,s,r){const a=yi(s,e,n),i=nt(n),o=Et(s);if(a){const n=bi(e,o);return t.subarray(n,n+i)}const l=ft(r,i);for(let r=0;r<i;++r){const a=_t(Ot(r,n.length,Et(n)).map((t,n)=>t+e[n]),s.length,o);l[r]=t[a]}return l}function $S(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e,{begin:a,size:i}=s;$I(r,"slice");const[o,l]=xi(r,a,i);ai(r,o,l);const u=ES(n.data.get(r.dataId).values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const AS={kernelName:es,backendName:"cpu",kernelFunc:$S},RS=VI((t,e)=>t-e),DS=rC((t,e,n,s)=>({real:t-n,imag:e-s})),FS=sC(fs,RS,DS),_S={kernelName:fs,backendName:"cpu",kernelFunc:FS};function OS(t,e,n){const s=t.shape,r=s[0],a=s[1],i=n.data.get(t.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[r,a],c=nt(u),h=ft("float32",c),p=ft("float32",c);for(let t=0;t<r;t++){const s=$S({inputs:{x:o},backend:n,attrs:{begin:[t,0],size:[1,a]}}),r=$S({inputs:{x:l},backend:n,attrs:{begin:[t,0],size:[1,a]}}),i=JI({inputs:{real:s,imag:r},backend:n}),{real:u,imag:c}=MS(i,e,n),d=td(u,c);for(let e=0;e<a;e++){const n=rd(d,e);h[t*a+e]=n.real,p[t*a+e]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i)}const d=n.makeTensorInfo(u,"float32",h),f=n.makeTensorInfo(u,"float32",p),m=JI({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function MS(t,e,n){const s=nt(t.shape),r=n.data.get(t.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,i=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((o=s)&o-1)){const r=function t(e,n,s,r,a){if(1===s)return{real:e,imag:n};const i=td(e,n),o=s/2,l=nd(i),u=l.real,c=l.imag,h=[u.length],p=a.makeTensorInfo(h,"float32",u),d=a.makeTensorInfo(h,"float32",c),f=JI({inputs:{real:p,imag:d},backend:a}),m=sd(i),g=m.real,y=m.imag,b=[g.length],x=a.makeTensorInfo(b,"float32",g),w=a.makeTensorInfo(b,"float32",y),v=JI({inputs:{real:x,imag:w},backend:a}),k=t(u,c,o,r,a),N=k.real,I=k.imag,C=[N.length],S=a.makeTensorInfo(C,"float32",N),T=a.makeTensorInfo(C,"float32",I),E=JI({inputs:{real:S,imag:T},backend:a}),$=t(g,y,o,r,a),A=$.real,R=$.imag,D=[A.length],F=a.makeTensorInfo(D,"float32",A),_=a.makeTensorInfo(D,"float32",R),O=JI({inputs:{real:F,imag:_},backend:a}),M=id(s,r),L=[M.real.length],z=a.makeTensorInfo(L,"float32",M.real),B=a.makeTensorInfo(L,"float32",M.imag),P=JI({inputs:{real:z,imag:B},backend:a}),W=SS({inputs:{a:P,b:O},backend:a}),V=oC({inputs:{a:E,b:W},backend:a}),U=FS({inputs:{a:E,b:W},backend:a}),G=QI({inputs:{input:V},backend:a}),H=QI({inputs:{input:U},backend:a}),j=BC({inputs:{input:V},backend:a}),q=BC({inputs:{input:U},backend:a}),K=WC({inputs:[G,H],backend:a,attrs:{axis:0}}),X=WC({inputs:[j,q],backend:a,attrs:{axis:0}}),Y=a.data.get(K.dataId).values,J=a.data.get(X.dataId).values;return a.disposeIntermediateTensorInfo(p),a.disposeIntermediateTensorInfo(d),a.disposeIntermediateTensorInfo(f),a.disposeIntermediateTensorInfo(x),a.disposeIntermediateTensorInfo(w),a.disposeIntermediateTensorInfo(v),a.disposeIntermediateTensorInfo(S),a.disposeIntermediateTensorInfo(T),a.disposeIntermediateTensorInfo(E),a.disposeIntermediateTensorInfo(F),a.disposeIntermediateTensorInfo(_),a.disposeIntermediateTensorInfo(O),a.disposeIntermediateTensorInfo(z),a.disposeIntermediateTensorInfo(B),a.disposeIntermediateTensorInfo(P),a.disposeIntermediateTensorInfo(W),a.disposeIntermediateTensorInfo(V),a.disposeIntermediateTensorInfo(U),a.disposeIntermediateTensorInfo(G),a.disposeIntermediateTensorInfo(j),a.disposeIntermediateTensorInfo(H),a.disposeIntermediateTensorInfo(q),a.disposeIntermediateTensorInfo(K),a.disposeIntermediateTensorInfo(X),{real:Y,imag:J}}(a,i,s,e,n),o=[t.shape[0],t.shape[1]];if(e){const t=n.makeTensorInfo(o,"float32",r.real),e=n.makeTensorInfo(o,"float32",r.imag),a=n.makeTensorInfo([],"float32",Ys(s,"float32")),i=PI({inputs:{x:a},backend:n}),l=uS.kernelFunc({inputs:{a:t,b:a},backend:n}),u=uS.kernelFunc({inputs:{a:e,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return r}return ed(function(t,e,n){const s=new Float32Array(2*e);for(let r=0;r<e;r++){let a=0,i=0;for(let s=0;s<e;s++){const o=od(r*s,e,n),l=rd(t,s);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=e,i/=e),ad(s,a,i,r)}return s}(td(a,i),s,e));var o}const LS={kernelName:Pe,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:s}=e,r=nt(s.shape),a=s.shape[s.shape.length-1],i=uC({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=OS(i,!1,n),l=uC({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};const zS={kernelName:We,backendName:"cpu",kernelFunc:function(t){const{backend:e,attrs:n}=t,{shape:s,value:r,dtype:a}=n,i=a||Ct(r),o=mt(i,nt(s));return function(t,e,n){t.fill(e)}(o,r),e.makeTensorInfo(s,i,o)}};const BS={kernelName:Ve,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:s}=t,r=n,a=ft(s.dtype,nt(s.shape)),[i,o,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let t=0;t<i;t++){const e=t*l*o*u;for(let t=0;t<o;t++){const n=t*(l*u);for(let s=0;s<l;s++){const r=s*u;for(let o=0;o<u;o++){const h=[i,t,s,o][2],p=Math.round(l-h),d=e+n+r+o;let f=c[d];if(p>=0&&p<l){f=c[e+n+p*u+o]}a[d]=f}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},PS=FC(t=>Math.floor(t)),WS=LI(Ue,PS),VS={kernelName:Ue,backendName:"cpu",kernelFunc:WS};const US={kernelName:As,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r,filter:a,bias:i,preluActivationWeights:o}=e,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d}=s;let f=UC({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const t=f;f=oC({inputs:{a:f,b:i},backend:n}),n.disposeIntermediateTensorInfo(t)}if(d){const t=f;f=YI(n,f,d,o),n.disposeIntermediateTensorInfo(t)}return f}};const GS={kernelName:Rs,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r,filter:a,bias:i,preluActivationWeights:o}=e,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d}=s;let f=tS({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const t=f;f=oC({inputs:{a:f,b:i},backend:n}),n.disposeIntermediateTensorInfo(t)}if(d){const t=f;f=YI(n,f,d,o),n.disposeIntermediateTensorInfo(t)}return f}};const HS={kernelName:Je,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:s}=e,r=nt(s.shape),a=s.shape[s.shape.length-1],i=uC({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=OS(i,!0,n),l=uC({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},jS=MI(Qe,t=>Number.isFinite(t)?1:0,"bool"),qS={kernelName:Qe,backendName:"cpu",kernelFunc:jS},KS=MI(tn,t=>Math.abs(t)===1/0?1:0,"bool"),XS={kernelName:tn,backendName:"cpu",kernelFunc:KS},YS=MI(en,t=>Number.isNaN(t)?1:0,"bool"),JS={kernelName:en,backendName:"cpu",kernelFunc:YS},ZS=FC(t=>Math.log(t)),QS=LI(an,ZS),tT={kernelName:an,backendName:"cpu",kernelFunc:QS},eT=MI(on,t=>Math.log1p(t)),nT={kernelName:on,backendName:"cpu",kernelFunc:eT},sT=MI(un,t=>t?0:1,"bool"),rT={kernelName:un,backendName:"cpu",kernelFunc:sT};function aT(t,e,n,s){const r=ft(s,nt(n));for(let n=0;n<r.length;++n){const s=n*e;let a=t[s];for(let n=0;n<e;++n){const e=t[s+n];e>a&&(a=e)}r[n]=a}return r}function iT(t,e,n,s,r){const a=e.length,i=nt(e),o=Et(e),l=Et(r),u=ft(n,nt(r));for(let e=0;e<i;++e){const n=Ot(e,a,o),r=new Array(n.length);for(let t=0;t<r.length;t++)r[t]=n[s[t]];u[_t(r,a,l)]=t[e]}return u}const oT={kernelName:fn,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:s}=t,{reductionIndices:r,keepDims:a}=e,i=n;let o=s.shape;const l=o.length,u=pt(r,o);let c=u;const h=Wo(c,l);let p=i.data.get(s.dataId).values;if(null!=h){const t=new Array(l);for(let e=0;e<t.length;e++)t[e]=o[h[e]];p=iT(p,o,s.dtype,h,t),c=Uo(c.length,l),o=t}$I(s,"max"),Po("max",c,l);const[d,f]=zo(o,c),m=aT(p,nt(f),d,s.dtype),g=i.write(m,d,s.dtype);let y=d;if(a){y=Bo(d,u)}return{dataId:g,shape:y,dtype:s.dtype}}};const lT={kernelName:gn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e;$I(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Z(cl(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=tl(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&rt(u.inShape,u.outShape))c=PI({inputs:{x:r},backend:n});else{const t=n.data.get(r.dataId).values,e=Et(r.shape),s=EC(t,r.shape,r.dtype,e,u,"max");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}};const uT={kernelName:yn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{dy:r,input:a,output:i}=e,o=a;$I([a,i],"maxPoolBackprop");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=tl(o.shape,l,u,1,c,h),d=n.data.get(o.dataId).values,f=Ca(p.outShape,o.dtype,$C(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,v=w-1-p.padInfo.left,k=x-1-p.padInfo.top,N=Ca(o.shape,"float32"),I=n.data.get(r.dataId).values,C=Ca(r.shape,"float32",I);for(let t=0;t<p.batchSize;++t)for(let e=0;e<p.inChannels;++e)for(let n=0;n<p.inHeight;++n)for(let s=0;s<p.inWidth;++s){const r=n-k,a=s-v;let i=0;for(let n=0;n<x;n+=y){const s=(r+n)/m;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let r=0;r<w;r+=b){const o=(a+r)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const l=x*w-1-f.get(t,s,o,e)===n*w+r?1:0;if(0===l)continue;i+=C.get(t,s,o,e)*l}}N.set(i,t,n,s,e)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};const cT={kernelName:wn,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:s}=t,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=e,l=n;$I(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=tl(s.shape,r,a,[1,1],i),[h,p]=function(t,e,n,s,r){const a=EC(t,0,n,Et(e),r,"max"),i=$C(t,e,n,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,o,c),d=l.write(h,c.outShape,s.dtype),f=l.write(p,c.outShape,s.dtype);return[{dataId:d,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const hT={kernelName:In,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e,{paddings:a,mode:i}=s;$I(r,"mirrorPad");const o=a.map((t,e)=>t[0]+r.shape[e]+t[1]),l=a.map(t=>t[0]),u=a.map((t,e)=>t[0]+r.shape[e]),c="reflect"===i?0:1,h=n.data.get(r.dataId).values,p=r.shape.length,d=Et(r.shape),f=nt(o),m=o.length,g=Et(o),y=ft(r.dtype,f);for(let t=0;t<f;t++){let e=Ot(t,m,g);for(let t=0;t<m;t++)e[t]<l[t]?e[t]=2*l[t]-e[t]-c:e[t]>=u[t]&&(e[t]=2*(u[t]-1)-e[t]+c);e=e.map((t,e)=>t-l[e]);const n=_t(e,p,d);y[t]=h[n]}return{dataId:n.write(y,o,r.dtype),shape:o,dtype:r.dtype}}},pT=np,dT={kernelName:An,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:s,scores:r}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:l}=n,u=e;$I(s,"NonMaxSuppressionPadded");const c=u.data.get(s.dataId).values,h=u.data.get(r.dataId).values,{selectedIndices:p,validOutputs:d}=pT(c,h,a,i,o,l);return[p,d]}},fT=sp,mT={kernelName:Rn,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:s,scores:r}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=n,u=e;$I(s,"NonMaxSuppressionWithScore");const c=u.data.get(s.dataId).values,h=u.data.get(r.dataId).values,p=a,d=i,f=o,m=l,{selectedIndices:g,selectedScores:y}=fT(c,h,p,d,f,m);return[g,y]}},gT=VI((t,e)=>t!==e?1:0),yT=sC(En,gT,null,"bool"),bT={kernelName:En,backendName:"cpu",kernelFunc:yT};const xT={kernelName:_n,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e,{paddings:a,constantValue:i}=s;$I(r,"pad");const o=a.map((t,e)=>t[0]+r.shape[e]+t[1]),l=a.map(t=>t[0]),u=n.data.get(r.dataId).values,c=nt(r.shape),h=r.shape.length,p=Et(r.shape),d=nt(o),f=o.length,m=Et(o),g=ft(r.dtype,d);0!==i&&g.fill(i);for(let t=0;t<c;t++){g[_t(Ot(t,h,p).map((t,e)=>t+l[e]),f,m)]=u[t]}return{dataId:n.write(g,o,r.dtype),shape:o,dtype:r.dtype}}},wT=MI(Wn,t=>1/t),vT={kernelName:Wn,backendName:"cpu",kernelFunc:wT},kT={kernelName:Es,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:s}=t,{radians:r,fillValue:a,center:i}=e,o=n,l=ft(s.dtype,nt(s.shape)),[u,c,h,p]=s.shape,[d,f]=zp(i,c,h),m=Math.sin(r),g=Math.cos(r),y=o.data.get(s.dataId).values;for(let t=0;t<u;t++){const e=t*h*c*p;for(let t=0;t<c;t++){const n=t*(h*p);for(let s=0;s<h;s++){const r=s*p;for(let i=0;i<p;i++){const o=[u,t,s,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,v=(b-d)*m+(x-f)*g;w=Math.round(w+d),v=Math.round(v+f);let k=a;if("number"!=typeof a&&(k=3===i?255:a[i]),w>=0&&w<h&&v>=0&&v<c){k=y[e+v*(h*p)+w*p+i]}l[e+n+r+i]=k}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},NT=MI(Yn,t=>{const e=Math.floor(t);return t-e<.5?Math.floor(t):t-e>.5?Math.ceil(t):e%2==0?e:e+1}),IT={kernelName:Yn,backendName:"cpu",kernelFunc:NT},CT=FC(t=>1/Math.sqrt(t)),ST=LI(Jn,CT),TT={kernelName:Jn,backendName:"cpu",kernelFunc:ST},ET=Gp,$T=Hp,AT=MI(ts,t=>t>=0?$T*t:ET*(Math.exp(t)-1)),RT={kernelName:ts,backendName:"cpu",kernelFunc:AT},DT=MI(as,t=>1/(1+Math.exp(-t))),FT={kernelName:as,backendName:"cpu",kernelFunc:DT},_T=MI(rs,t=>t<0?-1:t>0?1:0),OT={kernelName:rs,backendName:"cpu",kernelFunc:_T},MT=MI(ns,t=>Math.sin(t)),LT={kernelName:ns,backendName:"cpu",kernelFunc:MT},zT=MI(ss,t=>Math.sinh(t)),BT={kernelName:ss,backendName:"cpu",kernelFunc:zT},PT=Math.log(1.1920928955078125e-7)+2,WT=MI(is,t=>{const e=t>-PT,n=t<PT,s=Math.exp(t);let r;return r=n?s:e?t:Math.log(1+s),r}),VT={kernelName:is,backendName:"cpu",kernelFunc:WT};function UT(t){const{inputs:e,attrs:n,backend:s}=t,{x:r}=e,{perm:a}=n;$I(r,"transpose");const i=r.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=r.shape[a[t]];const l=iT(s.data.get(r.dataId).values,r.shape,r.dtype,a,o);return{dataId:s.write(l,o,r.dtype),shape:o,dtype:r.dtype}}const GT={kernelName:vs,backendName:"cpu",kernelFunc:UT};const HT={kernelName:us,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e,{blockShape:a,paddings:i}=s;$I([r],"spaceToBatchND");const o=nt(a),l=[[0,0]];l.push(...i);for(let t=1+a.length;t<r.shape.length;++t)l.push([0,0]);const u=xT.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=Bp(u.shape,a,o,!1),h=Pp(c.length,a.length,!1),p=Wp(u.shape,a,o,!1),d=uC({inputs:{x:u},backend:n,attrs:{shape:c}}),f=UT({inputs:{x:d},backend:n,attrs:{perm:h}}),m=uC({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}},jT=MI(os,t=>Math.sqrt(t)),qT={kernelName:os,backendName:"cpu",kernelFunc:jT},KT={kernelName:ds,backendName:"cpu",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,s=e;$I(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let t=0;t<r.length;++t){const e=r[t];a[t]=e*e}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},XT=VI((t,e)=>{const n=t-e;return n*n}),YT=sC(ps,XT),JT={kernelName:ps,backendName:"cpu",kernelFunc:YT},ZT=MI(Ss,(t,e)=>{const n=e;return isNaN(t)?NaN:t>0?1:n.alpha}),QT={kernelName:Ss,backendName:"cpu",kernelFunc:ZT},tE=MI(ys,t=>Math.tan(t)),eE={kernelName:ys,backendName:"cpu",kernelFunc:tE},nE=MI(bs,t=>Math.tanh(t));function sE(t,e,n,s){const r=pt(e,n)[0],a=[1,n[0],1];for(let t=0;t<r;t++)a[0]*=n[t];a[1]=n[r];for(let t=r+1;t<n.length;t++)a[2]*=n[t];const i={},o=new Int32Array(n[r]),l=new nr(a,s,t),u=[],c=1===a[0]&&1===a[2];for(let e=0;e<n[r];e++){let n;if(c)n=t[e].toString();else{const t=[];for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)t.push(l.get(n,e,s));n=t.join(",")}if(void 0!==i[n])o[e]=i[n];else{const t=Object.keys(i).length;i[n]=t,o[e]=t,u.push(e)}}const h=a.slice();h[1]=Object.keys(i).length;const p=new nr(h,s);u.forEach((t,e)=>{for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)p.set(l.get(n,t,s),n,e,s)});const d=n.slice();return d[r]=h[1],{outputValues:p.values,outputShape:d,indices:o}}const rE=[dC,mC,yC,xC,lC,vC,NC,CC,TC,AC,RC,pC,DC,nC,MC,zC,ZI,VC,HC,jC,GC,KC,XC,qC,JC,QC,eS,nS,sS,rS,iS,aS,uS,BI,yS,wS,NS,LS,zS,BS,VS,US,GS,WI,HS,PC,qS,XS,JS,tT,nT,rT,lT,uT,cT,oT,hT,TS,dT,mT,bT,xT,HI,tC,vT,qI,XI,cC,kT,IT,TT,RT,FT,OT,LT,BT,AS,VT,HT,qT,KT,JT,QT,_S,eE,{kernelName:bs,backendName:"cpu",kernelFunc:nE},GT,{kernelName:ks,backendName:"cpu",kernelFunc:function(t){const{inputs:e,attrs:n,backend:s}=t,{axis:r}=n,{x:a}=e;$I(a,"unique");const i=s.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=sE(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}}];for(const t of rE)Ls(t);const aE={},iE={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function oE(t){if(!(t in aE)){const e=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);if(e.addEventListener("webglcontextlost",e=>{e.preventDefault(),delete aE[t]},!1),1===t)return e.getContext("webgl",iE)||e.getContext("experimental-webgl",iE);return e.getContext("webgl2",iE)}(t);if(null===e)return console.log("Could not get context for WebGL version",t),null;aE[t]=e}const e=aE[t];return e.isContextLost()?(delete aE[t],oE(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),aE[t])}var lE,uE,cE;function hE(t,e){return[e,t]}function pE(t){const e=nt(t);return ot(Math.ceil(e/4))}function dE(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function fE(t,e){const n=t;let s,r,a,i,o,l,u,c,h,p;return 2===zt().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT):(s=t.RGBA,r=t.RGBA,a=t.RGBA,i=n.RGBA,o=t.RGBA,u=4,c=4,h=null!=e?e.HALF_FLOAT_OES:null,p=t.FLOAT),l=t.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function mE(t,e){const n=e();return zt().getBool("DEBUG")&&function(t){const e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+function(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}(t,e))}(t),n}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(lE||(lE={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(uE||(uE={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(cE||(cE={}));function gE(t){return!!(zt().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function yE(t,e){return SE(t,()=>t.getExtension(e),'Extension "'+e+'" not supported on this browser.')}function bE(t,e){const n=SE(t,()=>t.createShader(t.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(mE(t,()=>t.shaderSource(n,e)),mE(t,()=>t.compileShader(n)),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw function(t,e){const n=xE.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);const s=+n[1],r=t.split("\n"),a=r.length.toString().length+2,i=r.map((t,e)=>ut((e+1).toString(),a)+t);let o=0;for(let t=0;t<i.length;t++)o=Math.max(i[t].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+ut(u[0],o),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(e,t.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const xE=/ERROR: [0-9]+:([0-9]+):/g;function wE(t,e){if(mE(t,()=>t.validateProgram(e)),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function vE(t,e,n,s,r,a,i){const o=t.getAttribLocation(e,n);return-1!==o&&(mE(t,()=>t.bindBuffer(t.ARRAY_BUFFER,s)),mE(t,()=>t.vertexAttribPointer(o,r,t.FLOAT,!1,a,i)),mE(t,()=>t.enableVertexAttribArray(o)),!0)}function kE(t,e,n,s){mE(t,()=>function(t,e,n){TE(t,n),mE(t,()=>t.activeTexture(t.TEXTURE0+n)),mE(t,()=>t.bindTexture(t.TEXTURE_2D,e))}(t,e,s)),mE(t,()=>t.uniform1i(n,s))}function NE(t,e,n){mE(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,n)),mE(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0))}function IE(t,e){mE(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,e)),mE(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0))}function CE(t){const e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}(t,e))}function SE(t,e,n){const s=mE(t,()=>e());if(null==s)throw new Error(n);return s}function TE(t,e){const n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=e+t.TEXTURE0;if(s<t.TEXTURE0||s>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function EE(t,e=2){return nt(t.slice(0,t.length-e))}function $E(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function AE(t){let e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[EE(t),...$E(t)]),e}function RE(t){return t%2==0}function DE(t,e){if(rt(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){const n=t.slice(-1)[0],s=e.slice(-1)[0];if(n===s)return!0;if(RE(n)&&RE(s)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&RE(t[0])&&RE(e[0])}let FE,_E;function OE(t,e){return null!=t.getExtension(e)}function ME(t){try{if(null!=oE(t))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function LE(t){if(0===t)return!1;const e=oE(t);if(1!==t){if(OE(e,"EXT_color_buffer_float"))return zE(e);const t="EXT_color_buffer_half_float";if(OE(e,t)){const n=e.getExtension(t);return function(t,e){const n=fE(t,e),s=t.createTexture();t.bindTexture(t.TEXTURE_2D,s);t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,s,0);const a=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(s),t.deleteFramebuffer(r),a}(e,n)}return!1}if(!OE(e,"OES_texture_float"))return!1;if(!OE(e,"WEBGL_color_buffer_float"))return!1;return zE(e)}function zE(t){const e=fE(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const s=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,s),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);const r=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(s),r}function BE(t,e){Array.isArray(t)||(t=[t]),t.forEach(t=>{null!=t&&Z("complex64"!==t.dtype,()=>e+" does not support complex64 tensors in the WebGL backend.")})}const PE=zt();PE.registerFlag("HAS_WEBGL",()=>PE.getNumber("WEBGL_VERSION")>0),PE.registerFlag("WEBGL_VERSION",()=>ME(2)?2:ME(1)?1:0),PE.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),PE.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===PE.get("WEBGL_VERSION")),PE.registerFlag("WEBGL_CPU_FORWARD",()=>!0),PE.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),PE.registerFlag("WEBGL_PACK",()=>PE.getBool("HAS_WEBGL")),PE.registerFlag("WEBGL_PACK_NORMALIZATION",()=>PE.getBool("WEBGL_PACK")),PE.registerFlag("WEBGL_PACK_CLIP",()=>PE.getBool("WEBGL_PACK")),PE.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>!1),PE.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>PE.getBool("WEBGL_PACK")),PE.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>PE.getBool("WEBGL_PACK")),PE.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>PE.getBool("WEBGL_PACK")),PE.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>PE.getBool("WEBGL_PACK")),PE.registerFlag("WEBGL_PACK_REDUCE",()=>PE.getBool("WEBGL_PACK")),PE.registerFlag("WEBGL_LAZILY_UNPACK",()=>PE.getBool("WEBGL_PACK")),PE.registerFlag("WEBGL_CONV_IM2COL",()=>PE.getBool("WEBGL_PACK")),PE.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(t){if(null==FE){const e=oE(t);FE=e.getParameter(e.MAX_TEXTURE_SIZE)}return FE}(PE.getNumber("WEBGL_VERSION"))),PE.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(t){if(null==_E){const e=oE(t);_E=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,_E)}(PE.getNumber("WEBGL_VERSION"))),PE.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const t=PE.getNumber("WEBGL_VERSION");return 0===t?0:function(t){if(0===t)return 0;let e;const n=oE(t);return e=OE(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:OE(n,"EXT_disjoint_timer_query")?1:0,e}(t)}),PE.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>PE.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Cr()),PE.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(t){if(0===t)return!1;const e=oE(t);if(1===t){if(!OE(e,"OES_texture_float"))return!1}else if(!OE(e,"EXT_color_buffer_float"))return!1;return zE(e)}(PE.getNumber("WEBGL_VERSION"))),PE.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!PE.getBool("WEBGL_FORCE_F16_TEXTURES")&&PE.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),PE.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>LE(PE.getNumber("WEBGL_VERSION"))),PE.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(t=PE.getNumber("WEBGL_VERSION"))&&null!=oE(t).fenceSync;var t}),PE.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>PE.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),PE.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,t=>{if(t<0&&-1!==t)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${t}.`)});const{simpleAbsImpl:WE,addImpl:VE,ceilImpl:UE,expImpl:GE,expm1Impl:HE,floorImpl:jE,logImpl:qE,maxImpl:KE,multiplyImpl:XE,rsqrtImpl:YE,sliceImpl:JE,subImpl:ZE,transposeImpl:QE,uniqueImpl:t$}=V;class e${constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`float v${t} = get${t}AtOutCoords();`)});const s=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class n${constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`vec4 v${t} = get${t}AtOutCoords();`)});const s=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}class s${constructor(t,e,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=t;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const i="max"===e?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function r$(t,e){return["x","y","z","w","u","v"].slice(0,e).map(e=>`${t}.${e}`)}function a$(t,e){return 1===e?[t]:r$(t,e)}function i$(){let t,e,n,s,r,a,i,o,l,u;return 2===zt().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",s="in",r="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function o$(t,e,n="index"){const s=Et(e);return s.map((e,r)=>`${`int ${t[r]} = ${n} / ${e}`}; ${r===s.length-1?`int ${t[r+1]} = ${n} - ${t[r]} * ${e}`:`index -= ${t[r]} * ${e}`};`).join("")}function l$(t){const e=Et(t).map(t=>t.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;\n  }\n`}const u$="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:c$}=g;function h$(t,e,n,s){const r=[];t.forEach(t=>{const e=nt(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?r.push(`uniform float ${t.name}${e>1?`[${e}]`:""};`):(r.push(`uniform sampler2D ${t.name};`),r.push(`uniform int offset${t.name};`))});const a=r.join("\n"),i=t.map(t=>function(t,e,n=!1){let s="";s+=n?d$(t):p$(t);const r=t.shapeInfo.logicalShape,a=e.logicalShape;r.length<=a.length&&(s+=n?function(t,e){const n=t.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=t.shapeInfo.logicalShape.length,i=e.logicalShape.length,o=c$(t.shapeInfo.logicalShape,e.logicalShape),l=v$(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map(t=>`coords.${h[t+u]} = 0;`).join("\n");let p="";p=i<2&&a>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+h[e+u]).join(", ");let d="return outputValue;";const f=1===nt(t.shapeInfo.logicalShape),m=1===nt(e.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const t=a-2,e=a-1;o.indexOf(t)>-1&&o.indexOf(e)>-1?d="return vec4(outputValue.x);":o.indexOf(t)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(e)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${p});\n      ${d}\n    }\n  `}(t,e):function(t,e){const n=t.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.texShape,i=t.shapeInfo.texShape,o=t.shapeInfo.logicalShape.length,l=e.logicalShape.length;if(!t.shapeInfo.isUniform&&o===l&&null==t.shapeInfo.flatOffset&&rt(i,a))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=v$(l),c=c$(t.shapeInfo.logicalShape,e.logicalShape),h=l-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map(t=>`coords.${d[t+h]} = 0;`).join("\n");let f="";f=l<2&&o>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+d[e+h]).join(", ");return`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${s}(${f});\n    }\n  `}(t,e));return s}(t,e,s)).join("\n"),o=e.texShape,l=i$(),u=function(t){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${t.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let c,h,p=function(t){return`${t.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${t.varyingFs} vec2 resultUV;\n    ${t.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${t.defineSpecialNaN}\n    ${t.defineSpecialInf}\n    ${t.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${f$}\n    ${m$}\n    ${g$}\n  `}(l);e.isPacked?(c=function(t,e){switch(t.length){case 0:return b$();case 1:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,e);case 2:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(rt(t,e))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const s=Math.ceil(t[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],s=Math.ceil(t[2]/2),r=s*Math.ceil(t[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(t,e);default:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],s=Math.ceil(t[t.length-1]/2),r=s*Math.ceil(t[t.length-2]/2);let a=r,i="",o="b, r, c";for(let e=2;e<t.length-1;e++)a*=t[t.length-e-1],i=`\n      int b${e} = index / ${a};\n      index -= b${e} * ${a};\n    `+i,o=`b${e}, `+o;return`\n    ivec${t.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${t.length}(${o});\n    }\n  `}(t,e)}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(vec4 val) {\n      ${t.output} = val;\n    }\n  `}(l)):(c=function(t,e){switch(t.length){case 0:return b$();case 1:return function(t,e){if(1===e[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${e[1]}.0);\n      }\n    `;if(1===e[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${e[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      return resTexRC.x * ${e[1]} + resTexRC.y;\n    }\n  `}(0,e);case 2:return function(t,e){if(rt(t,e))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\n      }\n    `;if(1===t[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===t[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      int r = index / ${t[1]};\n      int c = index - r * ${t[1]};\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=o$(["r","c","d"],t);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(t,e);case 4:return function(t,e){const n=o$(["r","c","d","d2"],t);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(t,e);case 5:return function(t,e){const n=o$(["r","c","d","d2","d3"],t);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},\n                             ${e[1]}));\n\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(t,e);case 6:return function(t,e){const n=o$(["r","c","d","d2","d3","d4"],t);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(float val) {\n      ${t.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),s&&(p+=y$);return[p,u,h,a,c,i,n].join("\n")}function p$(t){const e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`float ${n}() {return ${e};}`;const[s,r]=t.shapeInfo.texShape;if(1===s&&1===r)return`\n      float ${n}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const[a,i]=t.shapeInfo.texShape,o=x$(e);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${o});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${w$(t)}\n      }\n    `;const s=t.shapeInfo.texShape,r=s[0],a=s[1];if(1===a&&1===r)return`\n      float ${n}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=x$(e);if(1===a)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${r}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(1===r)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${r}, ${a}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t.shapeInfo.texShape;if(null!=r&&rt(e,r)){const t=r[0],e=r[1];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${e}.0, ${t}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=dt(e),o=a;if(o.length<e.length){const e=k$(t,o),n=["row","col"];return`\n      ${p$(e)}\n      float ${s}(int row, int col) {\n        return ${s}(${N$(n,i)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${w$(t)}\n      }\n    `;const l=r[0],u=r[1],c=x$(n);if(1===u)return`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===l)return`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e[1]*e[2],a=e[2],{newShape:i,keptDims:o}=dt(e),l=i;if(l.length<e.length){const e=k$(t,l),n=["row","col","depth"];return`\n        ${p$(e)}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${N$(n,o)});\n        }\n      `}if(t.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${r}, ${a}, 1)));\n        ${w$(t)}\n      }\n    `;const u=t.shapeInfo.texShape,c=u[0],h=u[1],p=t.shapeInfo.flatOffset;if(h===r&&null==p)return`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==p)return`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const d=x$(n);return`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r} + col * ${a} + depth + ${d};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(t);case 4:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e[3],a=e[2]*r,i=e[1]*a,{newShape:o,keptDims:l}=dt(e);if(o.length<e.length){const e=k$(t,o),n=["row","col","depth","depth2"];return`\n      ${p$(e)}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${N$(n,l)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${r}, 1)));\n        ${w$(t)}\n      }\n    `;const u=t.shapeInfo.flatOffset,c=t.shapeInfo.texShape,h=c[0],p=c[1];if(p===i&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===r&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const d=x$(n);return`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${r} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${p}, index + ${d});\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 5:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e[4],a=e[3]*r,i=e[2]*a,o=e[1]*i,{newShape:l,keptDims:u}=dt(e);if(l.length<e.length){const e=k$(t,l),n=["row","col","depth","depth2","depth3"];return`\n      ${p$(e)}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${N$(n,u)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${r})) +\n          depth3;\n        ${w$(t)}\n      }\n    `;const c=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]},\n               ${e[2]*e[3]}, ${e[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=x$(n);return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 6:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=dt(e);if(r.length<e.length){const e=k$(t,r),n=["row","col","depth","depth2","depth3","depth4"];return`\n      ${p$(e)}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${N$(n,a)});\n      }\n    `}const i=e[5],o=e[4]*i,l=e[3]*o,u=e[2]*l,c=e[1]*u;if(t.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${w$(t)}\n      }\n    `;const h=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]*e[4]},\n               ${e[2]*e[3]*e[4]},\n               ${e[3]*e[4]},\n               ${e[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=x$(n);return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);default:throw new Error(e.length+"-D input sampling is not yet supported")}}function d$(t){switch(t.shapeInfo.logicalShape.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),s=i$();return`\n    vec4 ${n}() {\n      return ${s.texture2D}(${e}, halfCR);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),s=t.shapeInfo.texShape,r=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],a=i$();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${r[0]}, ${r[1]}, index);\n      return ${a.texture2D}(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t.shapeInfo.texShape,a=r[0],i=r[1],o=i$();if(null!=r&&rt(e,r))return`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],u=Math.ceil(e[1]/2);return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${u}, ${l[0]}, ${l[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t.shapeInfo.texShape,a=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===e[0]){const n=e.slice(1),r=[1,2],a=k$(t,n),i=["b","row","col"];return`\n        ${d$(a)}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${N$(i,r)});\n        }\n      `}const i=a[0],o=a[1],l=Math.ceil(e[2]/2),u=l*Math.ceil(e[1]/2),c=i$();return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${u}, ${l}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(t);default:return function(t){const e=t.shapeInfo.logicalShape,n=e.length,s=t.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=t.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],l=i[1],u=Math.ceil(e[n-1]/2);let c=u*Math.ceil(e[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let t=2;t<n-1;t++)h=`int b${t}, `+h,c*=e[n-t-1],p=`b${t} * ${c} + `+p;const d=i$();return`\n    vec4 ${r}(${h}) {\n      int index = ${p};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${o});\n      return ${d.texture2D}(${s}, uv);\n    }\n  `}(t)}}const f$="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",m$="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",g$="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",y$="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function b$(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function x$(t){return"offset"+t}function w$(t){const e=t.name,n=nt(t.shapeInfo.logicalShape);return n<2?`return ${e};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${e}[i];\n      }\n    }\n  `}function v$(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function k$(t,e){const n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function N$(t,e){return e.map(e=>t[e]).join(", ")}class I${constructor(t,e,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,Z(t.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const r=t[t.length-1],a=Math.ceil(r/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=v$(o),u=a$("coords",o);let c,h;if(1===a){h=o+1;const t=v$(h);c=`\n        ${t} sourceLocR = ${t}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${t} sourceLocG = ${t}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${t} sourceLocA = ${t}(${u.join()}, 0);\n        --${u[o-1]};\n        ${t} sourceLocB = ${t}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map(t=>"int "+t),m=a$("sourceLocR",h-1).concat("inIdx.r"),g=a$("sourceLocG",h-1).concat("inIdx.g"),y=a$("sourceLocB",h-1).concat("inIdx.b"),b=a$("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,k=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class C${constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,s=t.strideHeight,r=t.strideWidth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterHeight,l=t.effectiveFilterWidth,u=o-1-t.padInfo.top,c=l-1-t.padInfo.left,h=1/(e*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class S${constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,s=t.filterWidth,r=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterDepth,h=t.effectiveFilterHeight,p=t.effectiveFilterWidth,d=c-1-t.padInfo.front,f=h-1-t.padInfo.top,m=p-1-t.padInfo.left,g=1/(e*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const T$="return (a < 0.) ? b * a : a;";class E${constructor(t,e,n){this.variableNames=["A","B"],this.outputShape=To(e,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const $$="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class A${constructor(t,e,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=To(e,n);const r=this.outputShape.length;let a="";if(s)if(0===r||1===nt(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${v$(r)} coords = getOutputCoords();\n        `,1===r)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const t=a$("coords",r);a+=`\n            bool nextRowOutOfBounds =\n              (${t[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${t[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}class R${constructor(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(t,e){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class D${constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(t,e){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class F${constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class _${constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,s=t.padInfo.top,r=t.padInfo.left,a="channelsLast"===t.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${s};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class O${constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,s=t.strideHeight,r=t.strideWidth,a="channelsLast"===t.dataFormat,i=e-1-t.padInfo.top,o=n-1-t.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class M${constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideDepth,n=t.strideHeight,s=t.strideWidth,r=t.padInfo.front,a=t.padInfo.top,i=t.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${e} - ${r};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class L${constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,s=t.filterWidth,r=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=e-1-t.padInfo.front,l=n-1-t.padInfo.top,u=s-1-t.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class z${constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,s=t.padInfo.top,r=t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${s};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class B${constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,s=t.strideHeight,r=t.strideWidth,a=e-1-t.padInfo.top,i=n-1-t.padInfo.left,o=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class P${constructor(t,e=!1,n=null,s=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const r=t.padInfo.top,a=t.padInfo.left,i=t.strideHeight,o=t.strideWidth,l=t.dilationHeight,u=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,p=4*Math.floor(t.inChannels/4),d=t.inChannels%4,f="channelsLast"===t.dataFormat,m=f?1:2,g=f?2:3,y=f?3:1;let b="",x="";n&&(b=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,x="result = activation(result);");const w=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${r}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${y}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${g}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${u};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${f}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===d}) {\n\n              if (${f}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===d}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===d}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${x}\n        setOutput(result);\n      }\n    `}}class W${constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,n=t.padInfo.top,s=t.padInfo.left,r=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.filterDepth,h=t.filterHeight,p=t.filterWidth,d=4*Math.floor(t.inChannels/4),f=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${e}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class V${constructor(t,e=!1,n=null,s=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const r=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,p=t.filterHeight,d=t.filterWidth,f=t.outChannels/t.inChannels;let m="",g="";n&&(m=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,g="result = activation(result);");const y=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${f};\n        int q = d2 - d1 * ${f};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${r}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${a}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${y}\n        ${g}\n        setOutput(result);\n      }\n    `}}class U${constructor(t,e=!1,n=null,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;const r=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,p=t.filterHeight,d=t.filterWidth,f=d;let m="int xR; int xC; int xCOffset;";for(let t=0;t<p;t++)for(let e=0;e<d;e++)m+=`\n          vec4 xTexelR${t}C${2*e} = vec4(0.);\n          vec4 wR${t}C${e} = vec4(0.);\n          vec4 xR${t}C${e} = vec4(0.);`;for(let t=0;t<p;t++)for(let e=0;e<f;e++){const n=2*e;if(m+=`\n          xR = xRCorner + ${t*c};\n          xC = xCCorner + ${n*h};\n        `,1===u){if(n<d&&(m+=o%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${r} && xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    xTexelR${t}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${r} && xCOffset >= 0 && xCOffset < ${a}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${t}C${n} = vec4(previous.zw, xTexelR${t}C${n}.xy);\n                } else {\n                  xR${t}C${n} = vec4(0, 0, xTexelR${t}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${r} && xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xR${t}C${n} = xTexelR${t}C${n};\n              `,n+1<d)){const e=o%2==0?K(h):h;h%2==0&&o%2==1||h%2!=0&&o%2!=1?(m+=`\n                  xCOffset = xC + ${o%2} + ${e};\n\n                  if(xR >= 0 && xR < ${r} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,h>1&&(m+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${r} &&\n                      xCOffset >= 0 && xCOffset < ${a}) {\n                      xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${t}C${n} = vec4(0.);\n                    }\n                  `),m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.xy);\n                `):m+=`\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${r} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${t}C${n+1} = xTexelR${t}C${n+2};\n                `}}else n<d&&(m+=`\n              if(xR >= 0 && xR < ${r}) {\n            `,o%2==1?(m+=`\n                xCOffset = xC + 1 - ${u};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n              `,n+1<d&&(m+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${u};\n                  if(xCOffset >= 0 && xCOffset < ${a}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${t}C${n+1} = vec4(xTexelR${t}C${n+2}.xy, final.xy);\n                `)):(m+=`\n                if(xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${u};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.xy, xTexelR${t}C${n+2}.xy);\n              `,n+1<d&&(m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n                `)),m+="}");n<d&&(m+=`\n            vec4 wTexelR${t}C${n} = getW(${t}, ${n}, d1, q);\n            wR${t}C${n} = vec4(wTexelR${t}C${n}.xz, wTexelR${t}C${n}.xz);\n          `,n+1<d&&(m+=`\n              vec4 wTexelR${t}C${n+1} = getW(${t}, ${n+1}, d1, q);\n              wR${t}C${n+1} =\n                vec4(wTexelR${t}C${n+1}.xz, wTexelR${t}C${n+1}.xz);`))}for(let t=0;t<p;t++)for(let e=0;e<d;e++)m+=`dotProd += xR${t}C${e} * wR${t}C${e};`;let g="",y="";n&&(g=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,y="result = activation(result);");const b=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${m}\n\n        vec4 result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class G${constructor(t,e,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=t,[u]=e,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+d],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class H${constructor(t,e,n){this.variableNames=["x"],this.outputShape=t;const s=t.length,r=e?"0.0":`getX(${j$(s,"coords")})`,a=t[t.length-1];let i="",o="";e?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?"end + pow2 < "+a:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${v$(s)} coords = getOutputCoords();\n        int end = ${q$(s,"coords")};\n        float val = ${r};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${q$(s,"coords")} = idx;\n          val += getX(${j$(s,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.index&&(this.index=e.getUniformLocation(n,"index")),e.gl.uniform1f(this.index,t)}}}function j$(t,e){if(1===t)return""+e;if(2===t)return`${e}.x, ${e}.y`;if(3===t)return`${e}.x, ${e}.y, ${e}.z`;if(4===t)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}function q$(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error(`Cumulative sum for rank ${t} is not yet supported`)}class K${constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=lE.DENSE;const e=pE(t),n=i$();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${o$(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class X${constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=lE.DENSE;const e=pE(t),n=i$();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${o$(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class Y${constructor(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class J${constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class Z${constructor(t){this.variableNames=["A"],this.outTexUsage=uE.DOWNLOAD;const e=i$();this.outputShape=t,this.userCode=`\n      ${u$}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class Q${constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=uE.DOWNLOAD;const e=i$();this.outputShape=t,this.userCode=`\n      ${u$}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}class tA{constructor(t,e,n=!1){this.variableNames=["A"];const s=i$(),[r,a]=e;this.outputShape=t;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${l$(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n        vec4 values = ${s.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${s.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class eA{constructor(t,e,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const s=i$(),[r,a]=e;this.outputShape=t;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let e=0;e<=1;e++)for(let n=0;n<=1;n++){const o=2*e+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${t[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${e} < ${t[1]}) {\n              localCoords[1] += ${e};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n              values = ${s.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${l$(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${s.output} = ${o};\n      }\n    `}}class nA{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(t){return(e,n)=>{null==this.valueLoc&&(this.valueLoc=e.getUniformLocationNoThrow(n,"value")),e.gl.uniform1f(this.valueLoc,t)}}}class sA{constructor(t,e,n){this.variableNames=["A","indices"];const s=t.slice();s[n]=e,this.outputShape=s,this.rank=s.length;const r=v$(this.rank),a=function(t,e){const n=t.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const s=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let n=0;n<t.length;n++)n===e?r.push(`int(getIndices(${s[n]}))`):r.push(""+s[n]);return r.join()}(t,n);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}class rA{constructor(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;const s=v$(e.length),r=v$(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${s} strides = ${s}(${this.strides});\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function aA(t){const e=i$();return function(t,e){const n=SE(t,()=>t.createShader(t.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(mE(t,()=>t.shaderSource(n,e)),mE(t,()=>t.compileShader(n)),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(t,`${e.version}\n    precision highp float;\n    ${e.attribute} vec3 clipSpacePos;\n    ${e.attribute} vec2 uv;\n    ${e.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function iA(t){return function(t,e){const n=SE(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return mE(t,()=>t.bindBuffer(t.ARRAY_BUFFER,n)),mE(t,()=>t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)),n}(t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function oA(t){return function(t,e){const n=SE(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return mE(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n)),mE(t,()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.STATIC_DRAW)),n}(t,new Uint16Array([0,1,2,2,1,3]))}function lA(t,e,n,s,r,a){!function(t,e){const n=zt().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0){throw new Error("Requested texture size "+`[${t}x${e}]`+" is invalid.")}if(t>n||e>n){throw new Error("Requested texture size "+`[${t}x${e}]`+" greater than WebGL maximum on this browser / GPU "+`[${n}x${n}]`+".")}}(e,n);const i=function(t){return SE(t,()=>t.createTexture(),"Unable to create WebGLTexture.")}(t),o=t.TEXTURE_2D;return mE(t,()=>t.bindTexture(o,i)),mE(t,()=>t.texParameteri(o,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)),mE(t,()=>t.texParameteri(o,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)),mE(t,()=>t.texParameteri(o,t.TEXTURE_MIN_FILTER,t.NEAREST)),mE(t,()=>t.texParameteri(o,t.TEXTURE_MAG_FILTER,t.NEAREST)),mE(t,()=>t.texImage2D(o,0,s,e,n,0,r,a,null)),mE(t,()=>t.bindTexture(t.TEXTURE_2D,null)),i}function uA(t){return t.internalFormatFloat}function cA(t){return t.internalFormatHalfFloat}function hA(t){return t.downloadTextureFormat}function pA(t){return t.internalFormatPackedFloat}function dA(t){return t.internalFormatPackedHalfFloat}function fA(t,e,n,s,r,a,i,o){const l=t,u=new Float32Array(function(t,e){const[n,s]=dE(t,e);return n*s*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,e),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class mA{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=zt().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function(t,e){aE[t]=e}(e,t)):this.gl=oE(e);let n="WEBGL_color_buffer_float";if(1===zt().getNumber("WEBGL_VERSION")){const t="OES_texture_float",e="OES_texture_half_float";if(this.textureFloatExtension=yE(this.gl,t),OE(this.gl,e))this.textureHalfFloatExtension=yE(this.gl,e);else if(zt().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),OE(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=yE(this.gl,"EXT_color_buffer_half_float");else if(zt().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",OE(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!OE(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=iA(this.gl),this.indexBuffer=oA(this.gl),this.framebuffer=function(t){return SE(t,()=>t.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=fE(this.gl,this.textureHalfFloatExtension)}get debug(){return zt().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;mE(t,()=>t.finish()),mE(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),mE(t,()=>t.deleteFramebuffer(this.framebuffer)),mE(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),mE(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),mE(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,s){const[r,a]=hE(e,n);return lA(t,r,a,uA(s),s.textureFormatFloat,t.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,s){const[r,a]=hE(e,n);return lA(t,r,a,cA(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,s){const[r,a]=hE(e,n);return lA(t,r,a,hA(s),t.RGBA,t.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function(t,e,n){mE(t,()=>t.bindTexture(t.TEXTURE_2D,e)),n.data instanceof Uint8Array?mE(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n.width,n.height,0,t.RGBA,t.UNSIGNED_BYTE,n.data)):mE(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n)),mE(t,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,n,s){this.throwIfDisposed(),function(t,e,n,s,r,a){let i,o,l;mE(t,()=>t.bindTexture(t.TEXTURE_2D,e)),r instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=t.UNSIGNED_BYTE,l=t.RGBA):(i=new Float32Array(n*s*4),o=t.FLOAT,l=a.internalFormatPackedFloat),i.set(r),mE(t,()=>t.texImage2D(t.TEXTURE_2D,0,l,n,s,0,t.RGBA,o,i)),mE(t,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,t,e,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,s){const[r,a]=dE(e,n);return lA(t,r,a,dA(s),t.RGBA,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,s){const[r,a]=dE(e,n);return lA(t,r,a,pA(s),t.RGBA,t.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(IE(this.gl,this.framebuffer),this.outputTexture=null),mE(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n,s){const[r,a]=hE(e,n),i=new Uint8Array(e*n*4);return mE(t,()=>t.readPixels(0,0,r,a,s.downloadTextureFormat,t.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,e,n,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,n,s,r,a){return fA(this.gl,t,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return function(t,e,n){const s=t,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,e),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,t,e)}createBufferFromTexture(t,e,n){this.bindTextureToFrameBuffer(t);const s=function(t,e,n,s){const r=t.createBuffer();mE(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,r));const a=16*e*n;return mE(t,()=>t.bufferData(t.PIXEL_PACK_BUFFER,a,t.STREAM_READ)),mE(t,()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,0)),mE(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null)),r}(this.gl,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,n;if(zt().getBool("WEBGL_FENCE_API_ENABLED")){const s=t,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=()=>{const t=s.clientWaitSync(r,0,0);return t===s.ALREADY_SIGNALED||t===s.CONDITION_SATISFIED},e=r}else zt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(e,zt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:e,isFencePassed:n}}downloadMatrixFromPackedTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n){const s=new Float32Array(e*n*4);return mE(t,()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,s)),s}(this.gl,e,n))}createProgram(t){this.throwIfDisposed();const e=this.gl,n=bE(e,t),s=aA(e),r=function(t){return SE(t,()=>t.createProgram(),"Unable to create WebGLProgram.")}(e);return mE(e,()=>e.attachShader(r,s)),mE(e,()=>e.attachShader(r,n)),function(t,e){if(mE(t,()=>t.linkProgram(e)),!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}(e,r),this.debug&&wE(e,r),this.vertexAttrsAreBound||(this.setProgram(r),this.vertexAttrsAreBound=function(t,e,n){return mE(t,()=>t.bindBuffer(t.ARRAY_BUFFER,n)),vE(t,e,"clipSpacePos",n,3,20,0)&&vE(t,e,"uv",n,2,20,12)}(e,this.program,this.vertexBuffer)),r}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&mE(this.gl,()=>this.gl.deleteProgram(t))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&wE(this.gl,this.program),mE(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,n=!0){return this.throwIfDisposed(),n?function(t,e,n){return SE(t,()=>t.getUniformLocation(e,n),'uniform "'+n+'" not present in program.')}(this.gl,t,e):function(t,e,n){return t.getUniformLocation(e,n)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),mE(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),kE(this.gl,t,e,n)}setOutputMatrixTexture(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)}setOutputPackedMatrixTexture(t,e,n){this.throwIfDisposed();const[s,r]=dE(e,n);this.setOutputMatrixTextureDriver(t,s,r)}setOutputMatrixWriteRegion(t,e,n,s){this.setOutputMatrixWriteRegionDriver(n,t,s,e)}setOutputPackedMatrixWriteRegion(t,e,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&wE(this.gl,this.program),CE(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),mE(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),mE(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=yE(this.gl,2===zt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===zt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===zt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2();return void t.endQuery(e.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await ct(()=>this.disposed||this.isQueryAvailable(t,zt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(t,zt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(0===e)return null;if(2===e){const e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}{const e=this.getQueryTimerExtensionWebGL1();return e.getQueryObjectEXT(t,e.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const e=this.getQueryTimerExtensionWebGL1(),n=e.getQueryObjectEXT(t,e.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(e.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function(t){let e=0;for(;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map(t=>t.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||ct(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),NE(this.gl,t,this.framebuffer),this.debug&&CE(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(NE(this.gl,this.outputTexture,this.framebuffer),this.debug&&CE(this.gl)):IE(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const n=e();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(t,e,n){this.throwIfDisposed();const s=this.gl;NE(s,t,this.framebuffer),this.debug&&CE(s),this.outputTexture=t,mE(s,()=>s.viewport(0,0,e,n)),mE(s,()=>s.scissor(0,0,e,n))}setOutputMatrixWriteRegionDriver(t,e,n,s){this.throwIfDisposed(),mE(this.gl,()=>this.gl.scissor(t,e,n,s))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function gA(t,e){if(t.length!==e.length)throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`);t.forEach((t,n)=>{const s=t.logicalShape,r=e[n],a=r.shape;if(!rt(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(t.isUniform&&r.isUniform)return;const i=t.texShape,o=r.isUniform?null:r.texData.texShape;if(!rt(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)})}class yA{constructor(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const{filterWidth:s,inChannels:r,strideWidth:a,strideHeight:i,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=r*s,m=i$(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let s=0;s<=1;s++)x+=`\n          blockIndex = rc.y + ${s};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${t[1]} && pos < ${t[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${e[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${r}.));\n\n              if(d1 < ${e[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${r}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+s}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+s}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}class bA{constructor(t,e,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=e,i=t[3]-1;let o;this.outputShape=t;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class xA{constructor(t,e,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class wA{constructor(t,e,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=e,i=t[3]-1;let o;this.outputShape=t;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}class vA{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideHeight,n=t.strideWidth,s=t.dilationHeight,r=t.effectiveFilterHeight,a=t.effectiveFilterWidth,i=r-1-t.padInfo.top,o=a-1-t.padInfo.left,l=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${e}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class kA{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideDepth,n=t.strideHeight,s=t.strideWidth,r=t.dilationDepth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterDepth,l=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=o-1-t.padInfo.front,h=l-1-t.padInfo.top,p=u-1-t.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${e}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class NA{constructor(t,e,n,s=!1,r=!1,a=!1,i=null,o=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const l=s?t[1]:t[2],u=Math.ceil(l/2),c=s?"i * 2, rc.y":"rc.y, i * 2",h=r?"rc.z, i * 2":"i * 2, rc.z",p=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let f="",m="";i&&(f=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,m="result = activation(result);");const g=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights");let y="rc.x",b="rc.x";t[0]<e[0]?y=`int(min(float(rc.x), ${t[0]-1}.))`:e[0]<t[0]&&(b=`int(min(float(rc.x), ${e[0]-1}.))`),this.userCode=`\n      ${f}\n\n      const float sharedDimension = ${u}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${u}; i++) {\n          int batchA = ${y};\n          int batchB = ${b};\n          vec4 a = getMatrixA(batchA, ${c});\n          vec4 b = getMatrixB(batchB, ${h});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${p[0]} * ${d[0]});\n          result += (${p[1]} * ${d[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${g}\n\n        ${m}\n\n        setOutput(result);\n      }\n    `}}class IA{constructor(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.seedLoc&&(this.seedLoc=e.getUniformLocation(n,"seed")),e.gl.uniform1f(this.seedLoc,t)}}}class CA{constructor(t,e,n,s){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class SA{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=a$("rc",e),s=v$(e),r=function(t,e,n){if(1===t)return"rc > "+e[0];let s="";for(let r=t-2;r<t;r++)s+=`${n[r]} >= ${e[r]}`,r<t-1&&(s+="||");return s}(e,t,n),a=function(t,e,n,s){if(1===t)return"";const r=s.slice(-2);return`\n    int r = ${r[0]};\n    int c = ${r[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${e};\n    bool rEdge = rp1 >= ${n};\n  `}(e,t[t.length-1],t[t.length-2],n),i=function(t,e){const n=t.length,s=function(t,e){const n=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let a=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let n=2;n<t;n++)a=e[e.length-1-n]+","+a;n.push(a)}return n}(n,e);if(1===n)return`getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${s[0]}),\n          cEdge ? 0. : getA(${s[1]}),\n          rEdge ? 0. : getA(${s[2]}),\n          rEdge || cEdge ? 0. : getA(${s[3]})`}(t,n);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class TA{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const s=t.length,r=v$(s),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class EA{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const s=t.length,r=v$(s),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=a$("rc",s),l=a$("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[r+" rc = outputLoc;",`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let t=0,e=1===s?2:4;t<e;t++)d+=`\n        ${h[t]}\n        if (${p}) {\n          result[${t}] = float(${n});\n        } else {\n          ${r} source = rc - start;\n          result[${t}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}class $A{constructor(t,e,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideHeight,o=t.strideWidth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.top,d=t.padInfo.left;this.outputShape=t.outShape;const f="avg"===e,m=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,g=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${e} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class AA{constructor(t,e,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideDepth,o=t.strideHeight,l=t.strideWidth,u=t.dilationDepth,c=t.dilationHeight,h=t.dilationWidth,p=t.effectiveFilterDepth,d=t.effectiveFilterHeight,f=t.effectiveFilterWidth,m=t.padInfo.front,g=t.padInfo.top,y=t.padInfo.left;this.outputShape=t.outShape;const b="avg"===e;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${e} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / count");const v=4*Math.floor(a/4),k=a%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}class RA{constructor(t,e){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=t;this.outputShape=[s,a];let i="0.0",o="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",o="min"):"max"===e&&(i="-1.0 / 1e-20",o="max");let l=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?l="sumValue":"prod"===e?l="prodValue":"all"===e?l="allValue":"any"===e&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===e?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===e&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}class DA{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;let n="";for(let t=0;t<4;t++){let e="thisRC = rc;";t%2==1&&(e+="thisRC.z += 1;"),t>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${t>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${t}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${t>0?"}":""}\n      `}var s;this.userCode=`\n      ${s=e,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${o$(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${l$(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${t[1]};\n        int cols = ${t[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class FA{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,s,r]=e.shape,[,a,i]=t.shape,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class _A{constructor(t,e,n,s){this.variableNames=["A"],this.outputShape=[];const[r,a,i,o]=t;this.outputShape=[r,e,n,o];const l=[s&&e>1?a-1:a,s&&n>1?i-1:i],u=[s&&e>1?e-1:e,s&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class OA{constructor(t,e,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,a,i,o]=t;this.outputShape=[r,e,n,o];const l=[s&&e>1?a-1:a,s&&n>1?i-1:i],u=[s&&e>1?e-1:e,s&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]},\n          ${l[1]/u[1]});\n      const vec3 inputShapeRC = vec3(${a}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${o-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class MA{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,s,r]=e.shape,[,a,i]=t.shape,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class LA{constructor(t,e,n,s){this.variableNames=["A"],this.outputShape=[];const[r,a,i,o]=t;this.outputShape=[r,e,n,o];const l=[s&&e>1?a-1:a,s&&n>1?i-1:i],u=[s&&e>1?e-1:e,s&&n>1?n-1:n],c=s?"0.5":"0.0";this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${c})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class zA{constructor(t,e){this.variableNames=["x"];const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=t,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const s=t.map((n,s)=>(n=>-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - coords[${n}] - 1`:`coords[${n}]`)(s)).join(","),r=v$(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class BA{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=t;const s=a$("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=v$(n);function o(n){const s=t.map((s,r)=>function(n,s){return-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - ${s[n]} - 1`:""+s[n]}(r,n));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(t){return o(t)}(s.slice())};\n          if(${r}){\n            result.g = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",o(t)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(t){return t[n-2]="("+t[n-2]+" + 1)",o(t)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",o(t)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class PA{constructor(t,e,n,s,r,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=v$(r.length),l=v$(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=e>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${r});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class WA{constructor(t,e){this.variableNames=["x","segmentIds"];const n=t.windowSize,s=t.batchSize,r=t.inSize,a=t.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class VA{constructor(t,e,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<e.length;s++)i.push(""+n[s]),s<t&&a.push(""+n[s]);s=a.join(),r=i.join()}const a=v$(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}class UA{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=v$(this.rank),n=`uniform int start[${this.rank}];`,s=function(t){if(1===t)return"sourceLoc";if(t<=6)return GA.slice(0,t).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${t} is not yet supported`)}(this.rank);let r;r=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((t,e)=>`sourceLoc.${GA[e]} = start[${e}] + coords.${GA[e]};`).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}const GA=["x","y","z","w","u","v"];class HA{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;const e=v$(this.rank),n=a$("coords",this.rank),s=a$("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((t,e)=>`start[${e}]`).join()});`:t.map((t,e)=>`${s[e]} = ${n[e]} + start[${e}];`).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}class jA{constructor(t,e,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=v$(n.length),a=v$(n.length);let i="";if(1===s)i="coords * strides + begin";else{let t=0;i=n.map((e,s)=>(t++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${t-1}] * strides[${s}] + begin[${s}]`)).join(",")}this.userCode=`\n      ${r} begin = ${r}(${t});\n      ${r} strides = ${r}(${e});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}class qA{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,n){const s=XA(e,n),r=YA(t,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=KA(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const t=this.freeTextures[r].shift();return this.usedTextures[r].push(t),t}let i;return s===cE.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):s===cE.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):s===cE.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):s===cE.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):s===cE.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(t,e,n,s){if(null==this.freeTextures)return;const r=XA(n,s),a=YA(e,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const i=KA(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=zt().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(t),this._numBytesAllocated-=i):(this.freeTextures[a].push(t),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l.indexOf(t);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);const e=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});for(const t in this.usedTextures)this.usedTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function KA(t,e,n,s,r){const a=function(t,e){switch(t){case cE.PACKED_2X2_FLOAT32:return pA(e);case cE.PACKED_2X2_FLOAT16:return dA(e);case cE.UNPACKED_FLOAT32:return uA(e);case cE.UNPACKED_FLOAT16:return cA(e);case cE.PACKED_4X1_UNSIGNED_BYTE:return hA(e);default:throw new Error("Unknown physical texture type "+t)}}(e,s);let i;if(r){const[e,n]=dE(t[0],t[1]);i=e*n}else{const[e,n]=hE(t[0],t[1]);i=e*n}return i*function(t,e){const n=t;if(e===n.R32F)return 4;if(e===n.R16F)return 2;if(e===n.RGBA32F)return 16;if(e===t.RGBA)return 16;if(e===n.RGBA16F)return 8;throw new Error("Unknown internal format "+e)}(n,a)}function XA(t,e){if(t===uE.UPLOAD)return cE.PACKED_2X2_FLOAT32;if(t===uE.RENDER||null==t)return function(t){return zt().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?cE.PACKED_2X2_FLOAT32:cE.UNPACKED_FLOAT32:t?cE.PACKED_2X2_FLOAT16:cE.UNPACKED_FLOAT16}(e);if(t===uE.DOWNLOAD||t===uE.PIXELS)return cE.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function YA(t,e,n){return`${t[0]}_${t[1]}_${e}_${n}`}class JA{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let s=0;s<n.length;s++)n[s]=t[s]*e[s];this.outputShape=n,this.rank=n.length;const s=v$(this.rank),r=function(t){const e=t.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`imod(resRC, ${t[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let e=0;e<t.length;e++)s.push(`imod(${n[e]}, ${t[e]})`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}class ZA{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const QA="return abs(x);",tR="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",eR="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",nR=`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Gp};\n  float scale = ${Hp};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;const sR="return -x;",rR="return ceil(x);",aR="return floor(x);",iR="return exp(x);",oR="return exp(x) - 1.0;",lR=`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${jp};\n  float a1 = ${qp};\n  float a2 = ${Kp};\n  float a3 = ${Xp};\n  float a4 = ${Yp};\n  float a5 = ${Jp};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`,uR="return x;",cR="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",hR="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",pR="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class dR{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class fR{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,n=a$("rc",e),s=v$(e),r=function(t,e){if(1===t)return"rc";let n="";for(let s=0;s<t;s++)n+=e[s],s<t-1&&(n+=",");return n}(e,n),a=n.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const{segment_util:mR}=g,gR=hd,yR=pd,bR=dd,xR=oh,wR={};function vR(t,e=!1){if("linear"===t)return"return x;";if("relu"===t)return e?cR:tR;if("elu"===t)return e?pR:"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===t)return e?hR:eR;if("prelu"===t)return e?$$:T$;throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`)}class kR extends G{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!zt().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const t=oE(zt().getNumber("WEBGL_VERSION"));this.binaryCache=((e=zt().getNumber("WEBGL_VERSION"))in wR||(wR[e]={}),wR[e]),this.gpgpu=new mA(t),this.canvas=t.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var e;this.textureManager=new qA(this.gpgpu),this.numMBBeforeWarning=null==zt().global.screen?1024:zt().global.screen.height*zt().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new U(this,Bi())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(t,e,n){if((zt().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||zt().getBool("DEBUG"))&&this.checkNumericalProblems(t),"complex64"===n&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={};return this.texData.set(s,{shape:e,dtype:n,values:t,usage:uE.UPLOAD,refCount:1,complexParentRefCount:0}),s}incRef(t){this.texData.get(t).refCount++}decRef(t){if(this.texData.has(t)){this.texData.get(t).refCount--}}move(t,e,n,s){if(zt().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:n,dtype:s,values:e,usage:uE.UPLOAD,refCount:1,complexParentRefCount:0})}disposeIntermediateTensorInfo(t){const e=t.dataId;if(this.texData.has(e)){const t=this.texData.get(e);t.refCount--,t.refCount<1&&this.disposeData(e)}}readSync(t){const e=this.texData.get(t),{values:n,dtype:s,complexTensorInfos:r,slice:a,shape:i,isPacked:o}=e;if(null!=a){let e;e=o?new dR(i,uR):new ZA(i,uR);const n=this.runWebGLProgram(e,[{dataId:t,shape:i,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=Zs()),"complex64"===s){c=td(this.readSync(r.real.dataId),this.readSync(r.imag.dataId))}else c=this.getValuesFromTexture(t);return l&&(this.downloadWaitMs+=Zs()-u),this.convertAndCacheOnCPU(t,c)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise(t=>e.push(t))}const e=this.texData.get(t),{values:n,shape:s,slice:r,dtype:a,complexTensorInfos:i,isPacked:o}=e;if(null!=r){let e;e=o?new dR(s,uR):new ZA(s,uR);const n=this.runWebGLProgram(e,[{dataId:t,shape:s,dtype:a}],a),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(t);if(!zt().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===zt().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&zt().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(t);const e=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(e.texture,...pE(s))}if(this.pendingRead.set(t,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const t=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);u=td(t[0],t[1])}else if(null==c)u=this.getValuesFromTexture(t);else{const t=nt(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,t)}null!=l&&this.disposeIntermediateTensorInfo(l);const h=this.convertAndCacheOnCPU(t,u),p=this.pendingRead.get(t);return this.pendingRead.delete(t),p.forEach(t=>t(h)),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),h}checkNumericalProblems(t){if(null!=t)for(let e=0;e<t.length;e++){const n=t[e];if(!gE(n)){if(zt().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(t){const{shape:e,dtype:n,isPacked:s}=this.texData.get(t),r=nt(e);if(zt().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(t),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture,...pE(e)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const a=zt().getBool("WEBGL_PACK")&&!0===s,i=a?AE(e):e,o=a?new Q$(i):new Z$(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:t}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),c}async time(t){const e=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,t();const r=et(this.activeTimers.map(t=>t.query)).filter(t=>null!=t),a=et(this.activeTimers.map(t=>t.name)).filter(t=>null!=t);this.activeTimers=e,s&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(zt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const t=await Promise.all(r);i.kernelMs=X(t),i.getExtraProfileInfo=()=>t.map((t,e)=>({name:a[e],ms:t})).map(t=>`${t.name}: ${t.ms}`).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return zt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Zs(),endMs:null}}endTimer(t){return zt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=Zs(),t)}async getQueryTime(t){if(zt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);const e=t;return e.endMs-e.startMs}disposeData(t){if(this.pendingDisposal.has(t))return;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(!this.texData.has(t))return;if(this.texData.get(t).complexParentRefCount>0)return void this.texData.get(t).refCount--;this.releaseGPUData(t);const{complexTensorInfos:e}=this.texData.get(t);null!=e&&(this.texData.get(e.real.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(e.real),this.texData.get(e.imag.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(e.imag)),this.texData.delete(t)}releaseGPUData(t){const{texture:e,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(t),o=i&&i.origDataId||t,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=e&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(e,s,r,a)));const u=this.texData.get(t);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture}getDataInfo(t){return this.texData.get(t)}getCPUBackend(){return zt().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Bi().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(t,e=128){const n=this.getCPUBackend();return this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&t.every(t=>null==this.texData.get(t.dataId).texture&&nt(t.shape)<e)}getGPGPUContext(){return this.gpgpu}slice(t,e,n){if(this.shouldExecuteOnCPU([t])){const s=JE(this.texData.get(t.dataId).values,e,n,t.shape,t.dtype);return this.makeOutput(n,t.dtype,s)}if(0===nt(n))return Mr([],n,t.dtype);const{isPacked:s}=this.texData.get(t.dataId),r=yi(t.shape,e,n);if(s||!r){const s=zt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new HA(n):new UA(n),r=s.getCustomSetupFunc(e);return this.compileAndRun(s,[t],null,r)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)}shallowSlice(t,e,n){const s=this.texData.get(t.dataId),r=this.makeOutput(n,t.dtype),a=this.texData.get(r.dataId);Object.assign(a,s),a.shape=n,a.dtype=t.dtype;let i=bi(e,t.strides);s.slice&&(i+=s.slice.flatOffset),a.slice={flatOffset:i,origDataId:s.slice&&s.slice.origDataId||t.dataId};const o=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,o+1),r}stridedSlice(t,e,n,s){const r=this.tryRunOnCpuOrThrow([t],()=>this.cpuBackend.stridedSlice(t,e,n,s));if(r)return r;const a=oi(e,n,s);if(a.some(t=>0===t))return Mr([],a);const i=new jA(e,s,a);return this.compileAndRun(i,[t])}reverse(t,e){const n=zt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new BA(t.shape,e):new zA(t.shape,e);return this.compileAndRun(n,[t])}neg(t){const e=this.tryRunOnCpuOrThrow([t],()=>this.cpuBackend.neg(t));if(e)return e;if(zt().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,sR,t.dtype);const n=new ZA(t.shape,sR);return this.compileAndRun(n,[t])}batchMatMul(t,e,n,s){const r=n?t.shape[2]:t.shape[1],a=s?e.shape[1]:e.shape[2],i=n?t.shape[1]:t.shape[2],o=Math.max(t.shape[0],e.shape[0]);if((1===r||1===a)&&i>1e3){n&&(t=Xa(t,[0,2,1])),s&&(e=Xa(e,[0,2,1]));const r=1===a?t:t.as3D(o,i,1),l=1===a?2:1,u=1===a?e.as3D(o,1,i):e;return ro(r,u).sum(l,!0)}const l=fr(t.dtype,e.dtype),u=new NA(t.shape,e.shape,[o,r,a],n,s);return this.compileAndRun(u,[t,e],l)}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:s,bias:r,activation:a,preluActivationWeights:i}){const o=n?t.shape[2]:t.shape[1],l=s?e.shape[1]:e.shape[2],u=Math.max(t.shape[0],e.shape[0]),c=fr(t.dtype,e.dtype),h=null!=r,p=null!=i,d=a?vR(a,!0):null,f=new NA(t.shape,e.shape,[u,o,l],n,s,h,d,p),m=[t,e];return r&&m.push(r),i&&m.push(i),this.compileAndRun(f,m,c)}localResponseNormalization4D(t,e,n,s,r){const a=zt().getBool("WEBGL_PACK_NORMALIZATION")?new wA(t.shape,e,n,s,r):new bA(t.shape,e,n,s,r);return this.compileAndRun(a,[t])}LRNGrad(t,e,n,s,r,a,i){const o=new xA(e.shape,s,r,a,i);return this.compileAndRun(o,[e,n,t])}tile(t,e){if("string"===t.dtype){const n=this.readSync(t.dataId).map(t=>er(t)),s=Ca(t.shape,t.dtype,n);return yR(s,e)}const n=new JA(t.shape,e);return this.compileAndRun(n,[t])}pad(t,e,n){const s=zt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new EA(t.shape,e,n):new TA(t.shape,e,n);return this.compileAndRun(s,[t])}gather(t,e,n){const s=this.tryRunOnCpuOrThrow([t,e],()=>this.cpuBackend.gather(t,e,n));if(s)return s;const r=new sA(t.shape,e.size,n);return this.compileAndRun(r,[t,e])}batchToSpaceND(t,e,n){Z(t.rank<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const s=e.reduce((t,e)=>t*e),r=Bp(t.shape,e,s),a=Pp(r.length,e.length),i=Wp(t.shape,e,s),o=Vp(n,e.length),l=Up(i,n,e.length);return Xa(t.reshape(r),a).reshape(i).slice(o,l)}spaceToBatchND(t,e,n){Z(t.rank<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const s=e.reduce((t,e)=>t*e),r=[[0,0]];r.push(...n);for(let n=1+e.length;n<t.shape.length;++n)r.push([0,0]);const a=t.pad(r),i=Bp(a.shape,e,s,!1),o=Pp(i.length,e.length,!1),l=Wp(a.shape,e,s,!1),u=Xa(a.reshape(i),o);return ja(u,l)}reduce(t,e,n){const s=t.shape[0],r=t.shape[1],a=ou(r),i=Math.ceil(r/a),o=new RA({windowSize:a,inSize:r,batchSize:s,outSize:i},e),l=this.compileAndRun(o,[t],n);return 1===l.shape[1]?l:this.reduce(l,e,n)}argReduce(t,e,n=null){let s=t.shape[0],r=t.shape[1];null!=n&&(s=n.shape[0],r=n.shape[1]);const a=ou(r),i={windowSize:a,inSize:r,batchSize:s,outSize:Math.ceil(r/a)},o=new s$(i,e,null==n),l=[t];null!=n&&l.push(n);const u=this.compileAndRun(o,l,"int32");return 1===u.shape[1]?u:this.argReduce(t,e,u)}argReducePacked(t,e,n=null){const s=null!=n?n.shape:t.shape,r=ou(s[s.length-1]),a=new I$(s,r,e,null==n),i=null==n?[t]:[t,n],o=this.compileAndRun(a,i,"int32");return o.rank===t.rank?this.argReducePacked(t,e,o):o}sum(t,e){Po("sum",e,t.rank);const[n,s]=zo(t.shape,e),r=nt(s),a=t.as2D(-1,r),i=mr(t.dtype);return this.reduce(a,"sum",i).reshape(n)}prod(t,e){const n=this.tryRunOnCpuOrThrow([t],()=>this.cpuBackend.prod(t,e));if(n)return n;const[s,r]=zo(t.shape,e),a=nt(r),i=t.as2D(-1,a),o=mr(t.dtype);return this.reduce(i,"prod",o).reshape(s)}unsortedSegmentSum(t,e,n){let s=0;const r=Wo([s],t.rank);let a=t;null!=r&&(a=Xa(t,r),s=Uo(1,t.rank)[0]);const i=mR.computeOutShape(a.shape,s,n),o=nt([a.shape[s]]),l=a.as2D(-1,o),u=mr(t.dtype);let c=this.segOpCompute(l,"unsortedSegmentSum",e,u,n).reshape(i);return null!=r&&(c=Xa(c,Vo(r))),c}segOpCompute(t,e,n,s,r){const a=t.shape[0],i=t.shape[1],o=mR.segOpComputeOptimalWindowSize(i,r),l=new WA({windowSize:o,inSize:i,batchSize:a,numSegments:r},e),u=this.compileAndRun(l,[t,n],s);return u.shape[1]===r?u:(n=yc(0,r).tile([i/o]),this.segOpCompute(u,e,n,s,r))}argMinMaxReduce(t,e,n){const s=[e];if(Po("arg"+n.charAt(0).toUpperCase()+n.slice(1),s,t.rank),!zt().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){const[e,r]=zo(t.shape,s),a=nt(r),i=t.as2D(-1,a);return this.argReduce(i,n).reshape(e)}return this.argReducePacked(t,n)}argMin(t,e){return this.argMinMaxReduce(t,e,"min")}argMax(t,e){return this.argMinMaxReduce(t,e,"max")}cumsum(t,e,n,s){if(e!==t.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${t.rank-1} but got axis=`+e);const r=t.shape[e];let a=t;for(let e=0;e<=Math.ceil(Math.log2(r))-1;e++){const n=new H$(t.shape,!1,s),r=n.getCustomSetupFunc(e),i=a;a=this.compileAndRun(n,[a],a.dtype,r),i.dispose()}if(n){const e=new H$(t.shape,n,s),r=a;a=this.compileAndRun(e,[a]),r.dispose()}return a}equal(t,e){if(zt().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");const n=new E$("return float(a == b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}less(t,e){const n=this.tryRunOnCpuOrThrow([t,e],()=>this.cpuBackend.less(t,e));if(n)return n;if(zt().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");const s=new E$("return float(a < b);",t.shape,e.shape);return this.compileAndRun(s,[t,e],"bool")}lessEqual(t,e){if(zt().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");const n=new E$("return float(a <= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}greater(t,e){const n=this.tryRunOnCpuOrThrow([t,e],()=>this.cpuBackend.greater(t,e));if(n)return n;if(zt().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");const s=new E$("return float(a > b);",t.shape,e.shape);return this.compileAndRun(s,[t,e],"bool")}greaterEqual(t,e){if(zt().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const n=new E$("return float(a >= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalNot(t){const e=new ZA(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])}logicalAnd(t,e){if(zt().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const n=new E$("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalOr(t,e){if(zt().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const n=new E$("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}select(t,e,n){const s=new VA(t.rank,e.shape,e.rank);return this.compileAndRun(s,[t,e,n],fr(e.dtype,n.dtype))}where(t){Zp("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const e=t.dataSync();return xR(t.shape,e)}topk(t,e,n){const s=t.dataSync();return bR(s,t.shape,t.dtype,e,n)}min(t,e){Po("min",e,t.rank);const[n,s]=zo(t.shape,e),r=nt(s),a=t.as2D(-1,r);return this.reduce(a,"min",a.dtype).reshape(n)}minimum(t,e){const n=this.tryRunOnCpuOrThrow([t,e],()=>this.cpuBackend.minimum(t,e));if(n)return n;const s=zt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new A$("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new E$("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(s,[t,e])}mod(t,e){const n=zt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new A$("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new E$("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}maximum(t,e){const n=this.tryRunOnCpuOrThrow([t,e],()=>this.cpuBackend.maximum(t,e));if(n)return n;const s=zt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new A$("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new E$("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(s,[t,e])}all(t,e){Po("all",e,t.rank);const[n,s]=zo(t.shape,e),r=nt(s),a=t.as2D(-1,r);return this.reduce(a,"all",a.dtype).reshape(n)}any(t,e){Po("any",e,t.rank);const[n,s]=zo(t.shape,e),r=nt(s),a=t.as2D(-1,r);return this.reduce(a,"any",a.dtype).reshape(n)}floorDiv(t,e){if(zt().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");const n=new E$("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape);return this.compileAndRun(n,[t,e],"int32")}packedUnaryOp(t,e,n){const s=new dR(t.shape,e);return this.compileAndRun(s,[t],n)}packedBinaryOp(t,e,n,s,r=!1){const a=new A$(n,t.shape,e.shape,r);return this.compileAndRun(a,[t,e],s)}makeComplexComponentTensorInfo(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}}addN(t){if(1===t.length)return t[0];if(t.length>zt().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),s=this.addN(t.slice(e));return this.addN([n,s])}const e=t.map(t=>t.dtype).reduce((t,e)=>fr(t,e)),n=t.map(t=>t.shape),s=zt().getBool("WEBGL_PACK")?new n$(t[0].shape,n):new e$(t[0].shape,n);return this.compileAndRun(s,t,e)}pow(t,e){const n=zt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new A$("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new E$("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),s=fr(t.dtype,e.dtype);return this.compileAndRun(n,[t,e],s)}ceil(t){if(this.shouldExecuteOnCPU([t])){const e=UE(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(zt().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,rR,t.dtype);const e=new ZA(t.shape,rR);return this.compileAndRun(e,[t])}floor(t){if(this.shouldExecuteOnCPU([t])){const e=jE(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(zt().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,aR,t.dtype);const e=new ZA(t.shape,aR);return this.compileAndRun(e,[t])}sign(t){const e=new ZA(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])}isNaN(t){const e=new ZA(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")}isInf(t){const e=new ZA(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")}isFinite(t){const e=new ZA(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")}round(t){const e=new ZA(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])}exp(t){if(this.shouldExecuteOnCPU([t])){const e=GE(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(zt().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,iR,t.dtype);const e=new ZA(t.shape,iR);return this.compileAndRun(e,[t])}expm1(t){if(this.shouldExecuteOnCPU([t])){const e=HE(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(zt().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,oR,t.dtype);const e=new ZA(t.shape,oR);return this.compileAndRun(e,[t])}softmax(t,e){const n=pt([e],t.shape),s=Eu(t,n),r=Bo(s.shape,n),a=ko(t,s.reshape(r)),i=this.exp(a),o=this.sum(i,n).reshape(r);return so(i,o)}log(t){if(this.shouldExecuteOnCPU([t])){const e=qE(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(zt().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);const e=new ZA(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])}log1p(t){const e=new ZA(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])}sqrt(t){const e=new ZA(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])}rsqrt(t){if(this.shouldExecuteOnCPU([t])){const e=YE(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}const e=new ZA(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])}reciprocal(t){const e=new ZA(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])}relu(t){let e;return e=zt().getBool("WEBGL_PACK")?new dR(t.shape,cR):new ZA(t.shape,tR),this.compileAndRun(e,[t])}relu6(t){let e;return e=zt().getBool("WEBGL_PACK")?new dR(t.shape,hR):new ZA(t.shape,eR),this.compileAndRun(e,[t])}prelu(t,e){const n=zt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new A$($$,t.shape,e.shape):new E$(T$,t.shape,e.shape);return this.compileAndRun(n,[t,e])}elu(t){if(zt().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,pR,t.dtype);const e=new ZA(t.shape,"return (x >= 0.0) ? x : (exp(x) - 1.0);");return this.compileAndRun(e,[t])}eluDer(t,e){const n=zt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new A$("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new E$("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}selu(t){const e=new ZA(t.shape,nR);return this.compileAndRun(e,[t])}clip(t,e,n){let s;s=zt().getBool("WEBGL_PACK_CLIP")?new D$(t.shape):new R$(t.shape);const r=s.getCustomSetupFunc(e,n);return this.compileAndRun(s,[t],null,r)}abs(t){if(this.shouldExecuteOnCPU([t])&&"complex64"!==t.dtype){const e=WE(this.texData.get(t.dataId).values);return this.makeOutput(t.shape,t.dtype,e)}if(zt().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,QA,t.dtype);const e=new ZA(t.shape,QA);return this.compileAndRun(e,[t])}complexAbs(t){const e=this.texData.get(t.dataId),n=new F$(t.shape),s=[this.makeComplexComponentTensorInfo(t,e.complexTensorInfos.real),this.makeComplexComponentTensorInfo(t,e.complexTensorInfos.imag)];return this.compileAndRun(n,s)}sigmoid(t){const e=new ZA(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])}softplus(t){const e=new ZA(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])}asin(t){const e=new ZA(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(e,[t])}acos(t){const e=new ZA(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(e,[t])}atan(t){const e=new ZA(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])}sinh(t){const e=new ZA(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}cosh(t){const e=new ZA(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}tanh(t){const e=new ZA(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])}asinh(t){const e=new ZA(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])}acosh(t){const e=new ZA(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])}atanh(t){const e=new ZA(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])}erf(t){const e=new ZA(t.shape,lR);return this.compileAndRun(e,[t])}step(t,e){const n=new ZA(t.shape,function(t=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t});\n  `}(e));return this.compileAndRun(n,[t])}conv2dByMatMul(t,e,n,s,r,a){const i=t.shape,o=this.texData.get(t.dataId),l=n.inChannels,u=i[0]*i[1]*i[2],c=n.outChannels,h="channelsLast"===n.dataFormat,p=(1===u||1===c)&&l>1e3,d=i[2]%2!=0&&!!o.isPacked;if(p||!zt().getBool("WEBGL_LAZILY_UNPACK")||!zt().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!d){const o=h?i[0]*i[1]*i[2]:i[0]*i[2]*i[3],l=ja(t,[1,o,n.inChannels]),u=ja(e,[1,n.inChannels,n.outChannels]),c=this.fusedBatchMatMul({a:l,b:u,transposeA:!1,transposeB:!1,bias:s,activation:r,preluActivationWeights:a});return ja(c,n.outShape)}const f=h?i[0]*i[1]*(i[2]+1):i[0]*i[2]*(i[3]+1),m={dataId:t.dataId,shape:[1,f,n.inChannels],dtype:t.dtype},g=o.shape;o.shape=o.shape.slice(),o.shape[o.shape.length-2]++,Z(DE(o.shape,m.shape),()=>`packed reshape ${o.shape} to ${m.shape} isn't free`);const y=ja(e,[1,n.inChannels,n.outChannels]),b=this.fusedBatchMatMul({a:m,b:y,transposeA:!1,transposeB:!1,bias:s,activation:r,preluActivationWeights:a}),x=this.texData.get(b.dataId);return Z(x.isPacked,()=>"batchMatMul result is expected to be packed"),o.shape=g,x.shape=n.outShape,Bi().makeTensorFromDataId(b.dataId,n.outShape,b.dtype)}conv2dWithIm2Row(t,e,n,s,r,a){const{filterWidth:i,filterHeight:o,inChannels:l,outWidth:u,outHeight:c,dataFormat:h}=n,p="channelsLast"===h,d=i*o*l,f=c*u,m=[d,f],g=t.squeeze([0]),y=e.reshape([1,d,-1]),b=new yA(m,g.shape,n),x=this.compileAndRun(b,[g]).reshape([1,m[0],m[1]]),w=null!=s,v=null!=a,k=r?vR(r,!0):null,N=new NA(x.shape,y.shape,[1,f,n.outChannels],!0,!1,w,k,v),I=[x,y];s&&I.push(s),v&&I.push(a);const C=this.compileAndRun(N,I);return p?C.reshape([1,c,u,n.outChannels]):C.reshape([1,n.outChannels,c,u])}fusedConv2d({input:t,filter:e,convInfo:n,bias:s,activation:r,preluActivationWeights:a}){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n,s,r,a);if(zt().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n,s,r,a);const i=null!=s,o=null!=a,l=r?vR(r,!1):null,u=new P$(n,i,l,o),c=[t,e];return s&&c.push(s),a&&c.push(a),this.compileAndRun(u,c)}conv2d(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(zt().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);const s=new P$(n);return this.compileAndRun(s,[t,e])}conv2dDerInput(t,e,n){const s=new O$(n);return this.compileAndRun(s,[t,e])}conv2dDerFilter(t,e,n){const s=new _$(n);return this.compileAndRun(s,[t,e])}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:s,activation:r,preluActivationWeights:a}){const i=zt().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1,o=r?vR(r,i):null,l=[t,e],u=null!=s,c=null!=a;let h;return u&&l.push(s),c&&l.push(a),i?(h=new U$(n,u,o,c),this.compileAndRun(h,l)):(h=new V$(n,u,o,c),this.compileAndRun(h,l))}depthwiseConv2D(t,e,n){let s;return zt().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(s=new U$(n),this.compileAndRun(s,[t,e])):(s=new V$(n),this.compileAndRun(s,[t,e]))}depthwiseConv2DDerInput(t,e,n){const s=new B$(n);return this.compileAndRun(s,[t,e])}depthwiseConv2DDerFilter(t,e,n){const s=new z$(n);return this.compileAndRun(s,[t,e])}conv3d(t,e,n){const s=new W$(n);return this.compileAndRun(s,[t,e])}conv3dDerInput(t,e,n){const s=new L$(n);return this.compileAndRun(s,[t,e])}conv3dDerFilter(t,e,n){const s=new M$(n);return this.compileAndRun(s,[t,e])}unstack(t,e){const n=t.shape[e],s=new Array(t.rank-1);let r=0;for(let n=0;n<t.rank;n++)n!==e&&(s[r++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=this.slice(t,a,i).reshape(s);return o}avgPool3d(t,e){const n=new AA(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}avgPool3dBackprop(t,e,n){const s=new S$(n);return this.compileAndRun(s,[t],e.dtype)}maxPool3d(t,e){const n=new AA(e,"max",!1);return this.compileAndRun(n,[t],"float32")}maxPool3dBackprop(t,e,n,s){const r=new AA(s,"max",!0),a=this.compileAndRun(r,[e]),i=new kA(s),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}resizeBilinear(t,e,n,s){const r=zt().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new OA(t.shape,e,n,s):new _A(t.shape,e,n,s);return this.compileAndRun(r,[t],"float32")}resizeBilinearBackprop(t,e,n){const s=new FA(t,e,n);return this.compileAndRun(s,[t])}resizeNearestNeighbor(t,e,n,s){const r=new LA(t.shape,e,n,s);return this.compileAndRun(r,[t])}resizeNearestNeighborBackprop(t,e,n){const s=new MA(t,e,n);return this.compileAndRun(s,[t])}multinomial(t,e,n,s){const r=e?t:zc(t),a=r.shape[0],i=r.shape[1],o=new IA(a,i,n),l=o.getCustomSetupFunc(s);return this.compileAndRun(o,[r],"int32",l)}oneHot(t,e,n,s){const r=new CA(t.size,e,n,s);return this.compileAndRun(r,[t])}diag(t){const e=new J$(t.size);return this.compileAndRun(e,[t])}cropAndResize(t,e,n,s,r,a){const i=new G$(t.shape,e.shape,s,r,a);return this.compileAndRun(i,[t,e,n],"float32")}depthToSpace(t,e,n){Z(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const s=t.shape[0],r="NHWC"===n?t.shape[1]:t.shape[2],a="NHWC"===n?t.shape[2]:t.shape[3],i="NHWC"===n?t.shape[3]:t.shape[1],o=r*e,l=a*e,u=i/(e*e),c=new Y$("NHWC"===n?[s,o,l,u]:[s,u,o,l],e,n);return this.compileAndRun(c,[t])}split(t,e,n){return gR(t,e,n)}scatterND(t,e,n){const{sliceRank:s,numUpdates:r,sliceSize:a,strides:i,outputSize:o}=ri(0,t,n),l=[o/a,a],u=t.reshape([r,s]),c=e.reshape([r,a]);if(0===o)return ud(Mr([]),n);const h=go(0),p=new PA(r,s,u.rank,c.rank,i,l);return this.compileAndRun(p,[c,u,h]).reshape(n)}sparseToDense(t,e,n,s){const{sliceRank:r,numUpdates:a,strides:i,outputSize:o}=ri(0,t,n),l=new PA(a,r,t.rank,e.rank,i,[o,1],!1);return this.compileAndRun(l,[e,t,s]).reshape(n)}gatherND(t,e){const n=e.shape,s=n[n.length-1],[r,a,i,o]=ei(t,e),l=e.reshape([a,s]),u=t.reshape([t.size/i,i]),c=new rA(s,o,[a,i]);return this.compileAndRun(c,[u,l]).reshape(r)}fill(t,e,n){if("string"===(n=n||Ct(e))){const s=mt(n,nt(t));return s.fill(e),Bi().makeTensor(s,t,n,this)}{const s=new nA(t,e),r=s.getCustomSetupFunc(e);return this.compileAndRun(s,[],n,r)}}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)}zerosLike(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)}linspace(t,e,n){return cd(t,e,n)}makeTensorInfo(t,e,n){const s=this.write(n,t,e);return this.texData.get(s).usage=null,{dataId:s,shape:t,dtype:e}}makeOutput(t,e,n){const{dataId:s}=this.makeTensorInfo(t,e,n);return Bi().makeTensorFromDataId(s,t,e,this)}unpackTensor(t){const e=new fR(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){const e=new SA(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)}packedReshape(t,e){const n=[EE(t.shape),...$E(t.shape)],s={dtype:t.dtype,shape:n,dataId:t.dataId},r=[EE(e),...$E(e)],a=new DA(r,n),i=this.runWebGLProgram(a,[s],t.dtype,null,!0);return{dataId:i.dataId,shape:e,dtype:i.dtype}}decode(t){const e=this.texData.get(t),{isPacked:n,shape:s,dtype:r}=e,a=AE(s);let i;i=n?new X$(a):new K$(a);return{dtype:r,shape:s,dataId:this.runWebGLProgram(i,[{shape:a,dtype:r,dataId:t}],r,null,!0).dataId}}runWebGLProgram(t,e,n,s,r=!1){const a=this.makeTensorInfo(t.outputShape,n),i=this.texData.get(a.dataId);if(t.packedOutput&&(i.isPacked=!0),t.outPackingScheme===lE.DENSE){const e=pE(t.outputShape);i.texShape=e.map(t=>2*t)}if(null!=t.outTexUsage&&(i.usage=t.outTexUsage),0===nt(a.shape))return i.values=ft(a.dtype,0),a;const o=[],l=e.map(e=>{if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&nt(e.shape)<=zt().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?this.unpackTensor(e):this.packTensor(e),o.push(e),n=this.texData.get(e.dataId);else if(n.isPacked&&!DE(n.shape,e.shape)){const t=e,s=e.shape;e.shape=n.shape,e=this.packedReshape(e,s),o.push(e),n=this.texData.get(e.dataId),t.shape=s}return this.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}});this.uploadToGPU(a.dataId);const u={shape:a.shape,texData:i,isUniform:!1},c=function(t,e,n){let s="";e.concat(n).forEach(t=>{const e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${n}_${e}`});const r=t.userCode;let a=t.constructor.name;return a+="_"+s+"_"+r,a}(t,l,u),h=this.getAndSaveBinary(c,()=>function(t,e,n,s){const r=e.userCode,a=n.map((t,n)=>{const s={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(s.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:s}}),i=a.map(t=>t.shapeInfo),o={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},l=h$(a,o,r,e.packedInputs),u=t.createProgram(l);let c=null;const h=t.getUniformLocation(u,"NAN",!1);1===zt().getNumber("WEBGL_VERSION")&&(c=t.getUniformLocation(u,"INFINITY",!1));const p={};for(let n=0;n<e.variableNames.length;n++){const s=e.variableNames[n],r=!1;p[s]=t.getUniformLocation(u,s,r),p["offset"+s]=t.getUniformLocation(u,"offset"+s,r)}return{program:e,source:l,webGLProgram:u,uniformLocations:p,inShapeInfos:i,outShapeInfo:o,infLoc:c,nanLoc:h}}(this.gpgpu,t,l,u)),p=null!=this.activeTimers;let d;if(p&&(d=this.startTimer()),function(t,e,n,s,r){gA(e.inShapeInfos,n),gA([e.outShapeInfo],[s]);const a=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?t.setOutputPackedMatrixTexture(a,i[0],i[1]):t.setOutputMatrixTexture(a,i[0],i[1]),t.setProgram(e.webGLProgram),1===zt().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach((n,s)=>{const r=e.program.variableNames[s],a=e.uniformLocations[r],i=e.uniformLocations["offset"+r];if(null!=a)if(n.isUniform)if(nt(n.shape)<2)t.gl.uniform1f(a,n.uniformValues[0]);else{let e=n.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(a,e)}else null!=n.texData.slice&&null!=i&&t.gl.uniform1i(i,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,a,s)}),null!=r&&r(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,h,l,u,s),o.forEach(t=>this.disposeIntermediateTensorInfo(t)),p&&(d=this.endTimer(d),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(d)})),!zt().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===r){const t=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),t}return a}compileAndRun(t,e,n,s,r=!1){n=n||e[0].dtype;const a=this.runWebGLProgram(t,e,n,s,r);return Bi().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!zt().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach(t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]})}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Vi(()=>{if(!zt().get("WEBGL_RENDER_FLOAT32_ENABLED")){const t=zt().getBool("DEBUG");zt().set("DEBUG",!1);const e=this.abs(go(1e-8)).dataSync()[0];if(zt().set("DEBUG",t),e>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:n,dtype:s,values:r,texture:a,usage:i,isPacked:o}=e;if(null!=a)return;const l=null!=this.activeTimers;let u;l&&(u=Zs());let c=e.texShape;if(null==c&&(c=function(t,e=!1){let n=zt().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(n*=2,1===(t=t.map((e,n)=>n>=t.length-2?K(t[n]):t[n])).length&&(t=[2,t[0]])),2!==t.length){const e=dt(t);t=e.newShape}let s=nt(t);if(t.length<=1&&s<=n)return[1,s];if(2===t.length&&t[0]<=n&&t[1]<=n)return t;if(3===t.length&&t[0]*t[1]<=n&&t[2]<=n)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=n&&t[1]*t[2]<=n)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=n&&t[3]<=n)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=n&&t[1]*t[2]*t[3]<=n)return[t[0],t[1]*t[2]*t[3]];if(e){const e=EE(t);let n=2,r=2;return t.length&&([n,r]=$E(t)),s=e*(n/2)*(r/2),ot(s).map(t=>2*t)}return ot(s)}(n,o),e.texShape=c),null!=r){const t=AE(n);let a,i=c[1],h=c[0];const p=r instanceof Uint8Array;o?([i,h]=dE(c[0],c[1]),a=new eA(t,[h,i],p)):a=new tA(t,[h,i],p);const d=this.makeTensorInfo([h,i],s);this.texData.get(d.dataId).usage=p?uE.PIXELS:uE.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(d.dataId),i,h,r);const f=!0,m=this.runWebGLProgram(a,[d],s,null,f),g=this.texData.get(m.dataId);e.texture=g.texture,e.texShape=g.texShape,e.isPacked=g.isPacked,e.usage=g.usage,this.disposeIntermediateTensorInfo(d),this.texData.delete(m.dataId),e.values=null,l&&(this.uploadWaitMs+=Zs()-u)}else{const t=this.acquireTexture(c,i,s,o);e.texture=t}}convertAndCacheOnCPU(t,e){const n=this.texData.get(t),{dtype:s}=n;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){const n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length);for(let e=0;e<n.length;++e)n[e]=Math.round(t[e]);return n}throw new Error("Unknown dtype "+e)}(e,s)),n.values}acquireTexture(t,e,n,s){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const t=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${t} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,s)}computeBytes(t,e){return t[0]*t[1]*wt(e)}tryRunOnCpuOrThrow(t,e){if(this.shouldExecuteOnCPU(t))try{return e()}catch(t){if(zt().getBool("IS_TEST"))throw new Error("CPU forwarding failed")}return null}}Sr()&&Zi("webgl",()=>new kR,2);function NR(t){const{inputs:e,backend:n}=t,{x:s}=e;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const IR={kernelName:Ye,backendName:"webgl",kernelFunc:NR};function CR(t){const{inputs:e,backend:n}=t,{real:s,imag:r}=e,a=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(a.dataId),o=NR({inputs:{x:s},backend:n});n.texData.get(o.dataId).complexParentRefCount++;const l=NR({inputs:{x:r},backend:n});return n.texData.get(l.dataId).complexParentRefCount++,i.complexTensorInfos={real:o,imag:l},a}const SR={kernelName:de,backendName:"webgl",kernelFunc:CR};function TR(t){return({inputs:e,backend:n})=>{const{x:s}=e,r=n,a=new ZA(s.shape,t);return r.runWebGLProgram(a,[s],s.dtype)}}function ER({opSnippet:t,packedOpSnippet:e,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const e=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,r]=[[e.complexTensorInfos.real,n.complexTensorInfos.real],[e.complexTensorInfos.imag,n.complexTensorInfos.imag]].map(e=>{const[n,s]=e,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new E$(t,l.shape,u.shape);return c.runWebGLProgram(i,[r,a],fr(n.dtype,s.dtype))}),a=CR({inputs:{real:s,imag:r},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(r),a}const h=a||fr(l.dtype,u.dtype);if(c.shouldExecuteOnCPU([l,u])&&null!=r){const t=c.texData.get(l.dataId),e=c.texData.get(u.dataId),[n,s]=r(l.shape,u.shape,t.values,e.values,h),a=c.makeTensorInfo(s,h);return c.texData.get(a.dataId).values=n,a}let p;return p=zt().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=e?new A$(e,l.shape,u.shape,n):new E$(t,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}const $R="return a + b;",AR=ER({opSnippet:$R,packedOpSnippet:$R,supportsComplex:!0,cpuKernelImpl:VE}),RR={kernelName:jt,backendName:"webgl",kernelFunc:AR},DR=ER({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),FR={kernelName:ne,backendName:"webgl",kernelFunc:DR};const _R={kernelName:se,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e;BE(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Z(cl(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=tl(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&rt(u.inShape,u.outShape))return NR({inputs:{x:r},backend:n});const c=new $A(u,"avg",!1);return n.runWebGLProgram(c,[r],"float32")}};const OR={kernelName:re,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{dy:r,input:a}=e,i=a;BE([r,a],"avgPoolBackprop");const{filterSize:o,strides:l,pad:u}=s,c=tl(i.shape,o,l,1,u),h=new C$(c);return n.runWebGLProgram(h,[r],i.dtype)}};class MR{constructor(t,e,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],To(t,e),To(t,n);let i="0.0";null!=s&&(To(t,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&(To(t,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class LR{constructor(t,e,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],To(t,e),To(t,n);let i="vec4(0.0)";null!=s&&(To(t,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(To(t,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const zR={kernelName:He,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:s,mean:r,variance:a,offset:i,scale:o}=t;Z(r.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),Z(null==i||r.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),Z(null==o||r.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[s,r,a];let c=null;null!=i&&(c=i.shape,u.push(i));let h=null;null!=o&&(h=o.shape,u.push(o));const p=zt().getBool("WEBGL_PACK_NORMALIZATION")?new LR(s.shape,r.shape,a.shape,c,h,l):new MR(s.shape,r.shape,a.shape,c,h,l);return e.runWebGLProgram(p,u,u[0].dtype)}},BR=ER({opSnippet:"return float(a != b);",dtype:"bool"}),PR={kernelName:En,backendName:"webgl",kernelFunc:BR};function WR(t){const{inputs:e,backend:n}=t,{input:s}=e;return NR({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const VR={kernelName:Pn,backendName:"webgl",kernelFunc:WR};const UR={kernelName:ce,backendName:"webgl",kernelFunc:function t(e){const{inputs:n,backend:s,attrs:r}=e,{x:a}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===a.dtype)return NR({inputs:{x:a},backend:s});const e=Bu(a.shape),n=t({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),r=CR({inputs:{real:n,imag:e},backend:s});return e.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===a.dtype){const e=WR({inputs:{input:a},backend:s}),n=t({inputs:{x:e},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(e),n}if(!bt(a.dtype,i)){const t=NR({inputs:{x:a},backend:s});return{dataId:t.dataId,shape:t.shape,dtype:i}}if("int32"===i)return function(t,e){const n=new ZA(t.shape,"return float(int(x));"),s=e.runWebGLProgram(n,[t],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(a,s);if("bool"===i){const t=s.makeTensorInfo([],"bool",ft("bool",1)),e=BR({inputs:{a:a,b:t},backend:s});return s.disposeIntermediateTensorInfo(t),e}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}};class GR{constructor(t){this.outputShape=[],this.outputShape=ml(t,1),this.variableNames=t.map((t,e)=>"T"+e);const e=new Array(t.length-1);e[0]=t[0][1];for(let n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];const n=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let t=1;t<e.length;t++){const s=e[t-1];n.push(`else if (yC < ${e[t]}) setOutput(getT${t}(yR, yC-${s}));`)}const s=e.length,r=e[e.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class HR{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=ml(t,e);const n=this.outputShape,s=n.length,r=v$(s),a=a$("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=t.map((t,e)=>"T"+e);const o=new Array(t.length-1);o[0]=t[0][e];for(let n=1;n<o.length;n++)o[n]=o[n-1]+t[n][e];const l=i[e],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let t=1;t<o.length;t++){const e=o[t-1];h+=`\n        if (${l} < ${o[t]}  && ${l} >= ${o[t-1]}) {\n          return getChannel(\n            getT${t}(${jR(i,l,e)}),\n            vec2(${jR(u,l,e)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${jR(i,l,d)}),\n          vec2(${jR(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map(t=>"int "+t)}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function jR(t,e,n){const s=t.indexOf(e);return t.map((t,e)=>e===s?`${t} - ${n}`:t).join()}function qR(t){const{inputs:e,backend:n}=t,{input:s}=e;return NR({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const KR={kernelName:Ze,backendName:"webgl",kernelFunc:qR};function XR(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e,{shape:a}=s,i=n,o=nt(r.shape),l=ht(a,o),u=nt(l);Z(o===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`);const c=i.texData.get(r.dataId);return!c.isPacked||DE(r.shape,l)||null!==c.texture&&DE(c.shape,l)?(i.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(t,e,n){const s=[EE(t.shape),...$E(t.shape)],r={dtype:t.dtype,shape:s,dataId:t.dataId},a=[EE(e),...$E(e)],i=new DA(a,s),o=n.runWebGLProgram(i,[r],t.dtype,null,!0);return{dataId:o.dataId,shape:e,dtype:o.dtype}}(r,l,i)}const YR={kernelName:Un,backendName:"webgl",kernelFunc:XR};const JR={kernelName:fe,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{axis:r}=s,a=pt(r,e[0].shape)[0],i=ml(e.map(t=>t.shape),a);if(0===nt(i))return n.makeTensorInfo(i,e[0].dtype,[]);const o=e.filter(t=>nt(t.shape)>0);return 1===o.length?o[0]:(fl(o.map(t=>t.shape),a),function t(e,n,s){const r=e[0].dtype;if("complex64"===r){const r=e.map(t=>WR({inputs:{input:t},backend:s})),a=e.map(t=>qR({inputs:{input:t},backend:s})),i=t(r,n,s),o=t(a,n,s),l=CR({inputs:{real:i,imag:o},backend:s});return r.forEach(t=>s.disposeIntermediateTensorInfo(t)),a.forEach(t=>s.disposeIntermediateTensorInfo(t)),s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(o),l}if(e.length>zt().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const r=Math.floor(e.length/2),a=t(e.slice(0,r),n,s),i=t(e.slice(r),n,s),o=t([a,i],n,s);return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}if(zt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const t=new HR(e.map(t=>t.shape),n);return s.runWebGLProgram(t,e,r)}const a=ml(e.map(t=>t.shape),n),i=e.map(t=>XR({inputs:{x:t},attrs:{shape:[-1,nt(t.shape.slice(n))]},backend:s})),o=new GR(i.map(t=>t.shape)),l=s.runWebGLProgram(o,i,r);i.forEach(t=>s.disposeIntermediateTensorInfo(t));const u=XR({inputs:{x:l},attrs:{shape:a},backend:s});return s.disposeIntermediateTensorInfo(l),u}(o,a,n))}},ZR=TR("if (isnan(x)) return x;\n  return cos(x);\n"),QR={kernelName:ve,backendName:"webgl",kernelFunc:ZR},tD=ER({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),eD={kernelName:Fe,backendName:"webgl",kernelFunc:tD};class nD{constructor(t,e,n){this.variableNames=["real","imag"];const s=e[1];this.outputShape=e;const r=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,a=n?s+".0":"1.0";let i;if("real"===t)i="return real * expR - imag * expI;";else{if("imag"!==t)throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function sD(t,e,n){const s=n.texData.get(t.dataId),r=nt(t.shape),a=t.shape[t.shape.length-1],i=XR({inputs:{x:t},backend:n,attrs:{shape:[r/a,a]}}).shape,o=new nD("real",i,e),l=new nD("imag",i,e),u=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:i},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:i}],c=n.runWebGLProgram(o,u,"float32"),h=n.runWebGLProgram(l,u,"float32"),p=CR({inputs:{real:c,imag:h},backend:n});n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h);const d=XR({inputs:{x:p},backend:n,attrs:{shape:t.shape}});return n.disposeIntermediateTensorInfo(d),d}const rD={kernelName:Pe,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:s}=e;return sD(s,!1,n)}};class aD{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const iD={kernelName:Ve,backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{image:n}=t,s=e,r=new aD(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}};class oD{constructor(t){this.variableNames=["A"];const e=i$(),[n,s]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class lD{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=i$(),[n,s]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const uD={kernelName:Ts,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t;let{pixels:r}=e;const{numChannels:a}=s,i="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[l,u]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,a];(o||i)&&(null==cD&&(cD=document.createElement("canvas").getContext("2d")),cD.canvas.width=l,cD.canvas.height=u,cD.drawImage(r,0,0,l,u),r=cD.canvas);const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=uE.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),r);const d=zt().getBool("WEBGL_PACK")?new lD(h):new oD(h),f=n.runWebGLProgram(d,[p],"int32");return n.disposeData(p.dataId),f}};let cD;const hD={kernelName:Je,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:s}=e;return sD(s,!0,n)}};class pD{constructor(t,e){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=t;this.outputShape=[s,a];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=e){const t=1/e;l=`sumValue += dot(values * ${at(t)?t.toPrecision(2):t}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}function dD(t,e,n,s){const r=function(t){const e=[];for(;0===e.length||1!==e[e.length-1].outSize;){const n=e.length?e[e.length-1].outSize:t[1],s=ou(n);e.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return e}(t.shape);let a=t;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:l,outSize:u}=r[i];let c,h;c="mean"===n?0===i?new pD({windowSize:l,inSize:o,batchSize:t.shape[0],outSize:u},o):new pD({windowSize:l,inSize:o,batchSize:t.shape[0],outSize:u}):new RA({windowSize:l,inSize:o,batchSize:t.shape[0],outSize:u},n),h=a,a=s.runWebGLProgram(c,[a],e),h.dataId!==t.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class fD{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let s=0;s<n.length;s++)n[s]=t[e[s]];this.outputShape=n,this.rank=n.length;const s=v$(this.rank),r=function(t){const e=t.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(e);for(let e=0;e<t.length;e++)s[t[e]]=n[e];return s.join()}(e);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class mD{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(t.length);for(let s=0;s<n.length;s++)n[s]=t[e[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=v$(this.rank),r=r$("rc",this.rank),a=new Array(this.rank);for(let t=0;t<e.length;t++)a[e[t]]=r[t];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function gD(t,e,n){const s=zt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new mD(t.shape,e):new fD(t.shape,e);return n.runWebGLProgram(s,[t],t.dtype)}const yD={kernelName:fn,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:s}=t,{reductionIndices:r,keepDims:a}=e,i=n,o=s.shape.length,l=pt(r,s.shape);let u=l;const c=Wo(u,o),h=null!=c,p=i.shouldExecuteOnCPU([s]);let d=s;if(h){if(p){const t=i.texData.get(d.dataId).values,e=new Array(o);for(let t=0;t<e.length;t++)e[t]=s.shape[c[t]];const n=QE(t,s.shape,s.dtype,c,e);d=i.makeTensorInfo(e,s.dtype);i.texData.get(d.dataId).values=n}else d=gD(s,c,i);u=Uo(u.length,o)}Po("max",u,o);const[f,m]=zo(d.shape,u);let g,y=f;if(a&&(y=Bo(f,l)),p){const t=i.texData.get(d.dataId).values,e=KE(t,nt(m),y,s.dtype);g=i.makeTensorInfo(y,s.dtype);i.texData.get(g.dataId).values=e}else g=function(t,e,n,s){const r=nt(e),a=XR({inputs:{x:t},attrs:{shape:[nt(t.shape)/r,r]},backend:s}),i=dD(a,t.dtype,"max",s),o=XR({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(d,m,y,i);return h&&i.disposeIntermediateTensorInfo(d),g}};const bD={kernelName:gn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e;BE(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Z(cl(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=tl(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&rt(u.inShape,u.outShape))return NR({inputs:{x:r},backend:n});const c=new $A(u,"max",!1);return n.runWebGLProgram(c,[r],r.dtype)}};const xD={kernelName:yn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{dy:r,input:a,output:i}=e,o=a;BE([a,i],"maxPoolBackprop");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=tl(o.shape,l,u,1,c,h),d=new $A(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new vA(p),g=n.runWebGLProgram(m,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}};const wD={kernelName:wn,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:s}=t,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=e,l=n;Z(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const u=[1,1];Z(cl(a,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);const c=tl(s.shape,r,a,u,i),[h,p]=function(t,e,n,s){let r=new $A(n,"max",!1);const a=s.runWebGLProgram(r,[t],"float32");return r=new $A(n,"max",!0,!0,e),[a,s.runWebGLProgram(r,[t],"float32")]}(s,o,c,l);return[h,p]}};const vD={kernelName:vn,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:s}=t,{keepDims:r,axis:a}=e,i=n,o=s.shape.length,l=pt(a,s.shape);let u=l;const c=Wo(u,o),h=null!=c,p=i.shouldExecuteOnCPU([s]),d=[];let f=s;if(h){if(p){const t=i.texData.get(f.dataId).values,e=new Array(o);for(let t=0;t<e.length;t++)e[t]=s.shape[c[t]];const n=QE(t,s.shape,s.dtype,c,e);f=i.makeTensorInfo(e,s.dtype);i.texData.get(f.dataId).values=n}else f=gD(s,c,i);d.push(f),u=Uo(u.length,o)}Po("sum",u,o);const[m,g]=zo(f.shape,u);let y=m;r&&(y=Bo(m,l));const b=function(t,e,n,s){const r=nt(e),a=XR({inputs:{x:t},attrs:{shape:[nt(t.shape)/r,r]},backend:s}),i=dD(a,"float32","mean",s),o=XR({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(f,g,y,i);for(const t of d)i.disposeIntermediateTensorInfo(t);return b}};class kD{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const s=t.length,r=v$(s),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class ND{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const s=t.length,r=v$(s),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=a$("rc",s),l=a$("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===s){const t=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${t}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${t}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const t=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${t}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${t}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${t}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${t}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const ID={kernelName:In,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:s}=t,{paddings:r,mode:a}=n,i=zt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ND(s.shape,r,a):new kD(s.shape,r,a);return e.runWebGLProgram(i,[s],s.dtype)}},CD="return areal * breal - aimag * bimag;",SD="return areal * bimag + aimag * breal;";class TD{constructor(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=To(e,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const ED="return a * b;";const $D={kernelName:Sn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{a:s,b:r}=e,a=fr(s.dtype,r.dtype);if("complex64"===s.dtype){const t=n.texData.get(s.dataId),e=n.texData.get(r.dataId),a=new TD(CD,s.shape,r.shape),i=new TD(SD,s.shape,r.shape),o=[{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:s.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=CR({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const t=n.texData.get(s.dataId),e=n.texData.get(r.dataId),[i,o]=XE(s.shape,r.shape,t.values,e.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=zt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new A$(ED,s.shape,r.shape):new E$(ED,s.shape,r.shape),n.runWebGLProgram(i,[s,r],a)}},AD={kernelName:$n,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Zp("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:s,scores:r}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=n,l=e;return ep(l.readSync(s.dataId),l.readSync(r.dataId),a,i,o)}},RD=np,DD={kernelName:An,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Zp("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:s,scores:r}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:l}=n,u=e,c=u.readSync(s.dataId),h=u.readSync(r.dataId),{selectedIndices:p,validOutputs:d}=RD(c,h,a,i,o,l);return[p,d]}},FD=sp,_D={kernelName:Rn,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Zp("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:s,scores:r}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=n,u=e,c=u.readSync(s.dataId),h=u.readSync(r.dataId),p=a,d=i,f=o,m=l,{selectedIndices:g,selectedScores:y}=FD(c,h,p,d,f,m);return[g,y]}};class OD{constructor(t,e,n,s){this.variableNames=["Image"],this.outputShape=[];const r=t[1],a=t[2],i=Math.sin(e).toFixed(3),o=Math.cos(e).toFixed(3);this.outputShape=t;const[l,u]=zp(s,r,a),c=l.toFixed(3),h=u.toFixed(3);let p="";p="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${c}) * ${i} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${p}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${r}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const MD={kernelName:Es,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:s}=t,{radians:r,fillValue:a,center:i}=e,o=n,l=new OD(s.shape,r,a,i);return o.runWebGLProgram(l,[s],s.dtype)}},LD=TR("if (isnan(x)) return x;\n  return sin(x);\n"),zD={kernelName:ns,backendName:"webgl",kernelFunc:LD},BD=TR("return x * x;"),PD={kernelName:ds,backendName:"webgl",kernelFunc:BD},WD=ER({opSnippet:"return (a - b) * (a - b);",packedOpSnippet:"return (a - b) * (a - b);"}),VD={kernelName:ps,backendName:"webgl",kernelFunc:WD},UD="return a - b;",GD=ER({opSnippet:UD,packedOpSnippet:UD,supportsComplex:!0,cpuKernelImpl:ZE}),HD={kernelName:fs,backendName:"webgl",kernelFunc:GD},jD=TR("return tan(x);");const qD=[RR,FR,_R,OR,zR,UR,SR,JR,QR,eD,rD,iD,uD,IR,hD,KR,yD,bD,xD,wD,vD,ID,$D,AD,DD,_D,PR,VR,YR,MD,zD,PD,HD,VD,{kernelName:ys,backendName:"webgl",kernelFunc:jD},{kernelName:vs,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:s}=t,{perm:r}=e,a=n,i=s.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=s.shape[r[t]];let l;if(a.shouldExecuteOnCPU([s])){const t=a.texData.get(s.dataId).values,e=QE(t,s.shape,s.dtype,r,o);l=a.makeTensorInfo(o,s.dtype);a.texData.get(l.dataId).values=e}else l=gD(s,r,a);return l}},{kernelName:ks,backendName:"webgl",kernelFunc:function(t){const{inputs:e,attrs:n,backend:s}=t,{axis:r}=n,{x:a}=e;BE(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=t$(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}}];for(const t of qD)Ls(t);const KD={"tfjs-core":Fi,"tfjs-backend-cpu":"2.7.0","tfjs-backend-webgl":"2.7.0","tfjs-data":EI,"tfjs-layers":Oy,"tfjs-converter":wN,tfjs:"2.7.0"}}}]);